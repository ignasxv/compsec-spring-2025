UNKNOWN
All right. All right. Morning. All right. All right. We're back in business. After I hose the hose. My VM. Let me move this. Good. That's exactly right. Could be my main system. Yeah. Um. All right. So I think I think where we left off. And correct me if I'm wrong. I think what we did is I did an I didn't update, but what we didn't do, I think we covered how to um, let me make this a little bit bigger. Um. I know it's out there, but it doesn't stick. Uh, there's only an issue. There it is. No, that's not it. That's not it. Hold on one. Oh! No, that's the terminal size. Ah, she's right there. Okay. Let's see if that does a trick. There we go. You guys can see it in the back, right? Good. Yeah. Little bigger. Good. All right. I see one thumbs up. Okay. Um, so I think we're, uh, where we left off. Is, um, a couple quick things to review. One is when we do a sudo apt update that does not actually, uh, upgrade any packages that we have that just updates the repository. Okay, so you're not doing anything that's harmful, uh, or shouldn't say harmful. You're not actually upgrading any software with that. Right. Um, and then when we use apt, uh, if we want to install something like, let's say apache2, um, you can use that to both not only install it but also upgrade a package as well. So if there's an update out there, you can also use apt install to perform the upgrade. So I'm going to install Apache two, uh, just to uh, because well, this is a new VM. So um, all right, how do we check to see if Apache two is running? Let me tell me, what command do we use? What program. Yeah. System systemctl right. Perfect. Okay. So if I do a system CTL status Apache two, I can see whether or not it's running right. Um, I get some other information here to which, which will, which we'll dive into a little bit more. But what if I want to restart Apache two? Let's say I made a configuration change. I want to restart it. Do I still use systemctl? Okay. What's the thing that I change in there. Status becomes restart. Right. But there is a little problem with this. I mean I got a prefix of with pseudo, right? If I want to restart I got prefixed with pseudo. So now um, depending on the operating system you have installed, you may, uh, get that prompt. But I do have to prefix it with sudo. If I prefix it with sudo it will restart it. Okay. Not all services are like this. If I have a service that's running under my user ID, I don't need that sudo. But if it's running under a different user id, I do need that sudo. Okay. So, um, we also took a look to that. We can stop obviously apache2 and we can start it. And all that restart is a combination of those two. Okay. So if you're making a configuration change for a patch you want to bounce it really quick. What I mean by bounce is restart it. Um, just doing a restart on its own is makes a lot more sense. All right. So I think that's where we left off. Um, now I already I already did a fresh boot of this system. And when I do that Apache starts right away. Okay, but what I don't want you to think is that every service that you have running restarts automatically. Okay. Um, what you can do is I'm going to show you. Um, if I wanted to make sure that Apache had to manually be started. I can disable it. And what does disabling do or what disabling does is it's a little bit different than what the name might imply. Um, that will prevent it from automatically starting when I reboot the server. Okay. So sometimes you might just want to have a system that you actually have to manually start. Um, uh, or, um, or you want it to be, um, or you want it to run when you reboot the system, but, uh, but that's what disabled does. Okay. So, um, and if I wanted to check that I can use systemctl like we did before. List of unit files and see everything that has a state of disabled. Okay. And so that will show all the ones that have a state of disabled. And there we see a patch to it state is disabled. Okay. So if I want to just re-enable that so that anytime I reboot I just do the same thing enable. And that will make sure the service is enabled. Okay. So those are just some different combinations of how we can use systemctl, um, to uh, to manage servers and to manage services and whatnot. Okay. Now. Um, because we had in class, uh, short last time. Um, I'm going to skip, um. I'm going to skip this, uh, MariaDB exercise. Okay. I, I did post this, and this is something you want to try in your own. You can, but we're actually going to skip this exercise just because I want to make sure that we have enough time to get through everything out here. But, um, but if you're interested in installing a database server on your VM, there's a bunch of different, uh, open source software options you have on there. Uh, MariaDB is one that is essentially like a replacement for MySQL. Um, you can try installing that on your own time, if you like. Um, but, uh, the other thing you could try doing is, uh, uninstalling MariaDB, which you just do an apt, um, uh, remove. And there's also an apt auto remove which will also remove, dependencies that MariaDB are dependent on. So, um, but one thing, um, one thing I do want to discuss, though, that we didn't get enough time to get to, was this idea of applying a principle of least privilege. Okay. Uh, this is really important in computer security, because the idea is that you only want to give people the permissions they absolutely need to do their job, and no more. Okay. So sometimes what you might find if you check with a Reddit form, or maybe if you check in with saying, hey, the service isn't running, what should I do? Um, you might see a suggestion like, hey, uh, why don't you make sure that this director has all the permissions to do this mod 777 on that, and that will get rid of that permission error. Um, that is not something you want to do. Okay. Uh, you also don't want to have, uh, users that have too many permissions. Okay. So let's let's take a look at how we can actually apply this, uh, with our services. So if you go on your VM. What I want to do is I want to, um, uh, create a new user. Okay. Uh, that's my place. So I'm going to clear this screen, and, um, I'm just going to go ahead and you can make up whatever user, uh, you want. I'm going to create a new user called SoFi. Okay. And because we're creating a new user, we do have to be, uh, an administrator to do that. So we'll do sudo add user Sophie. Now, um, what we're going to do is we're going to generate uid generate g id. So a user ID, a group ID for that, and it's going to get some files that we see in C skeleton. Okay. And that's going to create a home directory for it. And I'm just going to create a simple password. Or maybe not. Let me see. Okay. Let me do a bad password. And I can give this a full name. Room number. All this different information. You might be wondering why do I have room number? Work phone, home phone and all these other things on here. Um, there used to be, uh. Well, if you had a multi-user Linux system, uh, you have people that are typically working on it, and you might do a lookup on it. So you might do like a Hu on that user. And there's also a command called finger that you can find more information about them. Um, but anyways um, so I got this new, uh, user Sophie, and I can check to see that Sophie exist. I can use a tail command on Etsy. Password. And I see Sophie down there. Remember, tail just shows the end of the end of the file. Okay. Uh, and if I really wanted to see, uh, I can see that entry and also an SC shadow, although I'll get a permission error here. Right. Because I'm not, um, I'm not a privileged user. But if I do a sudo in front of that, I could do a tail on that, right? We talked about storing the salted version of that password that is hashed, uh, in Etsy password or Etsy shadow. And then I can, um, switch over to user two. Right. So I can do an Su over to Sophie, type in Sophie's password, which I just left this password. Oh. There we go. And I can verify that I'm Sophie. Uh, Once I switch over to a user, I can do who am I? I say, Sophie. Um, there's a longer version of this that will show. Oh, I thought I'd show a little bit more. Okay, but that shows is logged on the system. Uh, but anyway, so if I type in, who am I? I can verify that am Sophie. And then if I take a look at, um, the group file. I can see that I got a Sophie group as well. And this may seem odd, um, when you're creating a user, uh, on Linux. But if I were to take a look at LHS, al, try to take a look at the permissions. I see that, um, all the files within Sophie's home directory, as you would expect, has the user owner of Sophie and the group owner of Sophie. And this may seem odd in Linux, but by default, Whenever you create a user, it also creates a group that is named after the user. Okay. Um, but if I were to type in groups. I could see that Sophie is both. Uh, the user is part of the group Sophie and part of the group users. Okay. So if I were to a to do a sudo systemctl stop apache2 as Sophie. As you would expect, if I type in this password, it shouldn't succeed, right? No ordinary user on our system should just be able to stop apache2. Um. And right. We see Sophie is not in the Pseudolus file. If you tried, you might see something else, though. If I try it, you might see something else. What did you see? I just had a question. Oh, I'm asking you, sir. And what was that? I'm sorry. Say it again. How would you like to make yourself so, I guess. Oh, yeah. Yeah, yeah. So all we did is just do a pseudo user add. So let me show it here. No, no. How do we enter a show. Oh how do we enter the show. Yeah. You just do an su dash. Um, so I just did a sudo add user to add Sophie. Now I'm in the show. Sophie. Let me exit out of here. If I type in exit, I'm going to exit that shell with Sophie. But if I just do an su dash. Sophie. Sophie, I can now enter Sophie's password. And that is just switching the user. Okay, that's all I can do. If I try to stop a patch of two, I get that Sophie is not in this pseudo file. Okay. Um. Some of you may got a different message with this. They may get something else added to that. Yes. This incident may be reported. Right. Can anybody get that? No. Okay. Um, so it's kind of like a it's it's kind of a warning, but typically you'll see. Um, I think I would have saw it on the previous VM, but maybe because I saw this new one, I used a different, um, version of ubuntu on there. But often you'll see after this, this incident will be reported and all it's doing is just logging that. Hey, this user tried to run something as pseudo, um, and they didn't have permission to do so. And this is part of what we got into before you want to log everything, right. So, um, if we, if we get into what this actually means, and I might be able to see it here. Let me see if I can. I'm going to do journal CTL. Journal CTL is a way of seeing all the logs, um, that get logged to system D on our operating system, and we can view it with Sophie. Oh, there it is. It was reported. Look at that Sophie user. Uh, not in sewers file and I can scroll to the right. I can see exactly what they tried to ran or run. Okay. So if I have some users trying to do something maliciously, um, I can see that log entry in there. Okay. Um, so that's what journal CTL. So, um, there's two ways that we can allow, let's say that, uh, Sophie is um, a user that we want to allow them to be able to restart Apache. Um, when we did this, it told us that's not in the Pseudolus file If I take a look at that file. This used to be the old way of doing it. I think that's. Yeah. Nope. Okay. That's not going to work. Hold on. Sudo. Oh. Hold on. We got a chicken egg problem. Let me back up. If I take a look at that pseudo file. And I scroll down. This is our pseudo config. And I'm not going to test you on this or anything like that. Um, but if I go down it will say, hey, look, root can do everything. That's our administrator user, right? Um, the members of admin can also get root coaches. Uh, but here it says if anybody, uh, is in this pseudo group, allow them to execute any command. So there's two ways of managing this. One is putting Sophie within this file, which we can maybe add some more fine grained control. Or if Sophie can also be an admin on the server, we can simply add Sophie to the group called pseudo. And by giving Sophie access to pseudo, Sophie will be able to restart apache2. So we can do that mainly by within the file. Or what we could do is we just modify. So I'm going to modify Sophie and I'm going to modify the group pseudo and add Sophie to it. Okay. So I'm going to use that user mod command to to do that. Now I'm not going to ask you to remember the flags exactly for that. But now if I were to switch over to Sophie to Sophie. Now. Type in groups. Notice I am now in the pseudo group. Right? Before it was just Sophie and users. Which means I can now restart Apache two. And it works, right? It works. Now, if I type in journal CTL, this part is just as important. We don't just log failures, we also log anything that's successful as well. Right? So um, so anyways, what I want you to take away from this is, um, if we want to allow a user to be able to do something more privileged, there's a couple of ways to do it. We can modify the actual pseudo file, or we can actually just add them to the pseudo group. Okay. But on Linux Or an operating system in general. We want to protect the ability to be able to do anything. Um, as a as a root user. Okay. So, uh, what we don't want to do is we don't want to just say, well, this user should be able to do all these things. We want to manage it based on their specific roles. Okay. So here having the actual pseudo role. Okay. All right. Any questions on that. No. Okay. All right. So um, but anyways, uh, that's the idea with, uh, applying principle of least privilege. We just don't want anybody to be able to do anything. We want to be able to restrict it. We want to be able to lock it down. Um, we could even take this a little bit further and say, look, uh, Sophie, if they're only job is maybe administering that web server, we should create a separate group that doesn't allow them to just be able to run anything with the pseudo command. Maybe we only allow them to be able to restart apache2, and we can certainly do that in the pseudo file. Okay. All right. So what I want you to do, and you could do this, uh, break this out into groups is I want you to, uh, using that test account. Uh, you created. Okay, uh, create a directory that has devs as the group owner. Create two files in the directory A and B. One file has the word hello in it. The other file has the word world in it. I want you to change the permissions of A so that the group can read the file, change B so the group cannot read the file, and then change the directory so that the group devs can read, write and execute the directory. I want you to switch to that other user. This is just using the user add command. All right. And then see what files you can read, what files you can change, and then see if you can add a file and then run LSL in the directory. And then change the permission for the group to just R, see if you can add a file. See if you can run LSL on the your directory. So give you ten minutes to do this again. Um, you need the user ad, uh, command to be able to do this. And what I'll do is I'll put that up on the display as well, in case you need that. Let me exit out of here. No, that wasn't it. Oh, wait. That was it. Yeah. Sudo add user. So I'll leave that up there. Um, actually let me do this here. All right. So I'll, I'll drop that in there. Just in case you need that. Okay. Um, so working groups. Let's see where we're at in ten minutes, and then we'll leave it together. So we still get some practice with it. As well. About the submissions. You have to. See the right. You want to get rid of it, and there'll be, uh, you know. Yeah. So. Uh, yeah. So. We'll go through a solution with this. But if you feel that, like, I don't remember how to change the permission or anything like that, is it time to kind of work through that stuff? Um, so we will review the solution. But that's part of the part of the challenge. You don't need to remember that. You can never be afraid to write your notes. I'll help you stick a little bit more of we get into it. What? Do you call that? Yeah. Yeah. So you make a group call that. Looks like how there's a bad user. Um, you can add a group. Or. Something. That was meant to show that. I use this group. So that's it. There you go. Thank. You. Okay. So. Yes. Yes. Yes. That's right. That's. Is that right? That's right. So we need to relax. What does. That mean? Yeah. Does that make sense? I would like. To see that. Yeah, I see that. You and your colleagues. Excuse. Me? All right, let's start working through. Let's start working through a solution. Um, on here. So first thing we need to do is we need to be able to create the group, uh, dev or Dev's right. And I'm going to add both of my users to that. So so let's do that piece first. And if you got that far, that that's good. But um, so I'm going to do a super or sudo uh, group and I'm thinking super user. I want to create the group called devs. Now when I create that um, there's nothing that's saying that I'm part of it, right? If I type in groups, I'm not part of Dev's. I'm part of some other things. Um, but I'm not part of dev. So, uh, if I want to make sure that I'm added to it. We already did that before, right? So I did that user mod command and instead of doing sudo here I'm going to do devs and I'm going to add Sophie and I'm going to add myself. Now if I type in groups. What's the problem. I don't see dads out there do you. I don't see it. Right. So, um, if you run into this problem, it's because in your current shell, we have the current groups that we had when we started that shell. Right. That started that session. So I can do an exit. I can go back in if I type in groups. Now I see it. Look at this. Lucky kids. Right. No school tomorrow. My kid told me yesterday, he goes, you don't have Valentine's Day. Off I go. You know, Valentine's Day is like, not a holiday. You get off. It's like a teacher workday or something like that. All right. What the heck? Why don't I have I swear I added that to. Oh, no, that shouldn't be the case. Right? Hold on. Why don't I see that? Is that because. I'm saying political. This is interesting. Oh. All right. I have to tell you, I'm kind of like, oh, for two with demos recently, right? Um, I plan on not killing the machine today, though. I wonder if it's showing the group because I don't have a new session yet, so I'm going to try to do that and hopefully that will do the trick. But it should have showed up. Should have. Come on. Snappy. Oh, uh, by the way, we talked about different services starting when we enable them. Here, you can see I'm actually starting here. Um, when you set up your services, um, you set them up with specific dependencies. So, like, if you want to start a patch or two, obviously you might, um, rely on the actual network service. So. This has taken a long time. I should just log down, log back in. And I think that would have did the trick. Come on. Don't do this. Don't do this. Shouldn't take that long. I know, but it shouldn't take this long. Let me see. I think the network adapter is attached to it. I'm going to disconnect really quick and see if it does it. Come on. There we go. Oh. I answer every building without being asked. Yeah. My I'm waiting to see if it comes back up. Oh, man. I really don't want to do this. I really don't want to do this. But let's do it. Okay. Oh, it looked like something happened, right? I did that. Uh. All right, let's see. Usually the Linux system boots up pretty fast. So. Maybe not. Let's not knock. Let's not knock a bug, too. Come on. This isn't, like a good selling point to say, like, hey, you should switch to Linux, right? I'm thinking, like, I'll just stick to my windows and whatnot. I think I can smell fear. Yeah. Then network adapter reattach. Now it's disconnected. I'll just wait. All right, so I think the reason why I didn't see that group there, though. So what can happen is if you modify a user and they have an active session at that moment in time, that active session won't see the updates. Okay. What I should do is I should just log out and then log back in. Um, and so that's why I'm doing that reboot should also fix that too. But you shouldn't require reboots. Just a new session for that user. So I actually thought starting a new show would start it. Um, but that was not the case. See, my concern here is there's no limit to how long this service can take. It should. Come on. There we go. I think it's because I switched the network. There we go. All right. Okay. All right, so if I type in groups there, I see devs. Okay. Jeez, that took a while, huh? All right, so, um, now that I know that I made it to the group stuff, and what I said before is, uh, you could have just logged out to, um. That would have been an option as well, but, um. But anyways, um. All right, so we got the group devs, and for the sudo. I'm not worried about that right now. If I were to switch over to SoFi. Okay. Groups. Groups. I see that Sophie's and devs as well. All right, so we're both in the same group. Okay. Um, so what I want to do is I want to be able to change. Um, I want to be able to change or be able to create those two directories. Right. So if I go over here, I say create two files. Um, in the directory A and B okay. One file has the word hello in it. Um, the other has a word, uh, the word world in it. Okay. And so I'm going to make it just a test directory. Let me get rid of that. Just so that we can reference that. Okay. So I'm going to exit out of here. I'm going to make a directory. I'm going to call it test okay. I'm going to go into test I'm going to make two files. Quick way of doing this. You can do a touch a B that creates a two files okay. We don't have anything in there. All right. Now if I jump back over I said one file has the word hello. The R has a file has the word world in it. We could do this in VI. All right. Or you could just do a simple hello. Drop that into a world. Drop that into B. If I cat a I cat B, I see both files have that okay. You can certainly open a VI, but I think that's, uh I think that's a little bit overkill. Okay. So. The next step. So we create two files in the directory and a and b change the permissions a so that the group can read the file. Now if I'm thinking about read what number are we thinking about. For my command. You will see a question about permissions on the exam next week for we're going to talk about today. It's on the syllabus though dates don't change. Okay. So it's a week from today. Um all right so if we want to add read we're going to use a four right. So change the permissions of a so that group can read the file change B so that group cannot read the file. So there's a couple of ways we could do this. If I take a look at the permissions on these right now Group can read a write, but group can read B, and this says we don't want the group to be able to read B, okay, so we can take away the four we know we have a right, which would be two. So I can take a look at the previous permissions and I can say, all right, well let me try to figure out what the number is. The other way I could do it is I can make a relative change. I can say take away from the group, take away the read permission on B, and if I take a look at that, that's a way of just changing those permissions relatively. So we don't have to remember the number, or if we don't want to have to recall what the past permission was, okay. So that takes away B the other way. Like I said, I could have did it though is I know that this. Let me see. What is Where's that? There we go. I know that over here. That's for the user. Right? And so R plus w that's four plus two. So that's a six. So that would be A624. And that would give me the same thing. So I could do the mod 624. Uh on B and that it's not you're not going to see a change. It's going to be the same exact thing. Okay. So there's two ways of doing it. All right. So one is doing that relative change. The other is doing that number. Any questions on that. No. All right. All right. So um change permissions a so group can read the file. We did that change B. So group cannot read the file. All right. Change the directory so that group does can read uh. Right. And um. Read write and execute the directory. So I'm going to go back and this is my directory. Test. Test is owned by me right. But if I want to allow the devs group to own it, there's a couple ways we could do it. But the easiest way is I can prefix it by saying I want Brian Krupp to still be the owner, and then switch devs to be the group. But you can omit that and just say devs to be the owner of test. Now. When I do that, you notice that the group changed. So this allows me now to say, all right, anybody in the devs group I want to be able to set permissions on test directory. If you're doing a chain command though, and let's say I want to change ownership to Sophie, I cannot do that because I can't just give somebody. I just can't give ownership of one file to somebody else. Root has to do that. Okay, but I can't change a group owner because I'm a member of that, right? So if I take a look at that still I still see devs on there. And then the last thing that I want to be able to do going back to this is I want to, uh, allow that devs, uh, to be able to read, write and execute the directory. So read is for right is two, execute is one that gives us seven. Right. So if I take a look at this test directory do we need to make a change. So if I want to give devs can read write and execute the directory. Do I need to make a change? No I don't. Right. If I take a look at those first three characters, there are for the owner. The next three characters are for the group. The group can read, write, and execute. I don't need to make a change. The last three are for everybody else, right? So if you're not here, which means you get those permissions if you're not here, which means you get those permissions, you're anybody else, which means you get these permissions, meaning nobody else can write that directory. Okay. Yeah. Um, I have a special command that is showing up on the screen. If you do a space dash out. You should see You know. Oh, yeah. Uh. Over there. I just got your files. Yeah. That's it. You see him now? This is what you see. Except I just see a lot more. All right, so when we have that now, we want to do a switch to the other user, see what files we can read, what files we can change. Can we add a file. Can you run LSL on it. So I'm going to switch over to Sophie. Now I'm going to do an Allen home Ryan Krupp slash test. Oh. What happened? Why can't I see what's inside of test? I can read it, right. I can read that directory. So why don't I have access to it? If I go into test, that's the path, right? That's my path. Why can't I see what's in there? Seems like it should work, right? Switch over. Back to Sophie. Now. Do an Alice. Well, I'll just go back up there. Right. Home, Brian. That's a directory, right? I'm part of devs. Why can't I see it? Yeah, we don't have access to the directory above it. Yeah, so I know I have in my directory. I know I can go into home because. Well, I'm there. Right. If I go up one directory dot dot. I take a look. There's Brian. I can see it. If I try to CD into it, I get permission to deny. Right. So we got to go up a little bit further. right? So I gotta switch back over. To my directory. And if I want to allow other people to be able to read my directory. I'm going to go up a directory. Now I'm at home. I could do a mod I can add for everybody else. Now this is well I'm sorry. Anybody else to be able to read and execute my directory. God be careful with this obviously. Right. Because now if we start dropping files in our directory other people can see them. But now I can do that. And if I take a look now I can see that. All right R and x is applied to anybody else. Now you might be wondering why didn't you apply it to the group? Well, SoFi is not part of the Brian Kruk group. SoFi is part of the devs group. So that one apply, right? That could have been an easy fix, but I don't want to give that group ownership to SoFi. you. So I'm gonna sue back over to Sophie. And now that I'm in there, I'm going to do the same thing. Now I can see it because I was able to go into that Brian Krupp, director. I was able to read and execute in that directory. Okay. All right. Now, um, these files we did not give to dev though, right? We did not give to dev. So, um, if I wanted to read one of those files, I can certainly let me switch this to a cat. I can certainly read, uh, a and I can certainly read, uh, B, although I think now we're okay with that. Um, I didn't give those, uh, group ownership to, um, to the devs group, but I think they'll be okay for this example. But the other thing I want wanted to try was seeing if we can add something to that directory. So if I try to do a touch. That will work. Because if I take a look at permissions. I have a right permission to that directory. And I'm part of the devs group okay. Which also means if I were to take a look at the files in there. Let me. I'm going to. Okay. Sophie does not have right access to this file. Agree. Sophie does not have right access to this file because Sophie is obviously not Brian Kropp. Sophie is obviously not part of the group. Brian Kropp Sophie is part of devs. Should I be able to remove that file? Let's try it out. So if I do an RM on that. Why did that work? I did have right access to the file. Why I was able to remove it. I mean, you know, the answer is. That's exactly right. I'm not changing the file. I'm changing what's in the directory. Right. I had right access to that home directory. Right? I had right access to test. If I have right access to test. That means I can modify what is in test. Even if I don't have right access to the file, I can remove those. Okay. So the way that permissions work on files and on directories works differently, you have to think about what permissions on the on the directory. What that allows you to do and what's on the file. I could have zero access to an actual file within a directory, but if I have right access to that directory, I can remove that file. Okay. All right. There are some special permissions we're not going to get into, but there's two I just want to bring them up. There's something called set UID and set G id. Um a good way of kind of seeing this is if you do, uh, let me do this. Which password? Uh, when you type in which on Linux and you type in a particular program, it will tell you where it finds that program. Okay. So this is a user ID password. If you look at the permissions on that command. You'll notice it has something a little bit different, something we haven't seen before. And that's an S right here. Okay. Um, that's is what we call a set UID bet. If I want to change my password, I'm Sophie right now, so I want to change my password. It's going to ask me for my current password, and I'm going to set a new one. Oh come on. Oh, I don't think it's going to let me. Oh. Come on. All right. I gotta do something more secure. Oh, shoot. All right. Current password. All right, so let's think about this for a minute. I'm Sophie. Did I run this with sudo? I did not write, I didn't I didn't run this with pseudo, but for some reason I was able to run this command which changes what file Etsy password as he shadow Etsy shadow now as Sophie. If I try to do an edit on Etsy shadow, what do I get down here? I get permission denied, right? I shouldn't be able to see that file because that has the passwords for the server on there. Right there. Hash are salted, but I still can't access that file. So how is it that when I run a command called password, I may actually be able to change that file? That's where that special permission comes in that we see here. This is what's called a set UID bet. All right. And it's um, we need to be able to have this on here. Okay. But the idea behind the set uid bit is that when I run this command, it's not going to run as SoFi. It's going to run as the user ID that's set on the actual program on the actual file. So it will run as root, and it needs to do that because it's going to make a change to Etsi shadow. Without that, I would not be able to change my password. But the alternative would be I would have to allow Sophie access to change the shadow file, and we don't want to allow that. Okay, so that's a special permission. Um, the way you can set it is with a plus s command, a u plus s, so we can actually do that. And you'll notice that it's in red there. Okay. Uh, but if I were to create just a file in my own home directory and I just do an LSL on it, if I do a mod u plus s on a, you'll notice that it has that set ID bit on there. Now, um, and that will allow uh, if we, if this were an executable to be able to run, uh, as that actual user on it. Uh, you can also do a group set UID so it runs with permissions of the group. And there's one other uh, uh, there's one other thing that we can also add to it. And it's something called a sticky bit. Um, it more applies to a directory. Uh, the idea behind it is that only the user can remove things out of that directory. Okay, so those are just some special permissions, but, uh, but anyways, I want you to be, uh, I want you to be aware of how those different not so much to set UID or the set ID and the sticky bit, definitely the set UID, but how those different permissions affect different types of files, whether it be a directory or whether it be a flat file. Okay. All right. So um, let's do this because that took maybe a little bit more time, um, than I anticipated. So, um. Let me talk about the exam next week. And then also, um, an assignment to help prep you for, for the exam. And then next week, uh, we need to take a look at some other things with, um, with protecting, uh, the file system, but. Or protecting our operating system. Uh, but if you go out to canvas. Let me go here. Okay. And towards the bottom. Um, we'll do the quiz here shortly. Um, there's, uh. So I remember the cryptography assignment is is due today. Um, there there is an OS and network security seminar. I'll go over that here shortly, but I did post a list of the exam. One topic. So, uh, exam one is a week from today. So before any exam, I'll post the topics to week before. On Tuesday, we're going to do a review of the exam. We need to finish some things up with operating system security, uh, that we're not going to have enough time to, uh, to get today. And it's really about, um, locking down things like ssh and, and Apache. Um, but the format of the exam is going to be a mix of true and false, multiple choice, multiple answer, uh, and then short answer questions. Okay. You have the entire period, uh, to take the exam. I don't think you'll you'll need it if you study for it. I think most students get it done and maybe about, you know, 30 minutes. So, uh, so I don't make exams intentionally long to, you know, just fill the gap, all right? It's going to be on things I really want you to take away from the first part, um, that we've looked at. So, um, so review the topics and then bring questions to the next class. We'll have a session at the end of our next class, where I'll just open up to any questions that, um, that you have. And then I can answer those. Um, but you definitely want to be available. Of of or you want to be aware of CIA. Right. How we use that as our compass. The difference between a threat, vulnerability, asset. I want you to at least know that we use a bounty in class. I'm not going to ask you, you know, how do you configure it and things like that necessarily. With cryptography? I definitely want you to know the difference between symmetric and asymmetric. Uh, what the basic process is. A process is, uh, when you encrypt and decrypt something, uh, the importance of salt and how we store it and where it's stored, so how we store it right next to the password, uh, you should know that base64 encoding is not encryption, but it does have a role that we use, especially when we need to store things, um, in text. Uh. You should. I'm not going to ask you to describe every cryptography algorithm, but I do want you to know the ones you should not use and the ones you can use. Okay. Um, so if I were to stay on there, should we use des? You should say no. Should we use ECB? You should say no. If I say, uh, can we use a E and what key sizes it supports? You should know the answer to those. Yes. And, uh, 128 192 256. Okay. Uh, you should know what hashing is and how hashing can be attacked with rainbow tables and what a digital signature is and why it's used, which also relates to certificates. You should know what a CA is. So a certificate authority and what a root certificate authority is. Um how certificates are using TLS. There are two primary functions of sharing a public key and verifying they are who they say they are, and what the Let's Encrypt service is. Now, um, I'm not trying to, uh, I don't want you to know how to necessarily configure this or cert bot or anything like this, but I want you to at least be aware that there is a service that exists out there that you can get a certificate for free. Uh, because other services charge a lot of money for those, so you should know what type of encryption you use with TLS. So how we initially use asymmetric and then we go down to symmetric. There's the TLS handshake. And then with the TLS handshake how we exchange ciphers. So I want you to know the basics of it I'm not going to get into the details the nitty gritty of it, but you should know that the first step is to send use that public key to send a message to the server. Let the server know what ciphers you support. The server says, here's the ciphers I support the cipher we're going to use. We then share a session key, and then we start communicating through symmetric encryption with network security. I want you to have a basic understanding of protocols and how they could be attacked. This isn't a networking class, but I want you to at least know that we can exploit the TCP protocol to do a TCP send attack. You should know the basics of TCP and IP, how we use the IP and port together. The defining a network zone, what the DMZ is. How we can segment traffic using firewalls. The different types of firewalls that we can have, and what the difference is with those basic ways of scanning a network with nmap and then finding information about a network using that SRV command. If we want to find the versions, or if we want to find out who might own a network using like who is and you should know what DNS is and also how that can be attacked. Um, this is a piece that we did not get into today. We will get into that, um, on Tuesday. Uh, but, um, how we apply the principle of least privilege. You should know how permissions work. If I ask you to modify a file with these set of permissions, you should know the chmod command or the arguments that you have passed to it. Uh, we're going to talk, uh, at a high level about viruses, trojan spyware and malware. On Tuesday, we're not going to get into the weeds of that, because I don't want you to install a virus on your computer and say, let's observe it and see how it works. So we're just going to talk about generally. And then we'll also talk about fishing as well. The other thing I want you to be able to do though is um, because this will be really important in your career, is people are going to make arguments saying we should do this because of x, y, and z. What I want you to also be able to do, is using your knowledge you've gained so far is to be able to break down an argument and say whether it's valid or not, or poke holes in it. Okay. So if somebody if a developer were to put some code into a code review and they admitted assault and you see that code and you say, hey, you're not using the salt here, there's no salt implementation. And if you say, well, we don't need to worry about that, nobody would ever be able to access the database anyway. I want you to poke a hole in that argument. Okay. Um, so things like that. Okay. So be able to counter an argument or support an argument, or you might see a question on there says, hey, this was somebody proposing you you should be able to say this is good. And here's why. Okay. So those are the topics on the exam. So review these before class on Tuesday. Um and then bring any questions that you have. Uh, the other thing to help prepare you for the exam two is obviously you can take a look at the quizzes. Uh, and that would be a good guide to, to review those or review the answers on those. But the other thing that I posted is, uh, this is an easy two points for you and accounts for your assignment grade. This counts for points. This isn't like a throwaway assignment. Okay? It's due the day of the exam. How do you recommend doing it before the actual exam? But it is due by that midnight. You get two tries with it. Okay. Um, but just to say that I actually can't go into it without revealing the answers. It's a set of ten questions that are related to things that we've covered in class. Um, and you get two tries on it and you'll be able to see the feedback. So if you get a question wrong, you can go back and then you can, um, redo it and then, you know, get that question right. Okay. This individual assignment. It's assigned to everybody. Okay. The other assignment that I think that would be good to do before the exam. But if you want to focus on studying for the exam, I do think this would be a good way of studying for it is to do some of the things that we learned in class. So this. This here is a group assignment. What you're doing. And this will kind of be similar to kind of what you did before where you label a task and then you show some proof that you did that task is you're going to configure a firewall, which we're going to get into next Tuesday. You're going to configure SSH host access, which will also get into Tuesday. You're going to configure a username access which will also get into Tuesday. You'll do an nmap scan. And you may be cautious about this because I said don't use nmap on anything other than your server. You can use it on here. Okay. So you're going to do an nmap scan on scan. and then you're going to configure SSHd. Okay. Um we'll get into what you need for this on Tuesday. This is not due next Thursday. This is due the Tuesday after. Okay. Because I want to make sure that we cover enough things for you to be able to complete, that you at least have a week to do it. But this would be a good way to also study for the exam as well. Okay. Any questions? No. All right. So last thing. Um, and that'll be it for today. And I'll stick around in case there's any questions before the next class is the quiz. So if you go into canvas, uh, you'll see quiz OS security. You can go in and take it. I think the passcode somebody verified chmod space 777. Send me. Give me a thumbs up if that works. Whew! Uh oh. Thumbs down. Uh oh. All right, hold on. Let me check it. Oh. What's that? There's a space. Yes. Space? 777. That worked. Okay, go ahead and take that. And then once you're done. That's it for today. I'll see you all on Tuesday. And now, of course, you know I already post this. What's that? Yeah. Yep. In your office? In my office? Yep. You gonna stop by? Yeah. Okay. Okay. Exactly. All right. Yeah. You can go ahead and ask a question at this time. Yeah. Actually, I didn't don't need any blanks. After the show. I believe in the assignment. Said I think it would be important. Like, oh, I don't care about that. You know, about the formatting. Yeah, I don't worry about it. Right. Just two hours. Yeah, yeah. How do you meet all the functional requirements? Yeah. Okay. Yeah. I have a question. This is like the storage file or whatever. They. Have to solve it. And the way I sort of saw like I did. And then 64 and I'm like, wait, you're willing to solve, you know what could be 64? Do you need to solve the generic. Yeah. So you got an income. Yeah. You just basically Yeah. You'd never be able to get access to encrypt the password. Correct? Yeah, exactly that way. And then decryption is different. Right. Yeah. Hi. Hi. Um. I think the basis for all cases like that would be. I need a character. I need a line. I'm knocking out a substitution. So I just want you to know the basics. Yeah. Hi. Um. Yes. Yes. Yeah. No. So. How many files? I know. Just to be clear, I was just like, oh, I'll figure it out. Yeah, yeah, yeah. So your story is. Very curious about given this new person. Yeah. I never saw that. Yeah. Hi. No no no no no. So ideally, we would use a household object. Don't hide it. Um, but it doesn't work so well in the village. So it's just. Yeah, we're going to see it. But ideally, if you're reading. Actually, it's a good question. Hi. Hi. So we have two questions. Firstly, on the place. Like a place to. Chicken sandwiches. Yeah. So. Yeah. So. No no, no. So if I did exist, you should replace it. Okay. So that's correct. Yeah. You just replace it. Okay. So. Oh, yeah. And then. I guess like, just like what it was like in the past. Yeah. You can do the passcode. Um, but you could just do, like, the workflow and what. Ah, that was attached to a password. Right. Because it has to be correct. So when you when you generate that key, you decrypt that token. If you give back love, the original text you put in there will then you go back and do successfully decrypted that encrypted word into the original. Okay, that's all the time. Well, let's just make sure they get the right one. Okay. Okay. Hello? Well, I think it could be coffee, right? Yeah. No no no no. I think we use this. Right now. We're encrypting the password as a token. So if you want to do that different token, if you want to do that for somebody else, do that approach. You can do that. Okay. So the idea is the token is used to essentially verify they got the right passcode. When you generate the key they generate the same key that was used in crypto before. That's all it's used for. Okay. Would you say to just do it this way? Yeah. Well, if you were to work with, how would you just leave it to someone just worth it? Okay. Yeah. Okay. Thank you. Yep. All right. Thank you. Thank you for It's. Not so personal. Yeah. For example. No, it's in person. It's on paper. Oh. Yeah. Hi. How are you doing? Good. How are you? Good. Um, I just have a question about the test. Yeah. I was wondering if I could have permission to schedule because I scheduled my test. Yeah, but I have a class directly after this where I also have a test. So I was wondering if I could have permission to schedule it 30 minutes earlier so that the time zone overlap. Awesome. Thank you so much. I don't know if you need to email me to ask, but it will. Yeah, it will probably be a request. Okay, I did already upload. No, that's for the other class, but I'll begin the email to upload it. So. But yeah. Okay, fine. Thanks for asking. You do? Yes. Yes. Yes. Yes. Yes. It. Was there that I. Wanted. To see that. Yeah. Yeah yeah yeah.
