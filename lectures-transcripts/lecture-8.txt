UNKNOWN
Okay. Are. You sure. Mhm. Mhm. Okay. What? Do you. Do. All right, so you won't. You will want to have your. Let me move this. You will want to have your VM up and running because we're going to work with that to. Well, actually throughout the, throughout today and, uh, our next class. But the one thing that we didn't get to do last week is we didn't get to take a look at how we can actually, um, see the traffic being transmitted through our device. Okay. So that's what we're going to dive into at the beginning here. And then we're going to do some OS hardening. So so at the beginning, um, last week I asked you all to install some tools. And one of those tools is Wireshark. Okay. Now Wireshark, um, is a tool that you can use. It's really it's really a great tool to understand how protocols work. Networking protocols work. So if you really want to dive into, uh, the insides of like TCP, UDP, IP, all those different protocols, a great tool to use. But you can also use it to kind of see what traffic is going through the network as well. So you can also use it, um, from a security perspective as well. So when you load Wireshark, when you first installed it, you should have had the option To say that you can view traffic as a Non-root user, which is a non admin. But just to be sure, if you open up a terminal and you just type in pseudo wireshark, I have no idea what wire plumber is. That sounds interesting. Um, but if you just do pseudo Wireshark, that will make sure that it opens up with the right permissions that you need. And then you'll see this window open up here. This must be synchronized, like with the, uh, crossing on Euclid. You also cross from Euclid. So you don't even know, did you? You don't know if you crossed Euclid today to get here? No, I'm just curious. Like, it's just like everybody came in, like, one way. Uh, so, uh, Wireshark used to be called, I think it was ether real before, um, sometime ago. So, uh, you can capture traffic based on, uh, a particular network interface, and then you can also search based on its parameter protocols. So, um, so anyway, so once you have it up and running, you're going to see a shark button at the top there. You can go ahead and click that. And it's going to start capturing packets. Now your VM isn't going to be as busy as your actual a host uh, device. Uh, but you should still see some traffic uh, on there. It just won't be um, it just won't be as much. But, um, but if we go ahead and I'm going to open up a browser and right away you can see this as interesting, you already see that even though you didn't make a request, your browser is talking, right. It's communicating on the network. So um, sometimes we can also do is you can see like if you have some software that might be communicating with a destination that you might not be. You just might not know. So, um, so, uh, Mozilla, um, if you were to download Firefox as open source and you were to, uh, compile it locally and install it. It won't do a call back home. But I think when you download it off Firefox, it does do a call back home. Okay. So it does have some diagnostic data back. I'm not sure if there's a way that you can, um, turn it all off. But anyways, so this is quite a bit of traffic, right? This is just from opening Firefox. Uh, but what I want to do is I want to clear this out for now. Uh, so I could do a stop there, or I could just do a restart capturing packets, and you can actually save the sessions, but I'm going to type in HTTP and then hit enter, and that just allows me to filter based on protocol okay. So I'm just filtering on HTTP. And I didn't make any of these requests yet. Right? Um, but here we already see requests going out to canonical. We see requests with the success here. Um, but what I'm going to do is I'm going to go ahead and do a search for cast lab. And then we should be able to see that request. And so here I see that I got a get I that was from before. Okay. Do you all remember we talked about this briefly. What Ospi is. Now. So that's a call to see if there's a certificate that's been revoked. Um, but if I scroll down, scroll down. There it is. Okay. So there's my request. Uh, and you can actually see the hex if you are interested in that. Uh, but there's a request to actually get, um, the web page from Cast Lab. And this response we get back here. Well, that doesn't seem right. Why would it? Yeah. That doesn't. Okay. That's weird. Why didn't that not go through? Is it because it's cash? Yeah. Yeah. No, that's a good point. That's over https. Let me see if I can get it to. Good call. Um, so I'm gonna send over http. Now we should see the request. Now we'll get a redirect. So this demo is just failing. Come on. All right. You know what. I'm going to do it to localhost because I think it's probably remembers a redirect because it's a permanent move. I'm going to do localhost. Well this demo is terrible. All right. I'm going to restart it. There. You know what? I know a way that we can do this. I'm going to forget Firefox And I'm going to do a curl. And so curl is just a way of making a network request. Ah, okay. Hold on. We don't have installed. There we go. Okay. So I use wget instead. So if you ever like want to pull down a web page you can use wget to do that. And there's our. Yeah. So you had the 301 remembered. Um so there's our network request. But um, what you could do with this, though, is this includes remember we talked about when we when we talk about the OSI model. And as we move through each layer, we add more and more information to the packet. Uh, we could start from the bottom at the Ethernet layer. Uh, and then we can actually take a look at what the source Mac address is. Right. And so remember we talked about every network interface card has a unique Mac address. I can see what that, um, source Mac address is and what the destination is. Right. Now, this may seem odd that the destination is parallels, but remember, when we're going through our VM, we're going we're either Net or bridge. So we're not actually going to have the destination Mac address on there because we actually don't know it. So then as I come up from the datalink layer I go to the IP layer. And then here's where I can also see the destination. Right. So that is the destination IP. That will be CAS labs IP. All right. So only internally here. And then as I go up another layer here I can take a look at TCP. I can see my source port and the destination port for that request. This is actually the response coming back. And then if I wanted to I can also take a look at any kind of the actual Will sequence number. For the packets. Uh, the syntax that was done. So you can take a look at the sequence acknowledgment. And then finally I get up to HTTP. And so with that HTTP you can actually take a look at the raw request. That's the response that we got back. But you can take a look at that Raw request from response using Wireshark. Okay. So it's not just HTTP that you can filter on. It captures all the packets going in that moment of time. You can also filter it based on IP right. So you can type in IP and there and you can get pretty specific. Um and so this will pull up all the packets that related to IP. So it includes HTTP and TCP because that runs over IP. And then if you just wanted to filter on TCP you could do that as well. And then you can get to like a specific port as well. So if you're only interested in traffic that was communicating to a particular server on your machine. You could do that as well. Okay. Now this is a little bit different. Um, this is a little bit different from something called the man in the middle attack. How many people have heard of this before? Man in the middle attack. No. Okay. So the idea behind, um, a man in the middle attack is you essentially intercept traffic between two endpoints. We're not necessarily intercepting traffic, though. We're just listening to our network interface, so it's a little bit different. Okay. We'll actually do an acronym for it is MIT. We'll actually end up doing an MIT attack later in the semester. But there are things that help protect us against that type of attack. And the number one thing on the web is certificates, because as soon as somebody intercepts between you and another party, your browser will give a warning saying, hey, somebody is presenting a certificate here that we don't trust. And we'll actually see how we can actually get around that. Okay. Later in the semester. But but I just want to be clear. Wireshark. Wireshark is not an MIT tool. It's not a man in the middle tool. You're just listening to the traffic that's on your device. Okay. So I don't want you to think that you can see everybody's traffic on here. But what you can see, though, is if somebody does broadcast a pack on the network and you receive it, you can see that message. Okay. So there is a difference there. All right. But anyways, Wireshark is a is a pretty cool tool. Um, again, if you really want to understand protocols uh, highly recommend it. Um, but one thing, um, one thing that we're going to dive into today, though, and this is separate from, well, this is separate from Wireshark. But, um, when we think about listening to traffic on this host, being able to lock down that host so that we can only talk to the host, like through certain ports or through certain protocols. And that's what we're going to dive into today. So all right. I'm going to actually stop this because I don't want it to be collecting all that data. If you take computer networks, anybody take computer networks in here? Yeah. Did you use Wireshark? Yeah. So you probably use it pretty. Oh, really? Oh. TCP dump. Okay. Um, but if you wanted to, like, really learn networks, it's a great. I think it's a great tool to use. All right, so let's just do a quick review. So from last week what is defense and depth mean? We talked a little bit about that last week. Defense and depth. I know we got an exam coming up and this will be on the exam. Defense in depth. What does that mean. Yeah. Yeah that's exactly right. Right. We don't want to rely on just one thing to be able to protect our network, protect our device, whatever it may be. We want multiple layers, multiple layers. So we shouldn't just bank on the firewall of blocking any kind of malicious actor. Right? Um, internally. Right. We will still get emails, so I should do some, uh, spam training or phishing training for, um, uh, for, uh, employees of our organization. Right. I should maybe employ an IDs. I should use antivirus. Right. It's having all these layers and the idea behind us. And you may have seen this, uh, during the height of the pandemic. Is this, like, Swiss cheese model, right? The idea is that you might be able to get through one hole, but on the next layer, we're kind of, you know, putting another countermeasure there to hopefully that you can't get through the entire thing. All right. What is the DMZ in the context of firewalls? Anybody tell me what it is. Yeah. Do you know the tri zone is a zone between your internal network and the internet has As a separate firewall that disallows internet actors and mechanisms. But also does not allow any access into the internal network because it cannot. You don't want that, right? Right. So good. So it's not like truly demilitarized, right? We still have a firewall in front, but we have to have a door open if we want to do business with the outside world. Right. And the one thing we want to make sure is that only that door is open and not all the other doors. So good. What's an IDs? What is that short for? Yeah. Perfect intrusion detection system. How is that different from an IPS like snort? So one detects the other. Prevents. Right. Yeah P for prevent. Right. All right. What is Wireshark. We just saw that what you can do with it. You know that right. We could take a look at traffic. Um, why should we use SftP or SCP instead of FTP. So we talked about using SSH over telnet. What is sftp scp. We actually didn't use this but we talked about. You should use that. We didn't use it in class but. What was the fly sabotage that used to be able to connect to a machine using telnet? What was the flaw with that? We sent our credentials there in the clear. They're in the clear, right. SSH will make sure that those credentials are encrypted. FTP. Does anybody know what FTP. Short for. Do a quick search. What is it? File transfer protocol. All right. If I want to submit my credentials, I want those go to wire and clear. Do you think I want to file going over to clear on the network? No, because it might contain something sensitive over it. So SftP is essentially a way of encrypting that over the network. SCP is a secure copy. It's also another way of improving our network. All right. Packet filter. Firewall versus stateful firewall. What's the difference between the two? If I'm filtering a patch, if I just have a packet filter firewall. What is my rule based on. Yeah, I just learned information from ports. Yeah. Just ports. Right. Ports and IPS. I'm not going to look at the packet. I'm just saying if it's coming from this IP address or it's going to this port or this IP address, I'm basing the rules solely on those things. What about a stateful firewall? What am I looking at with that. Yeah. Yeah that's right. The nature of the connection. Right. So if I'm, if, if I'm seeing a bunch of TCP syn packets coming in from an IP address, then I know that. All right. Something's going on here, right? Somebody keeps trying to make a connection. If they never send data, they never finish that connection. Right? All right, um, which one is easier to implement? Packet filter. You can actually write a program that does this, right. Um, which one might provide additional security benefits? Stateful, right. But it's a little bit more expensive. Right. Um. All right. So what I want you to do is in groups, just really briefly, here's an example of a network diagram, a network zone. Okay. What I want you to do in groups is just spend a few minutes, think about how this can be improved, how you might improve the security of this. Okay. So let's see where we're at. Let's give it a just a few minutes. Okay. Talk about in groups how how might you improve this. You could refer back to the slides we Went over on Thursday, but take a look at how we can improve the security of this. Talk to the point that. You might see a question like this in the future. You. Have. To be approved. This is the So. Let me try something else. Oh, that's how you get, like, a serious problem. Yeah. Okay. All right. Somebody give me one improvement. How can we improve this? Yeah. Wall Street behind it. Right? Yeah. Because let's think about it. What's the risk here? It's once you get in here? Yeah. Once you get in your end. Right. So, um, if I get control of that web server, I have access to everything. Now, I want you to. I don't want you to be paranoid like I am when it comes to security. But I also want you to think about this with your home, okay? This is your Nat. This is your firewall and your router. Once you open up a port, that little IoT device. Right? Somebody gets a hold of that. Once they're in, they're in. Okay, keep that in mind. All right. So put a firewall in between there I like that. What else is that it. So we put a firewall. What do we say about right here. Yeah okay. What else. Anything else. Isolate the employees. I like that you don't trust them. I don't trust them either. Yeah. So let's isolate them. Right. Can you can you add your hand up? You can have testing software I think I got my bachelor's degree in technology. So yeah, if we have a test environment, we're doing some active development. Separate those out. Right. Separate those out. Anything else? I like the idea of separating out the network or, you know, based on if we're in QA, if we're in testing or for in production. Right. Anything else? What about that data to separate that out into its own network? I think so. Right. I don't think our employees need to have direct access to that. Right. Um, so this might be a way that you could separate it out, right where you kind of have your employees block from accessing the database server directly. Maybe we have those divide up on roles, and you could take a look at some of the examples I showed before. But what we should be looking at is just having that single firewall on the outside is not good enough, right? This is also an example of defense in depth. Um, it's a little bit. I wouldn't say this is a 1 to 1 match with it, but here we're not just relying on one single firewall from the outside. Here we are implementing multiple layers. So if we if if somebody from the outside wanted to get access to the data right, they not only have to get through the web server, maybe get through to get through the application server, then finally get to database server. Um, to be like get access to data, they have to go through multiple layers. Now if we think about this though, we put our hacker hat on. Um, one way that we can easily attack that database server, there's two ways of there's actually two ways of doing it. Let's assume for a moment here that we do have employees that have access to that database server. One way of attacking it is forget going through this attack the employee. Right. And I don't mean like, you know, meet them in the parking lot and, you know, kidnap them and say, give me the, you know, access, right. But if we send them a specially crafted email or something like that, um, or some malware we might be able to get or just convince them. So some social engineering, we might be able to get the data that we actually want. The other thing, and we'll definitely dive into this later in the semester, is instead of trying to actually get break my way into that database server, if I can find one vulnerability in that web application that allows me to get access to the data and that database, or remove the data from that database or change it. All it takes is one line of code, and we'll definitely see that. So it doesn't matter how many firewalls you have up, how many intrusion detection systems you have up, you include one line of code that makes that web app vulnerable. It's game over. None of this matters. And we'll take a look at that too. Okay. And remember why I told you to begin the semester. If you put that one line of code in your web application. You then take this class. I don't know you. Okay? We never met before. I'm serious. Okay. All right. So let's get into how we can lock down in an operating system. So I know this may seem like. Well, duh. You know, of course we should do this, do some of these things, right? Um, but, you know, one of the big things is getting rid of unnecessary software. Don't leave even things hanging around. Right. Because if I just told you, one line of code can expose your network and expose your system. Well, that's certainly the case on the actual operating system itself. Right. So if you have software on your operating system that's running that you don't need or that's outdated. Get rid of it. The other part of that is the stuff that you do need. You do need to make sure that you have it updated. There's a update to iOS that came out, uh, Friday, maybe uh, for uh, 18 dot three. There's 18 .3.1 because there's an actual exploit in the wild if somebody wanted to access your device. They need physical access to it, but they can get around the USB protection. Right. So what should you do? You should update that software. Right. So that's that's the thing that we're going to take a look at is how do we keep our server up to date. The other thing is making sure we get rid of any unneeded services. This aligns also with unnecessary software. Um, some people will mix up a server as being a hardware device. Server is not a hardware device, it's a piece of software. You can write your own server, right? A web server of a mail server, whatever it may be. Um, so making sure that you only have the services, the server or servers running that you need. Um, applying the principle of least privilege. So making sure that, uh, accounts only have the permissions that they absolutely need, uh, that we only have the accounts, uh, that we actually need. On on there, we get rid of any kind of, um, uh, accounts that are no longer on the system. So employees are provisioned from the system, whatever it may be.

SPEAKER
maybe, uh, default accounts.

UNKNOWN
Default configuration. Uh, this is a big vulnerability in IoT. So if you ever had a maybe configure a router. Probably have typed in the password. Password. Right. The login maybe is admin. Right. So changing all those default accounts default configuration. We'll take a look at that as well. Even though after we do all these things. So after we, you know, clean up the software, update it, remove all those accounts, all those things. We still need to make sure that we keep track of logs. We audit our system and we still periodically scan it. Because even though we might have the best maintenance schedule and follow the best practices, something can get in. And we need to make sure that we're that we're ready for it. So all right, so what we're going to focus on is Linux. But the same principles can be applied to windows or anywhere else or really any system in general. So one of the ways of attacking systems now, and even developers is by attacking, um, uh, different sources that you might pull in so different libraries. So there was an attack, uh, recently on a Python library, and it's a way of kind of sneaking in an attack because the developer might just incorporate it through Pip and bring it into their code and just generally unaware of it. So, um, there was a really large attack through a very popular Java logging library, and I think it was an open source developer that maintained it, like out in Iowa and all these Iowa or Nebraska, something like that. And all these systems, all these enterprise systems relied on that logging system. And this person developed this open source library. It was a maintainer for it. And there was one vulnerability in it and all it takes that one little package to make the rest of the code vulnerable. So it was a big deal. I think it was Log Forge and they did a, uh, a comic on it. You'll actually see it. Um, let me see if I can find it. You'll actually see it in your OpenSSL course. But I think it's really like, you know, it's pretty accurate. It's pretty telling. But let me see. Log for J comic. Yeah. This is it here. Oh xkcd. Oh, if you're in the iOS class, we're going to be developing an app that gets the latest xkcd comic today. So. But anyways, this is the. Yeah. Yeah. Nebraska. That's the log for J library. But every enterprise Java application uses it. And it became vulnerable which means that every application implemented was vulnerable itself. Right. So we have to make sure that those things are kept up to date. So um, I think this gets to a larger, larger issue about how companies use open source, but they might not invest in it. All right. Uh, but anyways, so making sure that we install from trusted sources. So when we install software, not go into some shady app store or something like that, or downloading software on the internet. Right. We also need to make sure that we check for upgrades and make sure it's upgraded and removing things that we don't need. So let's actually give this a try. So on your VM. We're going to install some software and we're actually going to bring it back. But I just want to go through the exercise. All right. So imagine that. Um imagine that we want to set up a web server that's going to run a web application that's written in PHP. Okay. Now we already have Apache installed on there. We might want to install the database. And we're gonna end up doing that too. There's a couple of ways that we can install PHP. One is we can actually go to a website, download it through there, install it, compile it, whatever it may be. We can go to Uncle Bob's website and maybe pull it down and, uh, you know, get it that way. So get it from a source we don't know, or we can actually use, um, apt to install it. So, uh, you all did this before, so it should be familiar. So we need to do a sudo apt update. Remember, that's not going to update any software on your machine. What that's going to do is it's going to update the repositories that you have on your system, uh, to make sure that it has, um, the latest packages. Uh, there are reference on there. So right away it's actually telling us 289 packages, uh, can be upgraded. All right. So this is just going through an update and checking to see what the latest software is out there. It's not actually upgrading any software. It's just updating our repository. Okay. So if I want to install something you all did this before, but if I, uh. But we haven't done the remove yet. But if I want to go ahead and install this a PHP, if I just type in PHP and hit enter. It's going to identify the latest version of PHP. And this is true. This is 8.3. I think that is the latest version. It will also this is the nice thing about APT. It will also list out any dependencies that PHP might have. And if we need to have like like we noticed that we have Apache installed, and if we want to be able to use PHP with Apache, it will install that as well. Okay, so I just did a sudo apt install php. We're going to do a deep dive in PHP later in the semester when we take a look at vulnerabilities in code, but I'm going to go ahead and hit continue and install it just like that. It's so easy, right? It's kind of like our own little app store, right? So once I have that, um, once I have that installed, I can also now we just installed it, so it shouldn't be, We shouldn't be able to upgrade it, but I'm going to go ahead and do sudo apt upgrade. And this will actually take a little bit of time. This is going to tell me actually let me back it up a little bit. This is going to take a look at any of the packages. Remember when I first did that sudo apt update that took a look at what packages can be upgraded right. But didn't actually do the upgrade for them. Uh, I can do sudo apt upgrade and that will actually upgrade or update those packages that I have on here. And it gives me a list of all the different packages on here. Okay. And so as a best practice we should keep those upgraded. Right. And so I'll leave that up to you I'm going to go ahead and do the upgrade. But once you do this upgrade it should it might ask you after each one um try and remember This is quite a bit. Um, you might not want to run it, but, um. But you can't pass a dash y flag. And what it will do is it will actually automatically, um, respond to those prompts. Okay. The prompt that says, hey, do you want to do this upgrade. Okay. Now, why would we want to pass that dash y flag? Why wouldn't we want to just do it ourselves? Yeah. Automation. Automation. Right. So one thing you can do instead of you, you know, sending like a reminder to come in here and, oh, this is updating the firmware. I didn't notice that. Um, instead of you coming in here periodically and then having to do the upgrade yourself, you can actually automate this to where you have it run, maybe at the first of the month. Do that sudo apt update sudo apt upgrade, pass the dash y flag and then your system is automatically up to date. Okay. So you can use like a system like cron or something like that. Okay. Um, now, while this is, uh, actually, I'm not sure if this will affect it, but I'm going to try it. Um, while this is running. What I'm going to do is I'm going to go ahead and remove PHP. And if you want to remove a package, it's just a remove command. And then just, uh, just throw PHP at the end. And I hope this doesn't this might. Yeah. See this is an issue. Um, so you'll notice that there's a lock file that's used on here. It's making sure that I don't update any of the packages either. Remove them. Uh, because this process is running here. So, um, so I'll have to wait till that one finishes. But, uh, to remove something, it's really easy. All you have to do is just do the apt remove. And this will also be, um. I'll post these commands too. So if you forget any of them, you'll have a cheat sheet, if you will. All right. So apt. Makes it really easy, right? So there's no excuse to not have any of your packages updated, upgraded, and whatnot. All right. So the other thing that's on the flip side of keeping the packages up to date is, uh, within, um. Within Linux and even on windows. Right. You have services that are running. Right. Um, on windows, you might have typed in services MSK to see like the, you know, if you need to disable a firewall for a game or something like that. Um, but on Linux you have the same idea. You have these services that are running, and it doesn't matter if it's a server or if it's just a client machine. Um, and it's fairly easy to, uh, to take a look, uh, to see what's running. So. So let's go ahead and do that. Uh, addition interfere with our package install or uninstall. Um, but if we want to see what services are running on the machine. Let me see. Go back to VM. Um, there's a command called systemctl. Now, uh, if you are, um, if you have Linux installed, then you kind of follow the Linux forums. Um, systemctl is a way of accessing what's running and what's called system E. Now, there's a lot of debate about system D being something that should have been adopted in Linux, and should we use it? Should we go back to the old init ways and so on. But but system D that allows us to using systemctl allows us to stop, restart, um configure systemd services. So but if you type in systemctl and you do a dash dash type and sometimes you'll see on some of these commands you have to do a dash dash or a single dash whenever we have a full word is typically a dash dash. If I do a type service and dash dash state equals running, I can see all the services on my machine. They are currently running. Okay. And so, uh, some of these, uh, well, one of these we did install. Uh, so here you see Apache two, um, and some of these are just system services, right? So I see cups, which is an actual printing service, uh, cron, which allows me to schedule different jobs. We got Bluetooth and so on. Uh, and then you can just take a look through these just by hitting enter. Or if you want to go through more, you just hit the spacebar and that will go through to the next page. Okay. So we see some of the system services running there as well. Um snap. We're not going to get in the snap uh, in this class. But um, we install packages using APT. Snap is similar, except um, you probably all have heard of containers or Docker before. You can kind of think of think of snap as almost like a containerized version of software. Okay. It's kind of similar to that. Okay. Um. In fact, uh, snap. Uh, if we talked about Let's Encrypt and getting certificates for free. Uh, there's a program called Cert bot through Let's Encrypt that will automatically make sure that the certificates are updated. Um, that's a snap process. So you use all through snap. All right, so that's one way you can go through here. You can see all the different services that are running. This is a good exercise to go through to make sure that, uh, there's nothing running on your server that you don't recognize, because if there was something on there, um, like Bitcoin miner, well, then you would know that. All right, I need to, you know, remove that off of there. Um, but if you just wanted to check if a particular service is running, do you just do a systemctl status and then the name of. The name of that service. This should have been doing that. Oh. We're done. Okay. Probably need a reboot. Um, but if you do a system status and then the name of that service. Like, if I could type in apache2, I can see the status of it, and it will tell me how long it's been running. Um, how much memory is taken up? Is CPU swap space? Uh, if you're not familiar with swap space, you'll probably learn about that in operating systems. Um, and then you'll also see some of the later log entries here. So this is from a program called Journal CTL. Okay. But this allows you to easily check to see if something's running. And if we wanted to, uh, let's say we made a configuration change to Apache, which we are going to do eventually. And I want to restart Apache. There's a couple of ways I could do it. I could do a system or a pseudo system. CTL uh, stop. Apache two. I need to be, um, I need to be a super user to be able to do that. And then I can check the status again. You don't have to be a super user to check the status. And there I see that it is stopped. Okay, so it's inactive. Dead boy what a what a downer for a month. Or a Tuesday, huh? Dead since Tuesday. Right here lies Apache two. Uh, but anyways, you can do a stop like that. And then you can do a start, uh, to restart it. As you can imagine, though, if you wanted to make a configuration change to Apache and then quickly bounce it, meaning restart it. Uh, there's got to be a better way. And certainly there is. So instead of doing a stop and a start by itself, you could just do a restart and that will stop it and then start it. So if you had a configuration change, uh, that you need to make, that's a really quick way of restarting it. You can see right away Apache is back up and running. So it's fairly quick. Okay. If there was an issue with our config file, and maybe we'll intentionally make an error in our config file. Um, when you go to restart it, it would actually tell you that it failed to start because it might recognize it might not recognize the config file that you changed. Okay. So just a quick, easy way of being able to stop and restart the service. Now you'll notice though that let me actually do this really quick. You don't have to do that. But if I do a quick reboot I just did a pseudo reboot. Zero when the VM starts up or the server starts up. Um, and you know, imagine that this was a web server that hosted a website that we have and the people were doing business with that. We want Apache to start up right away, right? We don't want to have to manually go in there. What if we have power outage or what if we're doing some maintenance, right. So there are some services that are enabled by default to start up with the system. This is where system D excels. This is taking a much longer time, but the way that system D excels is that it can start up some of those processes in parallel. Oh, boy. What happened here? I did not. Yes it is. All right. I did not I. Looks like I got something to do. Here I am telling you all. Make sure that you install updates. Right. And I'm going to just host my machine. Okay. Come on up on two. I knew something was up, but I was like. This has taken a long time to boot. In the middle of the upgrade, I don't think anything happened. And I did not make it. I did not take a snapshot. I should have stopped when it said it was, uh, updating Linux. So, um, no, you shouldn't have updated the kernel, though, because that's a separate command to do that. Um, yeah. I think this is literally I can't find the root cause. Yeah. This is all the, um. No. I don't know. Okay. Um. All right. Well. We got an end class early. Yeah. I'm gonna have to reset up this VM. Um, yeah, we're at the in class early. Sorry, folks, but, um. Yeah, I was hoping to give you all the get install, uh, to install some additional software and whatnot. So, uh, I'm gonna have to rebuild my VM. Um, we should do a snapshot. I should have read it before I got a little cavalier and started rebooting it, but, yeah, we're going to stop here for today. Yeah, sure. Well, so I think I was halfway through the upgrade. I didn't complete it, and I decided to reboot the VM. So, uh, instead of having you all sit here and troubleshoot through it, um, while I fumble around, I think what I'm actually going to do is just do a fresh install. So essentially do the first assignment that you all did. Um all right. Well, I'll tell you what though, in case anybody does have a question about the assignment, though, uh, if you're working on the cryptography assignment, I'll stick around until the class ends. But, um, we'll stop here. All right. And then we'll get back together on Thursday. Now, look, I don't want you to take this, though, and say, don't ever upgrade my software. Okay, we should do that. But we should do it, right? Okay. So should it reboot in the middle of it? Should reboot in the middle of it. It's not a good practice. Like, uh. In every area of this space. Uh, yeah. Well, I just wanted to. Know? Yeah, sure. Here's what it is. You have to get the other. One. Because I doubt it. I doubt it. So you should. Write down your. You know. That kind of. Sounds interesting. Um, there's no particular reason. For that. Yeah. It might be that doing that, um, that you're using. You did anything wrong. Um. Yeah. You know, um, we're not going to actually end up using it. I think the last one, you'll see. Um, but what I would probably do is look at, um, this error message here. Um. I haven't encountered that, but that's what I would do. So. I guess, um. Yeah, I think so. Savannah says it starts with the way. Okay. Yeah. So. That's probably existed. I think you could do that. I just want to make sure that we're going to start. Over. And then what that does is it does not match in terms. Of space. But then once you're done with that, what I would like to do is check it out. It looks like it's a little bit. Different this year. It depends on what you name your host name. So if that's what you do the first thing is, you know. Right. So, you know, that's what it is. You could change the world. Yeah, yeah. So you can just get the line in. And that's kind of. That's not how I like your idea, but. I don't know if you want to do it now or whatnot, but then there's only. So much. You could. Yeah. Something goes wrong, and then I can just go back to back. Revert back for ideas so easily. But right now, while writer who can't scare. Okay. So she believes in that. But I would like to take away. Yeah. I would. Love that. Yeah. Thank you. Yeah. Absolutely. Yeah. Oh, here we go. That's easy. Yeah. Yeah. Yeah. You. Know, I tried to. Connect the dots. Oh, yeah. Wait. What's up? So there's only one version. Oh, my God, I can't believe it. Oh, you're trying to do a brand new one. Yeah. So what do you do? Whatever it takes to. Oh. Yeah. This is one of the things. That. Um. I also. Should get it right. What? Are you. Uh, just the installer, I guess. Okay. Gotcha. Okay. Let's. Get. This server. Right. You don't want anyone to say that. What do you mean? So I think we heard the report. And you got the desktop before. Yeah. So. So you're doing the same thing. Where did you pull the, uh, the isopropyl. Where's your doctor? Oh, it's on the right. Okay. Um, I well, I, I, I have to discharge from something else. Do you like to do this on something else? I just I was. Really excited. Yeah. Yeah. You don't want the surgery. You want the best version? Okay. Yeah. Because what you're not going to get to like how they have the desktop or how I had the desktop. I'm going to have to do using the the display. Yeah. Because I have that. But do you have that with that image. Yeah. You just do get that as well. Oh I'll use your name. Oh okay. Well if you want to do that but I'll try that to you. Yeah. That might make it a little bit easier though. Yeah. Yeah. Yeah. So where are. You. So. That's all. Yeah. Do it. Okay. Yeah, yeah. Yeah. Okay. Yeah yeah yeah yeah yeah I would say. Yeah yeah yeah. Yeah. You show me. Yeah. So there's a lot of things to decide to. Everyone seems to be the most of the. Time. Oh yeah. Yeah, yeah. You see the course to. Yeah. I'm not going to reference indicative But. Yeah. So. That's what I mean. So however, if you want someone to ask you. For the right time. So I don't think that's what you want. But I'm not sure. What am I supposed to do with this? Or. Yeah, I think I'm still working. So think about what you're going to have to work on. And so what you need to do. Yes. Those are Bases for Great Britain as well. Okay, so we can do that. Okay. How about that? So how do I know that? So what we got to see is vastly. Different instances based on gender and race. Not to mention the problem. So what do you think? And. That's pretty nasty. Yeah. That's true. But I think that's what it's like. So what I do doing now is you said. That's how. Yeah. That's what. That's what I'm saying. That's what I'm saying. I have to work and. I'm not sure. How was that? No. Yeah. Can you change your password? And then when? You could. You could certainly do. Whatever. It is. That. What is this? This? Is just taking our task that we really need to solve. For what it is. What is this? That's a great question. Yeah. Yeah. Would you actually do this one just like that? That's totally true because it's essentially your password. And the first thing we do is. We create. So. That's what. You're saying? It's not as easy as that kind of thing. What? I mean, I understand that it makes more sense to me sometimes. That's good. And then the whole. Thing, I was like, I don't like that. Yeah. That's ridiculous. Yep yep yep yep yep. Yep. We just got to make sure that, you know. Um, it sure was interesting. That's great. Thank you. So. Much for joining. Us. Thank you for having us. Yeah. Yeah. That's great. And so the easy approach to. Work with you and me is. In the final analysis. Right. So you just rewrite this as a way to do it. That's the most efficient. Yes. You have to do this, you know. Yeah. It's going to be fine. Okay. I have a question. Uh, so this is going to solve the problem. Yeah. You got to go. So. I just ordered some sort. Of. So. You want to. Keep it that. Way. Yeah. But you know what? It is a passion. For us. Yeah. Um. So all. Right. So. So when we were scoring, um, we were selling. These are customers. Is that. What you're saying? I'll see if I. Can get a password. Thank you so much. For the same. Program. So it's just like this. Just to recap. The salvation. Army God created for. The person of Jesus. As a matter of fact, this is exactly where we were going to get that part. Of that perfect benefit. Matches of spring, Florida. Yeah. Right. But it should be available right Exactly. Yeah. Um. That. Is right. Okay. Yeah. That makes sense. Uh. Uh, regarding our case. Uh. Yeah. The only question, really is detective work. Okay. So it does not match, uh, in this program. That's it. Okay, so. Uh, that's just one. So, um. I know that. I want to make sure that. This is actually. Said to be just like. Right. Okay. So. Um. Oh. Okay. Yeah. All right. Um, I don't know if this is what we're asking for. But, uh, because if we get rid of this part of these things. Because it's horrible. And so on. And just responsible for all of. This. And. So if you want to keep us. Thank you. Oh. It's okay. All You are so. Great. Thank you so much. I'm working on this project. So we. Can. See? What happens? I just want to hear about what happened to you. Yeah. That's all. Right. But the problem is that. We need your help. So. Here we got all this function. It's a function definition. It's an anonymous function. I know it looks weird, but but but if you just focus on this piece right before sending this function. When you call this. I'm excited. So given the function. We have a question. Ask the question. I know this makes it easier for me. To respond. Right. So why is this going to call confusion? So the reason why we have is. That it's hard to read that the other issue. Is. All right. So let's. See. What's going on? So first of all. Thank you for. Having me. So let's. Do this. So it is an example of. Both of these things. Yeah. So it just gets kind of messy. Yeah. Right. Right. And then even debugging. So. So we're actually. Okay. So this is what. I call this. This function. Yeah. So all these types. Of things. That's true. This function. Yes. Yes. So imagine that. Well, that's for. Us, actually. Okay. So it's important And then. Just like. Everybody else. It's just too much now. So. What's. This? This is. This is a function call for the rest of the time. It's the same concept. It gets a little strange in the first. Place. It's actually pretty simple. And pretty much Okay, that makes sense. Uh. Yes. Yes. Yes. Yes, yes. Uh, what is this? Yes. So think about this particular box. All right. So all of us. Definitely want to do it. Yeah. So there's the URL for the. Get somebody else's shoes. You are all such a continuation of certain things. So that you can actually and if you are our sessions and discussion about these issues, but you have different issues for the rest of the day and all of that. So there are these. Things never mentioned, but also like how will you ever find your. Way. Oh yeah. The most important thing. Yes. Is that the same thing? Yeah. Yeah. So really like the idea behind it is that instead of like doing like some strain building, you're using some of the Bentham libraries to actually say, I'm going to build a path, right? You can certainly throw like a for, you know, a forward slash and you know, and things like that. But um, just reduce the amount of errors that you have to have. So like instead of building that string, like what if something like would actually include, like that forward slash on there. Well then you might have a double of that. Or if you append um, uh, or if you append the extension on a file and it's already been on there, it just reduces that error. So, so all that that uri uri that you're building, all that it's doing is building a unique path on that file system for you. So, um, when you when your iOS app runs on, uh, or when your app runs on iOS, it doesn't know it's documents directory. I think you might have asked this question. how can we navigate in some way? Didn't you ask that? Yeah. If we can read the file right. And we saw that each app has an ID generator for it. Or each simulator does same thing for the app, right? So if you actually were to take a look at the app, either iOS file system would be the same way. So you should actually never know what the full path is. So using that library allows you kind of build that path out for you. Okay. So you can access the files and the file system. That's the idea behind it is each app the sandbox. Let's see. All right. That was fun. Yeah. But but yeah, by the end of the day today we're going to have an app that pulls the latest comment. Okay, cool. Thanks for bringing a little bit of that. Yeah. It's great.
