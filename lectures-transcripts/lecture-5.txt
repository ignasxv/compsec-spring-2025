UNKNOWN
So there, there. No, that's not it. There it is. Okay. We'll wait till we got another minute for class starts okay. Mhm. Mhm. Mhm. Mhm. Mhm. Mhm. All right. Cool. That's my boss. Okay. All right. Oh, yeah. Yeah, you can do it. Hello, everybody. My name is Henry. I am a computer science student as well as a member of Sunrise Crew. We are climate advocacy group here on campus. And this Saturday, February 1st, from 2 to 3 p.m. at 101, we have an event. It's an info session on Western's climate action Plan. If you don't know what a climate action plan is, it's basically a framework that institutions like Cayce uses to address their role in fighting climate change. And so we'll be going over Casey's climate action plan and how it's pretty inadequate. Um, so if you'd like to learn more about, uh, that kind of stuff, or if you want to get involved with, uh, fighting against climate change and being climate advocate. This event is great for you. Um, we're also going back. Going over how you can fight back against it. Um, yeah. It'll be a fun time to show up. So Saturday at two, right? Yeah. Started at two. And that QR code goes to, uh, campus groups registration. Uh, yeah. Also, I'll leave a flier over there on the table in case you don't get a chance to scan this. Yeah. So if you're wondering to that. Hey, I'm a computer scientist. What can I really do with this? There's a an actual whole arm within NASA that focuses on research like this and how computing bridges into action. So there's a lot of funding opportunities for that type of research, too. Um, and even within EPA as well as a whole. And your research kind of goes with that too, right? Our research bridges into that. We have funding for reducing food waste, which if you have food waste in a landfill. In fact, we should. We should talk about. The food waste that breaks down in the landfill. It breaks down anaerobically, which produces methane and methane, has I think it's about 26 times. I think it's 28, 28, something like that. It's. 28 times global warming compared to CO2. So if you're releasing methane, they've got much more potent. The good thing is if nothing breaks down in the atmosphere fairly quickly. Well, now I say fairly quickly, but much more quickly than CO2 families. There's a lot of fun and research for computer scientists in this area, but you really should care because it's your world. Yeah, you guys should come. Thank you very much for having me. Yeah. Yeah. All right. So, uh, I don't like this microphone. It sounded like it was kind of. I let it down. Um, so today, uh, unless you all. You all can hear me find the back, right? Yeah. Okay. Uh, it's not that big of a room. Uh, today, what we're going to do is we're going to talk, uh, again, we're going to finish up mostly with our cryptography piece and certificates. Uh, and then, uh, I want to talk about your next assignment. Uh, and then you should you should have time to work on that. So, um, at the end of class today. So, um, but before we do that, let's do, uh, just a quick review. Um, what is the property of a certificate? What's the short form? And then what's the property you mean? Oh, no. Yes. Distinguished. Distinguished name. You're right. Yeah. Distinguished name? What is that? What is that? Anybody? Yeah. Yeah. Yeah. The name of the holder. Essentially the name that says this is good for you. Right. Um, so you think about, like, case edu, or you can also have an asterisk in there, a wildcard.edu. Right. So it's good for that. Good, good. All right. How's that? Um, actually, don't worry about this piece. How is it different from a common name? Um, these are two different things. Distinguished name, uh, will say exactly what the certificate belongs to. A common name might be something like, like Gmail or something like that. So don't worry about that right now. Uh, what is the certificate authority? Tommy. Yeah. That terrified that the group that issuing certificates and verifies that somebody actually signs off on it. Right. Signs off. Yeah. So let's break that down in a couple pieces. Um, it issue certificates. Exactly. Right. Right. So it signs off on it. Um, your operating system has to trust it. But the verification piece is saying this is who I think it is. This authority will do it when they sign it. But I want to be clear. Your operating system does act when you do your TLS handshake. We're gonna dive into it. We didn't go into the weeds on that. We're going to go a little bit into the weeds today. Okay. But every time you access a website, your browser will say, yes, this is indeed edu. So you should feel safe sending your credentials. All right. Why do we have a public key in a certificate? What's the point of that? Yeah. So you can compare that with the quality of the CA to make sure that it's I don't. Know I like they took a shot though. What's the line from Wayne Gretzky. Was it you missed all the shots you don't take. Right. So you can actually sign and stuff and have the official review. So you can actually make sure that your communications are encrypted against that entirely. So you get the idea of using their private key. So you have a public key to something to you. So you can use it to verify if somebody's signed off on a certificate. But I want you to think about if you just talk to KSAT, Edu and they have a public key. What's the purpose of that? You're not verifying yet based on social history. Right. So what's the purpose of the case? Having their public key in this. Yeah. Your browser gives us. You can talk to that. Yeah. Give it a little bit more. You can talk to them. What do you mean? So when you want to send some information, you need the public key to be perfect. Yes, exactly. Perfect, perfect. Okay, so one yesterday we talked about the symmetric key encryption is at. And I want to talk security with somebody. I have to give them my public my best symmetric key right. So the challenge with that one is my question right. But two how do I actually get it to that. Right. Now when we're talking about asymmetric encryption we need both a public and private key. So if I pick something with their public key they go encrypted with their private key. So you can broadcast your public key out there. So membership is for two primary purposes. Allowed me to publish a section of your public key saying, hey, if you want to talk to me, send a message. Use this to encrypt it. Right. But the other part of it is saying, hey, I am going to be who I say I am because you might have this other OS sign off. So the primary reason is to send them a message in person. Right. Questions on that piece is really important. Okay. All right. Um, if I visit a site and the certificate expires, the certificates do expire. They have a date that they are valid up until what happens? You can try this experiment out to migrate some things temporarily on your operating system by changing your date, your outfit for 2026 instead of accessing class. Oh go ahead. So it doesn't cost to sign in because it's going to get it. That's right. That's right. Right. There's other reasons why your browser would say you know, trust is site, but that is one of the reasons. What is x509? What's x509? Yeah. Oh. Um, it's a standard for banking. Yeah, it's a standard for the format of certificate. Uh, the attributes within a certificate. We need to have a standard. Because if you think about, um, if you think about the internet and how it works, if we're talking protocols and standards, imagine that everybody has their own set of rules out on MLK drive. Right. Well, actually, some people do. Every time I cross the community, I have to wait a little That's right across the street. But you would have crashes, right? Things wouldn't work, right? So X509 is that standard for certificates? Um, what's. Let's encrypt? We talked about it a little bit. Yeah. That's right. Yeah. So if you want to get it for free, you can use Let's Encrypt service. You can get it for free. Uh, by the way, I did include a link to an article that, uh, discusses, um, uh, a vulnerability with the who is service. Uh, we'll take a look at that later. Um, or we'll take a look at that later in the summer or at some point in the semester. But, um, what I'll probably do, and you'll get a news blast from me today is that I have several feeds. Uh, not social media. It's just RSS of different places that publish news on different, you know, vulnerabilities and things like that. So you'll probably get, like, an email blast from me, like an announcement canvas saying, hey, here's some articles you might be interested in. I don't quiz on those or anything like that unless we formally discuss them in class, but it is important to stay updated with what's going on out there. All right, so a couple of key terms. We talked a little bit about this, but I do want to make sure that we understand this. So we did talk about certificate authority. That's what signs are certificates. Our operating system needs to have that certificate authority installed in the operating system, so that we will trust any certificate that's signed by that certificate authority. But when you take a look at certificate Authority's, you can take a look at them at two different levels. You have a route CA which is going to be self-signed. We generated one of those at the end of class on Tuesday. Okay. Meaning that nobody else is signing off on that. Okay. So it signs itself and then you have an intermediate site. Now, you might be wondering why are you having intermediate CA? If a route can just do its job. The idea behind the root CA is that it's going to be valid much longer, and you definitely want to keep that private key throughout. CA uh, as locked down as possible that CA can sign off in an intermediate CA. So if that intermediate CA expires that's okay. You can just issue a new intermediate CA also with the private key for that intermediate CA gets out in the public, then you just issue a new intermediate CA. Okay. So a lot of you kind of keep that a little bit more locked down and then issue an intermediate CA uh as you need to. But that is what is typically used to issue uh certificates okay. Is that intermediate CA. So you'll see a hierarchy when you take a look at um who signed off on a certificate. You'll see the root CA, you'll see the intermediate CA, maybe another intermediate CA. And then finally the actual, uh, certificate. All right. So what I want you to do I showed you guys how to do this before in groups. Take a look. Who's the root CA for f? Org. If you're not familiar with who F. Org is, this is a good exercise. Maybe you'll learn a little bit about them. How long is that root CA valid for. What about the intermediate CA. Who issued that. How long is that valid for. And what about the actual certificate for F. Org. How long is that valid for. So take a look. You can talk through it with the group. Show how you can find it in your browser. Use any browser you like. If you forget how to check that, ask a friend. Ask somebody next to you if they're not your friends. Introduce yourself. Yeah, I see your. Oh, this is the. Bottom of this. It's got nowhere. For us to be. And the group is all. Set to join us now. Yeah, I. Think. So. Oh, yeah. That's crazy. Yeah. And I wish they would. Be. Able. To support. Us. Thank you. All right. Who issued the routes for us? What organization is ours? Yes. I see. Okay. How long is the route CCA valid for? Anybody else? Yes. It expires on March 29th. What do you think? like? And what year is it? Oh, this year. The roots here. No, no, the roots are all the way at the top. What year? Is 2035? All right, so what do we say in last class? Certificates should be valid for longer than a year. Right. But our route still needs to be valid much longer because that's installed within the system to establish a trust. So if you're in a dream, let's say on a windows XP machine online fresh install without. Yeah. Any website you access would actually break. Okay. Um, I think it was something. Oh, was it okay last year? I think it might have been. There was like the whole, like, flight reservation system, but it was southwest was running off like windows 311 or something. Crazy. I don't know. All right. Um, was it not for, um. What about the intermediate K? Who is it? Did I n okay? And then who is she? And how long is it valid for? It's easy to find this. Yeah. Let's encrypt. Right. Let's encrypt. Good good good. What about the actual certificate? How long is that valid for? Somebody said earlier March 29th. Is that when it expires? Yeah, it could be three months. Okay, good. Good. All right. So and if you're wondering what are they talking about. Where did you find this? Um, you can check it really? In any browser. Usually you just kind of click in that symbol on the upper left there. Um, and then you can view that certificate information. Okay. So you can take a look at the certificate. Who signed off on it. This is showing the change here. So that is the intermediate there. That's Let's Encrypt, which F is a sponsor of. And then there's the route there. Okay. So you can take a look at it that way. That's in Firefox. If you prefer Safari or anything else you can. Take a look at the same way. Um, if you prefer Google Chrome. Hopefully by the end of this class you're using a different browser. Um, but there you can see the route, there you can see the intermediate. And there you see a fork. Okay. Um, by the way, I'll do a quick plug on if I'm not employed by them, I don't receive anything off of them. I do donate to their foundation. Um, we'll take a look at them a little bit later when we take a look at privacy. I know I keep saying we'll take a look at stuff later. Um, but they do a lot of, uh, cool projects. One is serpent. Serpent. Really makes it easy for you if you're a system admin. Uh, to keep your certificate up to date with the Let's Encrypt service. Uh, but they also have a tool called Privacy Badger. This is an ad blocker that you can install on Firefox and I think Google Chrome as well. Uh, and they have a really cool project. We'll actually take a look at this when we get into privacy. Atlas is surveillance. So you can actually see like um, what cities use like license plate readers and things like that. Um, I think it's Tennessee. If anybody from Tennessee. It's a little rough. I mean, when you when you look at that map, there's a lot. Um, but anyways, so, um, but we'll take a look at that project later. But the other thing that they do too, though, is they actually will fight for your on your behalf in court. Um, or at least I think on my behalf in court. So anything that kind of gets into like breaking and then encryption, they'll go, they'll go to court for you and not for you individually, but for the public in finding those cases. So they're not, um, they don't believe in backdoors or anything like that. Um, they believe in free speech. And sometimes you might disagree with it because sometimes they have free speech. There's also speech that you don't maybe agree with, right? Um, but anyway, so they're an organization. Um, we'll take a look at them later on in the semester. But but anyhow, um, so sometimes, uh, when we look at certificates, though sometimes, uh, that private key for a certificate can get out in the wild, and you need to revoke that certificate. Or maybe that, uh, certificate that was issued is doing some Nazi things. Right. Uh, and we need to revoke it. There's two primary ways of revoking certificates. One is called a CRL. Think of, like, you know, the cleaners, CLR. Okay. Never mind. So CRL, um, this actual list that says, hey, these certificates aren't valid. And another protocol which we're not going to dive into depth on these, but I want you to know, like, hey, what happens if the certificate does get revoked is ospi. That allows you to check whether or not it's valid and see if it's revoked. So that's more of a real time check. So sometimes you do need to revoke a certificate again, because either that private key got on the wild, or you might have issued a certificate for an organization that's doing some pretty bad things. So the protocol behind all this too, though, that we really haven't dived into is SSL or TLS. SSL is the older protocol. TLS is the newer protocol. But what was the program that we use. It wasn't called open TLS. It was called. Open SSL right. So people still call it and even myself will still call it SSL. But the newer standard is called TLS Transport Layer Security. Uh, SSL was secure socket layer. Um, but I included a link on here that includes the actual spec for it. And you can read these if you like. Um, they're pretty long documents. Uh, we will have a have a quiz on this on Tuesday. Um, so please make sure you're reading on. I'm joking. That's a joke. We're not going to get on this. They get really into the weeds though. So like if you're really interested in how protocols work, like, you really need to follow what you should follow things to the tee, right? Because otherwise, if you're doing things different, well, things can break. But I include this in here because if one if you're interested in learning how protocols work, but two, you can actually take a look at um, this is the spec for TLS 1.3. And what it does is it fixes some vulnerabilities found in TLS 1.2. Right. Which fix some vulnerabilities found in TLS 1.1 and so on. So it's evolving. It's a living document. Um, RFCs can be coming with RFC stands for. Anybody. Sometimes you'll see RFP. Yeah. Request for comments. Right. What do you think of this document. Is it good or whatnot. Right. So before it becomes a standard um, So anyways, I did include a link to that, but we're not going to dive into the weeds of how TLS works, because we could probably spend a couple of weeks on that and actually studying it in depth. But generally the main idea here is, um, when we talk to a web server, remember that web server is going to give us a public key. It's going to broadcast that so we can send a message securely to that web server okay. When we are using asymmetric encryption it's expensive. Not like financially it can end up being financially expensive because the computing resource, but it's just computationally expensive. So our goal when we talk to a web server is to get down to symmetric encryption, okay. Because that's faster. Key size is smaller, it's faster to do symmetric encryption. But we can't do that off the bat because as we discussed before, we just have no way of sharing a key. Right. So here's a general idea. The first thing is we say hello. I know it sounds crazy, but pretty much we say hello to the server. Let me zoom in on this. Um, we tell them what version we can use of SSL or TLS. Uh, and this was a vulnerability before. It's actually still a vulnerability out there because you can get a server to kind of go down to an insecure version of SSL, TLS by working your way down. So one of the ways of hardening a web server and we'll look at this is by enforcing, hey, we only support secure versions of TLS families. What you'll do is you'll kind of say hello to the server saying here's the ciphers I support. So different encryption algorithms, different key sizes, all that. And what version of TLS I support. Yeah. So there are more. Obviously the more recent ones are more secure. Are the old ones just like we are security vulnerabilities or just like. Yeah. Just not. Yeah. So there was, um, we we might if you go down one. Yeah. Immediately. Uh, it can be. So there was a really bad vulnerability out not too long ago and, well, not like a couple of months ago, but, uh, several years ago called Heartbleed. Anybody you ever hear of Heartbleed? Probably. Okay. So the way that, um, I can't remember if we if we dive into it later in the semester, the way that Heartbleed worked is, um, one of vulnerability. We'll take a look at a software vulnerability. Is a buffer overflow. Okay. Um, the way that probably worked is you would send a message to the server saying, essentially, hello. But the way you send it is you would send like five colons. Hello. There's five characters in hello right. And the server would reply back with that. alone, right? But when somebody discovered is what if I change that five to a ten? Well, the server would send you the hello and the buffer and then the next five bytes in the buffer. Okay. If you expand that size even larger, you could get the server to send you back the private key. Remember if you have the private key, any message sent that server, you can have your server. So yeah some of those were fairly clear in the wild. Uh, unfortunately that was with the open source library which that got patched. So but like we've talked about Tuesday, we saw all the cool things that open SSL can do. So if you give one vulnerability like that in there, and OpenSSL is the most widely used library out there for that. Great question. Um, so the way that TLS works is there's got to be an exchange. This is the thing I really want you to remember. There's got to be an exchange between the client and the server saying, what versions of TLS do you support and what ciphers do you support? And what they will do is they will. So the client will still first say, here's why I support the server will pick or should pick the strongest version of TLS and the strongest cipher from that and send back the certificate to the client. The client then uses that public key to send a master secret to it, and then it establishes a session key. What that session key is is a symmetric key. Now how can I get a symmetric key safely to the server. What do I use. If we talk about as well as what's that perfect asymmetric encryption. I can take that public key that they're presenting to me, use that to encrypt the symmetric key and send it to the server. Once that server has that symmetric key, we can now talk using symmetric encryption. Much faster less computationally expensive. Okay. So that's the idea with TLS. You essentially want to get down. You want to negotiate at the beginning saying here's a version of the TLS support. Here's the ciphers I support. The server says okay, here's the ciphers I support. Here's the certificate I send a master secret, I send the session key, we finish a handshake, and then we can now start communicating. Now this happens so fast. You know it. It happens so fast when you open a web browser. Bang bang bang. You're already talking, right? Um, so that's what, um, fundamentally what SSL or TLS does. Okay. And that session key can be something like an Ascii and often commonly as to do symmetric encryption. Um, I did want to include a plug on here. So I, you know, I can explain this. I think I do an okay job, but there's somebody out there called Julia Evans. Anybody ever heard of Julia Evans? Yeah. Okay. Cool. All right. Um, follow on social media or. Something else. Okay. Cool. Cool. Um, so Julia does, um, uh, these comics out there, and they actually don't always look like this. They're like, um, what do you call those zines? Am I pronouncing that right? Or zines is how you pronounce it. Okay, see, I got I got a lesson today. But anyways, um, uh, you can follow, uh, Julia Amazon. Uh, Julia also has some reruns from their comic, uh, from the comics on Mastodon as well. You can also purchase them too. Um, but anyways, uh, they're kind of, like, fun and whatnot, but I included this in here of to kind of talk a little bit more about the handshake, like, hey. Like how do we verify and so on. And, and includes a reference to Let's Encrypt. So just in case you're interested and again Julia has a mass account. So if you want to follow Julia there you can. And then the reruns. So all right so that's fundamentally how TLS works though. That's that's the deepest. We'll go with that. I don't want to really get into the weeds of it. We may take a look at vulnerabilities with that later in the semester. Um, but another component that uses both symmetric and asymmetric encryption. And I think this is fitting to talk about it now because it fundamentally works the same way as PGP. Now, I heard somebody mentioned PGP last time. Maybe so. Yeah. Okay. So you use PGP or. Oh, somebody say you use PGP. For email. Yeah. So um PGP is often associated with email, but not just for email, but it's a way of sending an email encrypted to another party. It essentially functions similar to TLS and that you use asymmetric encryption. And then you you generate a session key just like TLS, and you send that to another party. Um, you don't have to go through all those steps though. You can just use asymmetric encryption to send the message. But as we said, it is a little bit slower. So um, there are different services that provide PGP. One of them is proton. Anybody heard of proton before. Yeah. Okay so a good number. We'll talk about proton later with privacy. Um but proton mail is a is a proton is a foundation that offers various services. Mail is one of them and they provide PGP. Um, essentially built into the service so you can use it. Uh, proton is based, I think, in Switzerland. They did come under a little bit of fire several years ago and a little bit recently, because the CEOs put some messages out there about, um. Anyways, political messages are supposed to be apolitical. Uh, but one of the things that kind of came under fire with is, uh, there was a warrant for logs on the server, and they're supposed to focus on privacy, and somebody was able to figure out, like, okay, who is accessing this service? So, uh, but anyways, pretty good privacy. Again, we're similarly the same way. Uh, the idea is you use that public private key. You could just broadcast what your public key is out there. So if anybody wants to send you a message and essentially they could generate a session key or a symmetric key to encrypt with that asymmetric key and then send it to that party. So all right. So that kind of wraps up with uh, with encryption and certificates. The next thing is it's Thursday which means. Quiz. Quiz Thursday. All right, so go into canvas. The passcode is salt. I got to make it available. You'll have 15 minutes to complete it. Salt. Hint, hint. If you don't know what salt is, you might want to look it up real quick. Yeah. Come on. Duo. Yes. This is my device. Oh, yeah. You're not going to see it yet. I gotta make it available. Bring it over here. All right, so the quizzes do automatically submit. Um. Oh, wait. No. Okay. Um, see, they are time, just like the other ones. Uh. Uh. Okay. Okay. Should be. All right. Should be available. So if you go into canvas, you refresh. You should see it at the bottom there. So go ahead and take it. I'll pause for ten minutes and then we'll talk about the assignment. If you get done with the quiz you want to review the assignment. You can go ahead and review it. You can take the quizzes on your phone too. They don't require any kind of taking any further to follow up on that one. Okay. So yeah. Be mindful the time is always 25 five minutes. I can take away two minutes. As a pastor. You'll see that under modules at the bottom. Of the table. Salt. Salt. Is the salt the passcode? Which is. Hit refresh. One more time. Yeah. Somebody else had an issue. If you don't see it at the bottom of. The finish. Really start taking a look at the assignment. While you are doing that. We'll post the slides from today. You. Know. Give me a few more minutes and we'll talk about the assignment. Okay. All right. It looks like most people are done. So I'm gonna start talking about the assignments. Uh, and then if you got a question or you can go ahead and finish a quiz, but we'll open up the questions at the end about the assignment. So this is the document that's posted in canvas. I just load it in here because it's just the canvas. Um, document preview just doesn't work really well. So if you want to download that PDF, you can download it and take it a while to or to to load. But anyways, um, what you're building is a password manager. You can use all the components that we've looked at so far in class. Okay. So you can use uh, encryption. You're going to use hashing. Um, you're going to use key generation. Okay. Um, this will be just run from the console. You're not making it out of it. But after you do this assignment, you can use swing or Java effects, uh, if you like, and actually make a fully functional gooey on it. And then you would actually have a password manager. Okay. Like a legit one, not one that is base64 encoding passwords or anything like that. Okay. Um, oh, you will use base64 encoding in here too. Okay. But anyway, so the general idea behind your password manager though is that you're going to store things in a comma delimited file. You will have a key for that password and then the password. But the way that we're going to make sure that you did put in the correct password is there is going to be a salt at the beginning because we should add a salt. Otherwise this can be easily cracked. Um and then an encrypted token. So I'll talk about what this means. But this is really important piece because this is probably the piece that I would get the most questions on. Um, but what you're doing is you're going to check to first see if there isn't a password file where you store the passwords. You asked a user for an initial password, which you then use to create a key. You'll use Abcdef two, which we used in class. Okay. Um, you then store the salt and you can come up with whatever salt you want, along with a token that you can use a fair fee in the future. This user entered the correct password. That token could literally be like Cookie or Brian or Sunshine or whatever, right? The idea behind it is you take that user's password. You take that salt, you generate a key, and then you try to decrypt this and see if it matches whatever word you came up with. Okay. It's just a placeholder. All right. Um, if that password file exists, you ask the user for the password to access the file. You use a password, they enter along with the stored salt to verify the user entered the correct password by decrypting this token. This token here. So again you decrypt this. You see if once you decrypt it it doesn't match the token. Where do you have. Like Cookie Sunshine case whatever. Um, and then you know that you're good. Okay. You do have to remember the salt because you use that same salt each time. Once you either create a file or you verify that you're able to open that file from before you then ask them if they want to add a password, read a password, or quit. If they want to add a password, you ask them for a label, okay, that label will get stored in the file along with the encrypted pass where they enter. You. Encrypt that password using the salt and using the key that you generated with Abcdef two. Okay, you then stored that password in the file. Now we're storing text in a file. So what do we need to do with it. What do we need to do to have password. Yeah. Base64 encoded right. If we're storing text base64 encoded. All right. If we didn't care about the format of this file wouldn't matter okay. But since we do care about the format and the basics for encoding. If the user chooses to read a password, ask them for the label so and then return back that decrypted version of the password. So if I ask for password label two, return the decrypted version of it. Okay. If they choose a quick just do a system that makes it. And that's it. This is the format of the file. It should be in the default directory of the program. Do not reference a file using like C colon or slash user slash whatever. Just use the default directory of your program. This will be an intelligence. So the default directory um just kind of show you this. And if you forget you can take a note or you can watch a video. Uh, let me open up a different program. We did this one. Okay. The default directory. If I wanted to create a file, you just right click on that top project. I could do a new file. You wouldn't do this, though, because your program would create it. But that's where it would go. Okay. Right there. Not in your source. Because it's not program source, but right in that top level there. Okay. Don't reference a file somewhere in your C drive or something like that. Okay. Because otherwise it's a pain to read the program. All right. So this is an example of this. The format you should follow. But this is an example of what it would look like. Okay. So this is the salt. And what what can you tell about the salt. Basically you got base64 encoded right. Uh and here's my token that is again base64 encoded. Your labels will not be base64 encoded. There's no reason to do that unless you decide to include a collinear label. Then it would break your program. Um, but and then here's the password. So here's my password for canvas. Don't tell anybody. Here's my password for sis. Okay. You guys know that's a lie because it's the same password, so. But anyways, um, I did include a printout of what it could look like. This is my password. That was last semester, though. I'm changing it this semester. Not so great grades. I'm sorry. Uh, that's a joke. Uh, but anyways, that's. This is like a printout of how to add it. This is a printout of how to add another one, and then here's how to read it. And this is a fully functional solution. Okay. Not worried about oh question. What's that. Give me like a gooey. What do you mean with flax. Well that's what this is though. Maybe I'm missing a question. Give me a Dash 8000. Uh, if you want to do this, I see what you're saying. If you want to do this, actually, you're more than welcome to do so, you need to have this stuff. Okay. Um, one quick thing out of here, and you'll notice it right away. I'm using this. Everything's in the clear. Okay. So we're using the scanner. We're using system. All right. Ideally, what you would use is the console. But when you use a console within a console, it doesn't work, right. Okay. So we're just using the scanner and stuff like that. Ideally, if you're building up the ability for this or if you're building like a, um, just pass a little flag to it, you would actually just copy that password to the clipboard and not even show it to the user so we can paste it. Right? Uh, or if we're entering a password, it would be actually like a goofy box where we type in, you would see bullet points, right, as opposed to the password. Uh, but if you want to take this further, you can take that further, but submit this piece for the assignment. Okay. Now, um, a couple of things this assignment does. One is, uh, gives you some practice with all the topics that we cover so far, everything that we've covered, uh, that you need for the assignment, we can look at class. We've built an example. But the other thing, the reason why you do an assignment like this, the reason why I do something like this, I want you to put the earth. I think you can put this on your resume. Right. One of the things that, um. When I was in the industry, we had had applicants that would apply for jobs and they would have, you know, whatever GPA, they would have, whatever degree. But the problem was that they never did anything like that. So, you know, we would have, uh, people or software developer jobs, they would come in, they would have a computer science degree. And like I said, what university? And then we'd ask them to just do some code on a whiteboard, something as simple as iterating through a list. And they couldn't do it right because they took the class. They might have passed exams, but he never did anything meaningful with that. So this is something you can talk about in employment and you could talk about. I use symmetric encryption and use BBC2 and use of salt and use a hash, because when you use it then you know what it means. It's one thing me talking about it is one thing. But if you're doing it right, so throughout the class you'll have different things you can add to your resume. This is one, the certification is another, and there'll be more things along the way. Okay. But anyway, so that's that that's my pitch of why we're doing this. Uh, this is how it's graded. Uh, pretty much there. You can get the lowest grade you can get is a zero. Then it goes to five because there's really nothing in between there. It works or it doesn't. But there are a couple of things that if you don't check, like if you don't check if a file exists to use an existing password file, you're always creating a new one. You'll lose three points. Uh, you should also replace existing passwords. So if I go to add a password For sis and sis already exists. You just overwrite it. Okay, so I want you to be able to make that change in there. You can work in groups of 2 to 3. Remember, when you submit, don't put the comments in code or you can put comments in code. But you need to make sure you play who you work with on the comment section in canvas, because sometimes the Tas will lose. You know who, um, who worked on that? Okay, so, um, all you need to do is submit the Java file to. Don't submit your doc class files. I don't want to decompile your code, submit the Java file. And it's so easy to do this. If you're an intelligent, you can just do a split screen. Just ask canvas on the left hand side. Take this. Drag it over. That's it. Okay. That's how you submit it. This is doing two weeks. All right. When should you start this? Soon. Don't start. Don't wait until two weeks and then ask for an extension. Okay, you're not going to get an extension. Start it now. Work with the Tas. All of them have done an assignment like this, except for one, and I know the other one can do it. All right. Somebody has a question. Yeah. Is there anything that you don't need to preserve the hierarchy? Or if you want to, if you really want, you can. Um, but pretty much what I'm saying is I only need to get out of there. It makes grading easier because what the teams will have is they'll have a say on a project. They can really just drag and drop a comment over if you start adding, um, packages and stuff like that. There's some. Other questions. Yeah. Yeah. You can use those things about it. Yeah. Uh, as long as you use anything of, I think 11 or above, I think we'll be in good shape. We are. All right. So the rest of the time, I know we're ending, uh, a little bit early. Uh, but I want to leave the rest of the time for you to find a partner. Uh, start working on it, if you'd like. You don't have to work on it here. You can work on it anywhere. You can go outside and sign you out. It's that warm. But you can go outside. Um, but, uh. But, yeah, you can use some time for that. One quick recommendation. As with any kind of programing assignment. Don't start coding right away. Think of the message you need. Think of the classes you need. Stuff goes out first and it'll make the job a lot easier. I'll see you all next week. I'll stick around for questions. If you want to start working on it. That's. The last time we're going to. Oh, yeah. Yesterday. Yes. Yes. Yes. Yes. Yes. Oh, yeah. Yes. Yes. Oh, my. God! Yes. Hi. So, what's to be formatted? Oh, okay. That is perfect. Task one. Screenshot. Test two. That's perfect. Yeah, no. That's fine. Yeah, as long as I can see it. Because the tears will be greatest. As long as they can see that you knew which command to run. And then you show the tablet. Yep. So it's the first time? Yeah. See, I had the honor. Yeah, I what I did was, I would say, like, probably one that took a screenshot and put the thing there. And that's the problem too. That's right. That's perfect. Yeah. Easy. Hey, Isabel. The evil that I see you. Yeah, I just saw it this morning. Um, I was gonna reply, but I had to get here. You don't need to do a pull request. You just merge it. You're on the team. Yeah, you're on the team. Yeah, but what I'm gonna do is, um, reply to everybody and say, listen like you're part of this. You just do a merge. Yeah. No pull request. I trust you, you know what I mean? This is my reason, kid, though, right? If there's a problem, we can always roll back. Yes. Okay. I am going to follow up and reply to a whole group. I got class right after this, and so I won't be till this afternoon. Yeah. All right. Hi. Nice to meet. You. Yeah. You. Know, I think that was. Hold on. I thought that was separate. Let me check. Sure. So the freeways are basically. So what would you say? So what do you say? Yeah. Well, I'm answering his question first. All right. And then these guys are in line. Uh, yeah. So that could be within your home directory. Yeah. Good question. Um, I was oh. Yeah, yeah, you can wait. All right. So questions of security. Thank you. Thank. You. Oh. Um. Yeah. It's gotta be the same again. Yeah. Don't worry about all those things. Thank. You so much for the assignment. With that, I don't think you can't have everything. Okay, but you do. I'm not sure. Okay. I just didn't know who it was. Yeah. Okay. But if you want to get some feedback. Yeah. All right. Cool. Yeah. Well, I'm still kind of awesome with, like, trucks and the stadium Outstanding rapper. So it is if this is a really confusing topic. The first time I saw it. Yeah. And when you read the documentation on state what the documentation about, let's get a bit better. But you state as a single source of truth what is this philosophy? Yeah. All right. So what's your question? So I guess my first question is like for example, we create this variable finders here. And I know this sort of list of reminders, but it's never referenced at all within here. So we did it before that. Um yeah we did it. But we haven't done it yet, so we can see here. Okay. Okay. Yeah. So, so essentially, if I go forward. Okay. I want you to create a new reminder and then add to a list that includes a bracket set. Thank you. For the music. So we are back in here, though. Yeah, we will see it. And then. There is other spaces right there. Maybe. What makes you think you could do something better in your life? Yeah, because there's a lot of property actors that contribute in that. So remember when that came up? Yeah. Yeah. It's literally like that. So you're actually I guess that's it. Yeah. Um, I don't know, maybe it's just a little, like, figure out. Okay. So what's this one? So for each item and every day. Yep. To do and this is like your Java like for like string name colon like students. This is for each to do in every day. Yeah that's exactly right. Every day you're on the list to do is a reference each element in there. Yeah. And this is what is going to be my unique ID for that. And we're just turning the text. Got it. We're creating a text field. Yeah. Okay. That's right. And it's you said this is similar to a column. They're not swimming. Right? Swimming. That was my other question. What is the difference? Like when we go to, like create a new file and we pick Swift versus SwiftUI? Yeah. It's an actual different format. Split is code. You can switch out of it. Yeah. But anyway, there's no relation to Swift. UI is declarative. About. Life so well and you can use it to a degree to build a new life. It's much easier to do it, much easier. It may not seem like that, but once we show you, I think you'll see the difference. I wasn't sure if, like. For instance, Facebook uses like the file and I was like, give us a different template of like contentview versus whatever. It's it's it's own. Yeah. So there's something called. Have you heard it? Have you looked at Kotlin? No. No. Okay. So there's another language called. I don't know if you want to call it language. Have you guys heard of jetpack a jetpack compose? No. Okay. That's okay. Why would you if you didn't write? Um. But Jetpack Compose is here. Let me show. I'll show. Just a quick example. So this is an Android application. This the UI is defined in XML. And this is kind of like how UIKit used to be before. Um here it is in icMl right. And then you would have the code that essentially is like the back end code to a, like a controller. Okay. Um, so you had these things be to separate and you have to manage a connection between them and, and all this jazz. Um, what Google recently did is they shifted to using Jetpack Compose as a more declarative way. This is imperative. Like meaning? Like when I click on that button, like, what do I want? I'll show you when we click on that button. I'm getting a reference to all these different fields. I'm checking them. And then I'm starting on like another activity. Right. Very imperative I'm describing step by step what to do. Just like how this was like a UIKit for iOS and iOS switched to SwiftUI. To be more declarative, like this is what I want to happen. Um, Google switched as well and it uses jetpack, jetpack, jetpack compose business syntax look kind of similar. Yeah, it looks like a little SwiftUI ish, right? Got card. And within that card you have a column and then you have an image. It's the same idea. Same idea. So when you take a look at both of them like is this syntax different. Absolutely. But it's generally the same idea. I think it just. Doesn't work with you right. As opposed to Swift classifier. Yeah. No we have we have look at more examples to really work on differences with Swift. We'll get into that more when we take a look at um doing things over the network because that'll be really swift. And data persistence. That will be purely swift. But the thing I want you to get, get you guys up and running, especially for your final project, is how do you actually build the view. Because you can see that, right? And he needed to know those nuances. That's right. Once you have that, then you can start designing your app. You might not do anything. You just kind of go from one spot to the next. But even by the end of today, you guys will have a fully functional reminders app that you can actually install on your phone. And if you want to publish on the App Store. Sure. So. All right. I'll see you. Yeah. See? A little bit. Yeah. How are you doing? Otherwise, every semester is there. I don't I don't think we have this semester. We are always right in the spring. It's great. Yeah. I would love to do it every semester. But, yeah, I think it'll be every spring now. Hopefully every spring. And then if I have a weakness content, that shouldn't be a problem. That is a problem. Okay. Yeah. So I have a couple people in the class, but they were loading into a VM. Yeah. Yeah. So, yeah, unfortunately, that's just if we did Android. It doesn't matter. Okay. Yeah. Yeah, I can see it. I can swipe on an old Dusty Mac from any time now to that one since mentioned, I'm not sure if it's possible to run your website. KSL will loan out fast. Yeah, but it's always supposed to be for a short time. Yeah, that's the short period. Um, I can't say it's, I guess. Okay. Yeah. Okay. Yeah. Okay. The, like, long term loans that you take has those are only, um, cookbooks for those. Okay. Okay. Yeah. Okay. Yeah, I guess I do have another question. Yeah. Are we ever going to, like, truly break the bills in this class? Because let me break them to where they're, like, not usable when you can't access like, oh okay. So my other class, they're like forcing us to use an ID called Code Blocks. Yeah. No. Right. And it's not very compatible with that. So I just don't want to do that. Yeah. Oh you ever running your VM? Well, I need to it now because. Anytime I have some software that don't you guys know? There's never, like, a trick on this at all. Here's some fragments. I know, I know for a short time, but I'm trusting and so on. I take a snapshot. Right. What class? You should be okay, because you can spin that up at one time. Okay. Don't ever lose everything. Depending on what we're not. We're going to launch some things down to it. Yeah, but we're not going to stick to like, when we talk about viruses. We really are just talking about viruses. I don't want to install something like, you know, somebody installed on the host machine, but you know what I mean? Gotcha. Okay. Good question. Cool. Thank you. Yeah. See you guys later. I'm sorry. Computer security. 344. 344. You're right. No, no. No. Just let them run around here. That's what. That's what I know. They gave so much order to my early love to stay at a friend's house for two days. How could you not know that you're wasting time. 90 minutes and. I. Okay. You. Yeah. Yes. Yes. Yes. Yeah. Yeah.
