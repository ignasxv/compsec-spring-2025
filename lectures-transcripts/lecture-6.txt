UNKNOWN
So this is. Great. Okay. So. I have. You. Know. What? Mhm. Mhm. So you will want to have your um. You will want to have your um the uh the VM up and running because we're gonna use it today. But if you don't have it up yet that's okay. Um, but you really want to be up here shortly. Actually, you want to get up right away. Sorry. Um, so, uh, today we're going to start taking a look at network security. Okay. We're going to take a look at, um, how we can secure both networks from more from an operating system perspective. Uh, we'll take a look at ways of also attacking, uh, networks from a network protocol perspective. Um, and we're going to spend about a couple of days, uh, taking a look at this. So, um, in order to make sure that we're prepared for this, though, there are a series of things I need you to install. Uh, but the first thing I need you to do before you install these is probably do a reboot of your VM. Uh, you can try doing an install first. Uh, but if you don't do the reboot of your actual virtual machine, what can happen is your day can sometimes get out of sync. And when you try to install one of these many packages you might get, like an error. So, um, so a way of rebooting your machine, you could do it either through the GUI or through the command line. Is it just to a pseudo reboot? Zero zero means to reboot right away. Um, and then the first command you see here, and we'll dive more into these later, is to actually update, um, the database of available packages that you can install. Right. So the sudo apt update doesn't actually install anything. Essentially just think about like updating like, like if you go out to the App Store or Google Play essentially like updating what's available in there. Okay. Then we're going to use a variety of tools that you see here. Some of these tools I'm gonna just give you a warning ahead of time are only for classroom use. Okay. So what I don't want you to do is take one of the tools that we've used in this class and start attacking some of these machine, right? Some of them are pretty OpenAI, but some of the tools that we'll take a look at in the semester could actually do some damage. But go ahead and make sure that you install all of those. Now I'm going to give it maybe about five minutes. It shouldn't take too long. The one that will take the longest is Wireshark. You'll see a prompt saying do you want to allow it for non admin users. Just go ahead and hit Y for yes, but all the other ones should install fairly quickly. Okay. So I'll pause for about five minutes and then float around in case there's a question. Do you want to take that time to install it now? One the recommended prereqs I'll just kind of mention this as I walk around, and he's got a question. Whether I can get a few bucks for this course is computer networks. If you do not take computer networks, you will be fine. I'm going to give you what you need today to be successful in this. Yes. For you. You don't have to do that. You can't do that. Yeah. Oh, yeah. Um. All right. Here's the way you did this. But if you go through. What's the. Problem? I don't Okay, so I. Got it. Okay. All right. So let's. See if you can try to. Answer any questions. You might like. What are you doing? Yeah. So computer networks do not take it. No worries. We'll spend some time talking about computer networks and computer networks. Some of them, they will be with you. Um, but I do need to make sure that everybody's kind of on the same page. We want to talk about security. Yeah. I guess so. Yeah. Sure. Okay. Thank you. How are you? Yeah. So is this. Supposed to be a. So. Yeah. I think. It's great. There's so. Much. So. Oh, yeah. So when you get that Wireshark right, you can select. Yes. Okay. Um, I thought it was just y. But it's been a while since. First of all. Thank you. Thank you. How many people have all the packages installed? Okay. Good. Excuse me one more minute. And what I can do to do is I can close to our cameras. So in case you miss the stuff, you can just go through that and make sure you have everything installed. Thank you so much for the picture. You got it right. Actually, let me do that now. Just so. I'm gonna put these on canvas. I'm sure that'd be people. May come a little bit later. And if we're doing something that requires more than, like, five minutes of prep, I'll send out something beforehand for you to do. Um, but something like this should only take just a few minutes. So. Okay. All right. In case you forget the commands. Um, the package is to install, um, under modules. You scroll all the way to the bottom, you'll see network security. There's a network setup page there. I include all the packages there. Okay, so if you didn't get to install all of them, all those commands are right there. Okay. All right. So but I do want to dive in. So let's go ahead and let's do that. And then you do want to keep your VM up and running. All right. So like I said um for those that have had networks um some of this is going to be review. Um, but since it's not a required, uh, prerequisite to make sure that we're all on the same page. So, um, so what we're going to take a look at is protocols, OSI model devices addressing. Um, if you want more depth in this, I highly encourage you to take computer networks. Uh, I think even if you just think you want to be just a software developer having good understanding of how networks work, uh, is definitely a thing that you should have. Um, and then we're going to dive into network security. So we'll take a look at firewalls, uh, intrusion detection systems, how we can detect protocols, uh, network zones and so on. Okay. Um, there is, uh, we probably could spend really a whole semester, uh, taking a look at network security. But what we're going to do is we're going to cover, uh, the fundamentals, uh, in this class. So. So when we think about a network, a network really consists of a lot of things. I think a lot of people think about network as just the connections between two devices, but it really includes not just the connections but also the devices themselves. All right. So any kind of end system on there, but it also includes applications that run on the network. So if we think of a firewall or a server is typically being a um, typically being as an actual device, but they could be software as well. Uh, it does include the communication links, obviously. Um, and those links aren't always physical, right? They're wireless as well. Uh, it does include how we break up things when we communicate. So dividing up content into packets, uh, the switches that send those packets to different link layers, um, routers that determine what the best route is for sending a packet from one end to another. The transmission rate should be familiar with this. If you're maybe streaming Netflix or playing some gaming online, right, you notice when that transmission rate drops so you don't have enough bandwidth. The ISP, ISP ISPs play a pretty large role now in detecting any kind of botnets with IoT devices, and then protocols like TCP, IP, which is the most popular one. Okay, so that's what a network is. It's not the same as the internet, right? We can have a home network. We can have a private network here at case. But if we think about the internet all it is really just a network of networks, right? We have a lot of standards of how we communicate on the internet. We have much different protocols. So TCP, IP, UDP and so on. But we also have to have a way of addressing devices on the internet, right? Because if I want to be able to send, you know, essentially, like you think about, like sending something in the mail, you have to have a unique address. Well, we have to have the same thing on the internet because how do we know where to send it to? We also need to have reliable communication. So making sure that something gets there right. Similar like to a mail delivery. If we have like a signature confirmation or something like that. And much more. All right. We'll spend a brief. I'm not a one that likes to spend much on history, but I do want to spend just a little bit about the history of how the internet came to be. Can anybody tell me how the internet came to be? What was the source of it? Why was the internet created? Yeah, I think it started out as Arpanet project. Yeah. Just to describe it. Yes. Exactly right. For defense projects. So, um, during the Cold War, uh, there was a concept called mutually assured destruction. So the idea is that what kind of kept the Soviet Union and the US from attacking each other is that if anybody is starting to attack. Well, it's game over, right? There's enough nuclear missiles that existed that essentially would liberate the world, right? Um, so, uh, in fact, there's a there's an article recently, uh, Nat Geo just did this, um, reading about it in the magazine. They were talking about how they were going to try to turn Greenland into, like, a place that could attack the Soviet Union. So the US actually had like a military base there. Uh, which ended up not working. Well, I don't know, building a nuclear missile silo and a big sheet of ice just, you know, just doesn't work too well. Uh, but anyways, that's where that's the founding of the internet, right? The idea behind it. Um, so start off at DARPA. All right, so there are these still fun projects, and they create something called Arpanet. So the idea behind it is, what if we're attacked? with a nuclear missile. We need to have a way of responding to that. So that's what created the internet, essentially that idea. Um, so the idea was to connect these, uh, military bases, universities and research locations. Um, so early on, it was just UCLA, UCSB, University of Utah. And the idea that the way that they sent data was a little bit different from how telephones work. Telephones are circuit switching. So we actually switch the actual circuit between, um, if you're talking on the on the telephone line here, it's packet switching. So we can actually take individual segments of data and route them appropriately. So it's a little bit different. And again uh, the idea was to maintain control. So for under a nuclear missile attack, um, to maintain control of the network, the ability to respond eventually grown to these codes, uh, out to Cambridge in 1971 included 23 universities. And some people will mix up the internet with the World Wide Web, which are two different things. The World Wide Web is an application that runs on an internet. And if anybody's familiar with Sir Tim Berners-Lee, who came up with the idea of the role by web, uh, he did some pretty good. Ted talks about what he thinks the future of the World Wide Web can be. Um, so, uh, but, uh, it was operated by the military, uh, until 1990, uh, which is no longer run by them. So early on, I want to include this for a specific reason. You'll see why. Uh, but this is Arpanet in 1969. Okay, so there you see the connections there. Then I went out to the East Coast. You guys notice anything on there? Right? Um, so case was, uh, one of the early, uh, connections. Internet, internet. Uh, there's Carnegie Mellon, MIT and all that. Uh, there. And then 1992, uh, this would look like you still see that connection case, but then the University of Michigan connected and so on. So the network started building out, and I just pulled this, uh, I think it was Monday. Uh, obviously, if we want to show all the live connections on the internet, that would be just, you know, too much would just be such a bunch of colors. But there is a pretty cool map that you could check out. Um, I know this is an issue as far as, um, national security and wartime now with, uh, different nations cutting, uh, undersea cables, but you can go to submarine cable map and it will show you all the cables actually go into the water and connect different countries and whatnot. I thought what was interesting, though, was, uh, taking a look at, uh, there's, uh, in Brazil and the Amazon, uh, they actually have cabling going, I guess, through to Amazon River. I don't know, I didn't look at it, but but anyways, uh, so you all know this. There's a lot of connections now, uh, with the internet. Um, so it's grew obviously quite a bit. Um, when we think about how we divide the communication on internet, we can divide it up into different layers. Like when you think about building software, you don't want to build it all as one monolithic piece of software. You kind of want to divide these responsibilities out into layers, because then that makes it easy to figure out what each layer is responsible for. Now, we're not going to cover the entire OSI model, partly because the entire OSI model is not used to develop software. The main ones are going to be application transport network and data link. Those are going to be the layers that we that we focus on in this class. Okay. So if we think about starting off at the application layer when we want to send data, your browser does this, it will it will follow some sort of protocol or format that is well defined and follows the HTTP standard. And if I want to send a request from a web browser To a web server. I need to follow that HTTP protocol. Right. That's an application layer protocol. It's got nothing to do with networks. It's got nothing to do with the transport layer or anything like that. So I follow them like something like a git request. When I create that get request and I send it from my web browser, it's going to go down to the transport layer, which is then going to add sequence numbers, flow control and more information to that. Now from there it goes down to the network layer which will add some more information to the packet saying where did this packet come from? Where is it going? How long should it live? So this way we don't get a packet that's stuck in the network. They just keep circling around and they kind of check some information that we might want to add on there. And then it finally goes to the data link layer where we'll add an actual physical address to it. Source and destination. Any kind of cyclic redundancy checks on it. And then finally it gets It's transmitted into bits and the physical network. So as you start from the application layer and you work your way down, we're adding more and more information to that packet. And then once it gets to the web server, it comes back up. And that web server is essentially going to break apart that information in between there. It might hit some it's and that might it's going to hit some routers. Those routers are going to take a look at the network layer information. But it's not going to go beyond that. Okay. So those layers each add the information that they need in order for that packet to get from one source to a destination okay. And again, in um, in computer networks you cover this in depth. We'll see a little bit of it as we explore from the security perspective. So let's focus on the internet layer first. Okay. Um, or the or the network layer. So the main job of this is to get one packet from a source to a destination. Okay. That's the main responsibility. Right. In order to do that, we need an address. Okay. I'll post it at the end of class. So if you want to take supplementary notes you can. So think of like the postal service. Right. If I need to get a letter or a package from, let's say, Cleveland to, um, San Francisco. Right. And my usual goes maybe through Colorado. Well, if Colorado has a blizzard right now, doesn't make a whole lot of sense for me to send a truck through it. Right. So I need to come up with a different route. The network acts as the same. Right. Your router is going to choose the most efficient route. And there's a bunch of different algorithms to do this. Um, I'm going to choose the most efficient route to go from one destination to the Okay. So that's that's the main job of the internet layer or the network layers to figure out how to get from one side to another. And the most well-known protocol to do this is called IP. So when you think about TCP IP this where the IPS comes in. So again this is focusing on just getting that delivery. And if we think about that source and destination this is an IP address right. You all probably seen this before. You access your IP address somebody might ask you what it is. Um that's the purpose of an IP address. And anything that is connected to the internet must have a unique IP address. Why? Why do we need to have a unique IP address? Yeah. We need to address this so you can. Well yeah let's let's generalize it more. But that's correct. That's correct. Yeah. What's that. Can you send them any kind of traffic and not have two people receive the same traffic? Yes, that's exactly right. You only want one destination. You see that pathway? If I drop a letter in a mail and I put one, two, three Main Street on it, where's it going to go? Yeah, but if we were trying to resolve it, where could it go? We're trying to figure out where that letter could go. Where could it go? One, two. Three Main Street. How many cities do you think have a main street? Quite a bit. Right. Um. Or even Detroit Road. Right. Or, um, Euclid Avenue. Right. These are common names. So, um. So if we want to send something in it, we have to have a unique IP address, a unique connection to it. All right. We're going to talk about how we get around the limitation of running out of IPS. Um, but what I want you to do is on your VM. Go ahead and type in IP addr. Okay. Type in IP space addr. And I'm going to do it as well. And how many IP addresses do you see? How many do you see? See. Quite a bit. See three IP addresses. Yeah. Yeah. You might see. Yeah. See it's a little bit big for the screen but you're going to see several here. So this first one that you see is called the loopback. Okay. So you might see some people wear shirts like there's no place like home. But instead of home they have 127.0.0.1. That's where that shirt's from. The loopback is your own interface. Okay. So it's just looping back to your own machine. So if you ever were to type in to a browser 127.0.0.1 it's going to go to your local host. Okay. We're going to dive into this here shortly. All right. There's no physical address to it. There's no broadcast address to it. But if you scroll down you're now going to see you might have two. You might have three. This is getting kind of cluttered here. But here you'll see an EMP for an Ethernet. And you'll see an IP address here. That's your IP address for the local machine. Okay. Now this isn't unique though to the internet. We're going to dive into how we get around that in a second. But you're also going to see some other addresses here. You might see an inet six. And we'll talk about what that is here shortly. Okay. That's a much longer address. But this is probably the one that you're most familiar with. This is the one that you're used to seeing. That's an IP version four address. So iPads is a quick way of kind of just seeing what your IP address is on Linux. Um, so let me jump back. And uh, so if anybody if anybody is asking like, what's your address, you know, how can you see it? That's how you take a look. Now that IP address started with a what a ten dot. You know, some address. That's what we call a private address. Okay. So anything in the 10.0 range is a private address. So anything from 10.0 to 10 .255.255.255 is our private address. Now, based on this number, this is the highest, uh, number that, uh, address can go up to two, five, five. What does that tell you? How many bits? Uh, make up an octet. How many bits make up that part of the IP address? Eight. Right. Two to the eight is 256. Right. Oh, we count from zero, so we get to 255. So that makes up a private IP address. Uh, other common IP private IP addresses. So if you ever configured your router, you might have got like a 10.0 address or you got A19 2.168 address. Okay. So you would have got one of those two. Typically sometimes you might have a routers configured with the 172. But that's not too often what's what's used. So those are private addresses and we'll dive into how they work. But the idea behind this is that we don't have enough addresses to address every device on an internet using an IP version four scheme, because that only gets us a 32 bit address and two to the 32 is 4 billion in change. And you know this. There's more than 4 billion people in the world. And You probably have a lot of devices, right? So if you think about all the different devices you have connected to internet, that doesn't allow us to have a unique IP address to connect to each or to have a unique IP for each device. So we'll talk about how that actually works by using a private IP address. But the idea behind it is that I can share that 10.0 address. Well, let me see. Oh I'm stuck. What the heck happened? I am stuck. Let me see if I can close this out. Okay. Um, let me jump over to this. So I have that 10.211.55.13. Any of you could have that same IP address as well. And some of you might. The idea is that that's a private IP address on this on this network. Okay. So the way that works. The way that works is something called. Net Network address translation. And if you have a router at home which undoubtedly do, your router is using network. Address translation it should be because you really don't want a device directly connected to the internet. Why would you not want that? Have a direct connection? Yeah. So yeah. But yeah, once you make your machine directly addressable on an internet, it's exposed. Okay. If we were to take a Raspberry Pi, and now we're gonna connect it to a home router and allow port forwarding from our router, and we'll talk about ports in a minute to go directly to that Raspberry Pi. You're going to see somebody attacking it right away. Right. It's not going to take long. And in fact, if I don't change the default password of raspberry, somebody will take it over in no time. Okay. We could do it as an as an experiment. But but really, you don't want anything directly exposed to to the internet from your internal network, because once they take over that device, then they can use that device to detect other devices in the network. So network address translation almost acts as like a pseudo shield. Okay. The idea behind it though is that your router is going to share, um, your router is going to utilize that private IP address behind it. And then when it goes out to the network, it will grab what the source port was and the destination IP, and it will use that to then when a packet comes back from the internet, deliver it back to that host because it will record what that source port was, what that source IP was. Okay. This allows us to keep a private address within our home network without exposing device. So it does help protect the devices within the network by just having a future. So if you're a gamer, if you're a gamer, sometimes you might have to enable port forwarding in your router. Just be mindful of that. When you do that, you're essentially punching a hole through that network and you're allowing devices to access it directly. Okay, so I'm pretty cautious when it comes to this stuff just because of my background. Um, but even like our our thermostat, for the longest time, we did not have a smart thermostat, but we got a heat pump installed at the home. And for them to configure that heat pump, they need to connect that thermostat to the internet. First thing I did as soon as they left the house is I disconnected it for a couple of reasons. One is it didn't use two factor authentication. So it's just a simple username password, which over time somebody's going to figure out, right? But the other thing is the last thing I want is somebody not only taking control of that device control to heat my home, but then using that device to attack other devices in the home. So. All right. But anyway, so network address translation does help protect against that. Um, but if I can control my heat remotely from my home, that means somebody else can. Right. So, um. So be careful about what devices you still have connected to it. All right, so with IP version four, we do run out of addresses because we have 4 billion in change addresses that we can make up. Uh, roughly. Um, and so one of the things you'll see IP version six, uh, one of the things to try to solve was, well, hey, we ran out of IP addresses, so we need to have more. So with IP version six you have 128 bit address. And I have no idea how big of a number that is. But if I just take two two the 128, that's a big number, right? Uh, I don't think, uh, I think we'll probably end up destroying ourselves before we run out of, uh, IP version six addresses. Okay, so that's that's a pretty large number there. Uh, but anyway, so it comes, it uses 128 bits, so it's much larger. Um, and it does add some additional security to it. So IPsec. Um, and if you take computer networks you'll learn more about that. It does change a header format. So that's the additional things I talked about. We add to a packet uh to make the processing easier. It does have some uh quality service controls. And the other thing is it doesn't do any fragmentation or routers. And what this means is that a router can take an IP version for a packet, and it could divide up even more. Okay. So it doesn't do any of that. So with the IP version six let's go ahead and just run a couple things on the VM. So we did IP addr that listed all the IP addresses that we had. Okay. But if you do an IP six addr. You will see that you only have it only shows the IP version six address. Now. Okay. Now, loopback doesn't, you know that that's just our own machine, so we don't have anything there. Uh, but if we take a look at that Ethernet interface, this is our IP version six address. And I was hoping. Yeah, we don't we don't have anything interesting there. Let me see. Um, we might see it on the Mac. Now, that's not going to show here. Okay. Let me see. I was hoping to have. See, I have config. There we go. Okay, what I was trying to find is an address like this. Okay. Um, when you see that, uh, double colon like this here. Because that IP version six address can get so long, we don't want to show all the padding. So you'll see that zeros are omitted. So anytime we have that double colon that just means that there's zeros. Uh, in between there. Okay. Um, if you have an address, you'll see it in hex. But let me see if I can find another address up here. Now, all of them take up the full width. I'm trying to find a shorter one. Nope. That one does too. There's more zeros there. Okay, so we see a double colon. Here we go. Okay. This is a good example here. So this actual for my actual interface here. So on this one you see that double colon in between there's the zeros. But you'll notice that this fourth one is missing uh either a hex letter or a number in front of it. If it's zeros, we don't we don't show it in the address. And this is just for space. Okay. Because you go from a 32 bit address to 128 bit address, uh, it takes up a lot more space to represent that. So we don't show anything before that for one. So that is just all zeros. Okay. So the zeros are omitted when we use an IP version six address. Now IP version six was supposed to be adopted by now when they eventually came out with that. And the internet was supposed to get off IP version of four. Okay. So I do include some notes on the address on here. The problem is, as you know, right. There's all these different devices connected to the internet and it's hard to make a change. So if you had all these devices that were using the IP version of your address, and now you say you have to go to IP version six, it's a little bit hard to make that change. It's a little bit harder to coordinate. So. So what you've seen is IP version six being used more locally in private networks and not really fully fully adopted on the global internet as of yet. All right. So that's the network layer. Network layer is pretty pretty simple. You have a front you have a. Two send a packet. Routers will determine which path that goes and then eventually gets to a destination. And it can be what determines that route could be anything literally from uh, congestion on the network. Uh, it could be that, hey, a new router came up, there's a faster route, and it literally can be an animal chew through like a communication link. Right. Stuff like that actually happens. So, um, so squirrels. Uh, this happened when I worked at a data center. Squirrels were notorious for chewing through lines, right? Their teeth keep growing. They have the non stuff to keep them sharp. And one thing they like the non for some reason is communication lines and power lines too. So if anybody remembers there's an item some of you might not have been born yet. But there's a great power outage in 2003. Remember. Do you remember this. It started here at Cleveland, actually at Hopkins. A squirrel scroll, chew through a power line, and it just cascaded. And, uh, the whole East Coast was without power for. Geez, I can't remember how long it was. Maybe like a week or something like that. It was a long time. Uh, but anyways, from a squirrel, a squirrel. Uh, but anyway, so, uh, that's the primary job of the network to get a package from one end to the other. And we'll take a look at how we can attack it. Now, when we send that packet from one end to another. Um, what we're not doing is we're not doing any kind of flow control or making sure that packets get there in a particular sequence. Uh, or we're not making sure that the packet actually got there. Right. So it builds something really important. We have no way of knowing if it actually got there. There's two well-known protocols, uh, for, uh, making sure that things well, doing, uh, fulfilling some of those roles on the transport layer TCP primarily uh, UDP, we'll talk about, uh, in a minute, but, transport layers. When you think about our transport control protocol, think about TCP IP. This is the protocol that essentially makes sure that a packet gets from one end to another. Okay. So the main idea behind it is that when we send a packet, we essentially want to get back an acknowledgment that the receiver received it okay. So think about this. Like if you send like a text to somebody you might see delivered that deliver says they got it right. So that's that's essentially what TCP does. So it introduces a reliability uh introduces pipelining. It has these send and receive buffers so that we make sure that we don't overflow the receiver. So we don't send too much data that they can receive. Uh, we do have acknowledgment of packets. Uh, and it also does have some connection control in there as well. It's a full duplex protocol, meaning that I can send a packet to the receiver. The receiver can send a packet at the same time. Okay. So it's not half duplex where we can only send one way. Okay. So the idea behind the flow control in it is we just need to make sure that we don't overwhelm the receiver. So the receiver is going to let us know how much space it has left. So imagine think of this like in a more physical sense, if we had a warehouse, if the warehouse lets us know that they don't have any more room to receive any more product, we don't keep sending product. Right. It's that same fundamental idea. That's how TCP works. So it lets us know how much space it has so that we can either slow down or just not send at all. Okay, so that's the idea with TCP. That's with flow control that is from me to the destination. Congestion control works differently though. Congestion control is almost like if I were to hop on 90 I-90 to get to work I-90. Or I-40 or any kind of highway. If that network itself is congested, we shouldn't put any more cars on the highway, or we shouldn't put any more packets on the network. It's the same fundamental idea. So you'll see, like some principles that we think about with traffic implement these protocols. The idea behind this is that if we don't get an acknowledgment from that receiving side, that means that that packet was lost or it's taken too long to get there and that so we should decrease our rate of 70 because we're putting too much traffic on the network. Now, we rely on the network layer to figure out a better route. But if all of a sudden that network is congested, we need to back off, okay. So that's also implemented in TCP. So the way that and we'll take a look at this on the actual network layer. The way that a TCP connection is set up is the sender will first send a TCP syn packet, essentially saying I want to establish a connection. The receiver will send a sin ack. And then the sender will then send back an x. At that point we have a connection set up a TCP connection between two two parties. All right. When I send that back I can also send some data with that. Okay. So it's a three step process for establishing a connection. Your web browser, whenever you talk to a website does this behind the scenes, you don't notice it, but it's doing this each time. So one way you can see that traffic is on your VM. I'm going to do a clear. If you type in TCP traceroute we're going to use dash D for debug. Now there's TCP traceroute and there's the regular traceroute DHCP traceroute was designed because. Other networks, their firewalls were sometimes blocking any kind of trace traffic. TCP traceroute actually uses like a TCP packet to be able to determine a route. So what this will do is actually determine the route from one host to another. And I'm going to turn on debug mode because I want to see the TCP packets. I'm going to go to Edu and I'm going to type in 80 port 80. Port 80 is the default port for cases web server. And I'm going to hit enter. And you'll see a bunch of things spit out okay. Now when you look at this you're going to see a bunch of debug information. The reason why I did debug here is because I want us to see the actual connection set up. So once you type that in you hit enter. You should see. Oh, yeah, I saw that a little bit too far. There we go. Uh, where did the sun go? Probe. There it is. All right, so there is our sin packet. Oh, no. We sent it earlier. Where's that? I'm sorry, I saw it earlier. Okay, well, we'll take a look at this one down here. Um, so this is. Oh, no. Scroll up. All right, so there's our sin packet. Okay, so I'm sending probe two of three for this particular hop. So the way that traceroute traditionally works is use the TTL field in the network packet to figure out what are the different hops or connections to get from one endpoint to another. So you all know this. We don't have a direct connection to Google. We have to go through different routers to get there. Right. Traceroute would show us what that is. TCP traceroute uses actual TCP packet to do it. So here we're setting probe 2 or 3 for our first hop. And we send a tcp syn packet. This is our source port which is a random port that we send. We receive back a TCP packet. And there is this in act. So we send a sin. We sent we receive a send back. So now we go for the next probe. We go probe 3 to 3. And again we do a sin. We receive back a send app. Now we're not actually establishing connections. So we're not going to send an act back to it. But we see that syn and that send ack getting sent back to or that send back getting sent back to us acknowledging that connection. Okay. So with TCP, um, once we have that connection established. Eventually we want to tear it down. We don't want to keep it up and running. Okay. So, um, so just like how we use this sin to establish a connection. We use a fin to finish a connection. And so it works the same way. So when we are done sending data, we send it a fin. And keep in mind, you might be wondering, why do we. Why do we have to send a fin? Why not just let the connection go? Keep in mind, when we're transmitting data back and forth, we talked about a buffer and keeping data within that buffer that receive window. So we need to let the server know that or the other and know hey we're done. So they clean up any memory that needs to. So once that server receives a thin it can send us back. And ack. And then it goes in its closing state and then sends a fin. What that closing state is, is a time wait. Right. So making sure that there's no other additional data that needs to be sent. So TCP traceroute Strout allows us to see some of that information, but there's something that's a little bit more, um, a little bit more verbose. All right. So what I want you to do is go ahead and open up Firefox. And if you type in localhost because you installed Apache, you should have a web server now up and running on your VM. Okay. So you could host a website on here if you wanted, although you'd only be able to access it. But I want you to get through like essentially all the, um, all the, uh, you know, pop ups from like, hey, you know, welcome to the Firefox, blah, blah, blah, blah. Uh, but this is actually running on your VM. And it may sound silly, but you're still sending a TCP request to your own machine from this. Yeah. What was the localhost. So http colon forward slash forward slash Localhost. I just hit enter. Localhost always refers to your own machine, and this isn't a Linux thing. This is in any operating system thing. All right. Anybody give me a thumbs up if you see a page like that. Yeah okay. Good, good. All right, so if we want to see all of our TCP traffic, what we're going to do is do a tcpdump tcpdump. Now you're going to see quite a bit on the screen. So if you type in sudo tcpdump and then hit enter. Type in your password. This might not be as much on the VM. I said you're going to see a lot. There we go. Um, this isn't going to be a much as much on your VM, but if you were to do this on your own machine, you would see quite a bit of traffic. Okay. Because we think about all the different apps that are on the network, and then you'd be able to see all that. But, um, but what I want to do and you can certainly take a look at. So if you just control C to break out of that, you can see how many packets you captured during that time, what direction they're going and so on. But what I want to focus on is just. Just the traffic that goes to our web server. Okay. So I'm going to do a tcpdump port 80. All right. So I'm just interested in port 80. Now whenever we access a website on the internet, on the worldwide web we're typically using four, four, three. All right. So that's where we get that block in the browser right. So we're using TLS right. But here we don't have the certificate installed. We're just Transmit net data over clear text. So I'm going to do a pseudo TCP dump on port 80. And now I'm going to go back to my browser. I'm just going to do a refresh. And if I do a refresh so it might be cache. Come up. Let me close it I'll bring it back up. Okay. There we go. Um, in fact, I think even when I started it up there was probably with that news page and stuff. Let's see. You know, I'm not going to get into this now, but, um, they call these thought provoking stories. You guys know what, like, clickbait is, right? I mean, a lot of this stuff is really just clickbait. Like the five things. What's that? Yeah, well, here's the tricky thing, though. Now you make a valid point. Right. Um. So the way Mozilla is essentially financed is by getting Google to be the primary search engine. Right? That's how they're finance. Um, otherwise you have to run off of donations. So. So the tricky thing with Mozilla is trying to balance. How do they keep funding themselves? Uh, in a sustainable way? Uh, and once the, uh, antitrust lawsuit against Google, uh, went through, they found that Google is a monopoly that kind of threatens Firefox. The model. Right. Mozilla's model. So it is tricky, but they do have some other ways of generating revenue. But it's not enough. Now, I will say this, uh, Firefox is still a really good browser. How they recommend it, I use it, um, and a lot of these things you can turn off. So, um. All right. But anyways, uh, that's not what we're talking about here. Uh, if you take a look, though, at that tcpdump you are now going to see quite a bit of information, right? Part of this is loading those thought provoking stories. Um, wait, that's this pseudo tcpdump. I'm trying to get to port 80 because I want to start from fresh. Okay, there's a port 80. Um, but here we're seeing. All right, well, we're making our request from local. Here's the source port to this Google user content. Right. Uh, you're going to see a sequence number here. The window, any kind of options we include in that and so on. And then you will see within here an acknowledgment of a certain sequence number, um, additional windows on there to length of content and so on. So, so you can really get into the weeds. Um, and we'll do this with Wireshark, uh, next class. But we're not going to have enough time today. Um, but you can really get in the weeds of inspecting all that, uh, all the, uh, network traffic going back and forth between two devices. So. Now TCP gives us reliability. Make sure things get there in order. Has congestion control and has flow control. UDP is kind of like, uh, you know, the sibling that just doesn't care. Okay. Um, UDP is really just kind of like send it out there and let's hope for the best. Okay. Um, so there's no handshake. There's no flow control. Uh, there's no, um, acknowledgment of a packet being received. So why the heck do you even have this? Yes. It's a useful collection of data, and it's okay. Like video calls and emails. Yeah, it's exactly right. It's exactly right. So, um, TCP has quite a bit of overhead, right? It has acknowledgment, flow control, all those additional things, which is really nice. Sometimes we really don't care about that. Sometimes we can miss a packet. Right. You guys probably heard of, like, frame rates and things like that, right? Um, the human eye can only pick up so much. So if we were to lose a packet right in a video call, would it be the end of the world? No, it wouldn't be the end of the world, right? Um, if they came in out of order, we might see, like, maybe a little stutter. Uh, but the performance make up for that, uh, would make up. Would just make up for that. So it's a better thing. So, uh, but UDP is, is still used. And if you wanted to, it's really easy to create a UDP packet, send it over the network as it is to TCP as well. And a fun project is actually building TCP on top of UDP. So building like your own version of TCP. You could do this in Java. So so again compared to the difference between the two write TCP we get all that guarantee. Congestion control flow control acknowledgment all those things. Uh, UDP we just kind of send it, see what happens. But it's better for performance. There's no handshake or anything like that. All right. So that's our that's our basics with networks. That's that's essentially what we need to be able to understand any kind of security issues that might we might be able to counter with networks. We talked a little bit about it, what it might be. What uh, why we might want to use that. So what I want you to think about is as we we're not done. Okay. We're going to get into some ways of exploiting this. But when we think about these different protocols, TCP and TCP IP are the most widely used ones. Think about different ways we can attack them. Okay. When do you send something on the network? It's just ones and zeros, meaning you can transmit if you are able to control the device all the way down to the actual Natural access media. You can control what those ones and zeros are, right? There's nothing that would say that you can't send us. Now. There are some things on the network that can say, hey, I'm seeing a packet from this source, but there is no source on this network that can filter that. But if you get it out onto the internet, there's nothing stopping that packet from getting to its destination and potentially causing some harm. So how many people here have heard of a denial of service attack? Probably heard about this in the news. Okay. Good number of hands. Okay. Um, what's our purpose in this class I've talked about on day two? What's our compass? CIA. Perfect, right? Confidentiality, integrity and availability and denial of service. Attack attacks. The availability of a service. Sometimes you see some, you know, Organizations that are trying to do some good and take down maybe a website that maybe has done some harm or something like that. But oftentimes you'll see this against government organizations or nonprofits or whatever it may be, companies, they'll do it. Denial of service attack. So the main idea behind is is to take on the availability of that service, right. So people can't use it. The other part of this is you can have a different form of this called a distributed denial of service attack. So as you may know, like if you're trying to attack Google, well, Google has a lot of resources. Not one client can do it. But if I can either take control of multiple devices to coordinate attacks against Google, right. Not only to pick on Google, but if I can coordinated attack, I have a much higher degree of probability of being able to take them down by doing a distributed denial of service. And when you do distributed denial of service, it's harder to figure out. It's hard to defend against because it's coming from a bunch of different sources. Okay. It's just coming from one source. Do you want that source? That's exactly right. You could just block it. And in fact, if you feel at the end of this class, you feel pretty confident in hosting your own home server. There's a package installed called Fail to Fail. The most failed to fail to do is detect something like that, or somebody's trying to keep trying to log into your device from a different IP and it will block that IP. So that's a service that you can use. We will take a look at how to implement those type of rules in the firewall. Yeah. Good question. All right. So one way that we can attack this is let's think about TCP right. And I include a link on here if you want to read more about this. A common attack is called a TCP syn flood attack. So keep in mind when you transmit that network packet, there's a source and destination in there. I can change that source to be anybody's computer, anybody's machine. Right. It's just ones and zeros. So if I can get that out of the network and a router doesn't catch it. If I send that to a target, what I can do is I can have that target attack another machine with the synapse. Right. So let's say I wanted to attack. Let me keep track of you. But let's say I want to attack Google. If I can coordinate a bunch of spooks and attack packets to all these different machines. I can turn all those machines into attack on Google, right, by sending a snap. Right. So that's the idea behind the attack. You do a distributed denial of service by spoofing that IP address. And what I mean by spoofing it is just changing the IP address. Where else do you see spoofing where somebody changes in address? You get this often? You probably do. I imagine it's a little silly, but a lot of people do this and the the game Pokémon Go, all those spoofing locations for their IP or both to be able to change location and capture it. Can't go on forever. Yeah. We'll take a look at how we can actually do that later in the semester from the mobile app, but where else do you see spoofing? Email spoofing? Right. You might get an email from Google saying, oh, your customer. What? You need to change your password now. Right. You click on that link, you go to change your password and you realize somebody stole your credential. Right. So that's another form of spoofing. There's protections against that as there's some protections against this as well. So anyways TCP syn flood is a common one that could be done. UDP is a little bit different. Um, if we were to spoof a UDP packet. Um, and those servers are exhausted, we would get an ICMP error that goes to a server. So we can also expose UDP to do something called a UDP flood denial of service attack. So both TCP and UDP are vulnerable to this. The main idea is spoofing right. Changing that source IP address of where it's coming from. So um, when we think about protocols, one of the things that you have to kind of keep your, uh, perspective on is how can this protocol be attacked? Okay. So TCP UDP can be attacked. Um, and denial of service. So so let's talk a little bit about those ports. We talked about port 80 and a little bit about port 443. We're going to get into blocking some of these or locking these down. Um but if we think about when we receive a packet to a server or to a client. The challenge is where does it go? Right. Who's it for? Is it for the web browser? Is it for discord, whatever it may be? So the IP is where we're actually sending it. The port actually determines the application. Now where do you think they got this name from? Why do we use the term port? Any ideas? Where do we use port? That's exactly right. That's exactly right. So at Cleveland we have multiple ports. Right. Any kind of main, you know, a major city has multiple ports. It's the same idea. It's the same idea, right. So this is used within the transport layer. And we can see what traffic is going to different ports. And in fact on your VM if you open it up. You can see I'm gonna break out of this. If you do a netstat dash t. You can see any open ports. Now, here, we really don't have much going on. But if I were to go ahead, I'm going to refresh this. Should have an open port now. Still some time out. There we go. All right. So we got more open up connections now. All right. So these are TCP connections that are established going to a variety of hosts for all those really interesting stories. Um so you can see that there. Now what you see is you see your source IP address and the destination IP address. Uh, so for some of these, this is kind of concerning. I see a lot of port 80 on there. Um, but if you take out the actual, N in there. What you'll see. So right now you see a bunch of IP addresses and the ports. You'll start to see names if it can figure out the names. So if you take out the N it won't show the actual IP number. It will try to do a lookup and show you the name for each one. Okay, so here we see CommSec local. We'll also see what the destination port name is instead of the number. So https versus http, um. And if it doesn't do a lookup it'll just show the IP address there as well. Okay. So netstat if you're wondering like if you're on your machine you're wondering is there some sort of botnet on here that has an active connection. You can use netstat to figure out what all the active connections are on your machine okay. All right. So the reason why we bring up our ports as well is um, we're going to use a tool that could be used to discover what might be open on a machine. The tool is called nmap only uses in class, or if you have an assignment okay. Or if you're taking a look at things that might be open in your home network. So if you're curious, like on your printer at home, or if you have an IoT device or like your smart TV, there is quite a bit of spying on you. You can use nmap to find out any kind of open source that they have, and it might be useful to discover like a vulnerability. So if you type in nmap and you should have installed this and type in local host. And this is why we installed OpenSSH and Apache two. What Mapp will do is it will scan your host and find any open ports. And this is fairly quick. So we see SSH because we installed OpenSSH and then we see HTTP because we installed Apache two. Now this is a fairly benign scan. There's nothing really too dangerous about this. But if you were to run nmap against. Some some of the hosts that's not yours. Uh it could raise concerns. And you might you might get yourself in trouble. Especially as we look at the more probing options, one of the first steps that you do if you're trying to do any kind of pen test is discovery. And this is the discovery step. We're finding out what services are running on that server, right. So nmap is just a port scanner. Um, but what we're going to do is we're going to take a look at, um, how we can do a little bit more with that. So this just shows us what ports are open. Now there's a bunch of different web servers that are out there. Apache is one of them. Um, you might have heard of IIs, uh, from Microsoft. That's another type of web server. But what we don't see in here is we don't see what version of Apache might be running. What version of OpenSSH might be running? And so what you can do in nmap is you can specify that. I want to try to figure out what versions of the software of Apache of OpenSSH are running. So if you do a dash S, capital V and then localhost. And this would be useful for your own home network, we could find out what versions. Or we can take an educated guess. Of what versions are running. This takes a little bit longer, because what it's doing is just taking a look at the different signatures of the responses from these to figure out what is running. And here it says open SSH version 9.6. It's running on Ubuntu Linux. Here it says Apache 2.4.58. This is just from a port scan. Let's see how accurate it is. So I'm going to go back to my local host 2.4. 58I think it will show it here. Cool. Oh maybe not. Okay. Maybe it's not showing the version here. Okay. I thought maybe it would show on this website. We can we can check it with apt. But so as V is going to try to figure out the actual version of that, why why would this be important for somebody doing a pen test or doing some sort of hack? What happened or maybe unethical happened? Why is it important to get the version? Yeah, maybe someone has to see the name. And that's exactly what I mean. That's exactly right. Vulnerabilities are discovered daily, right? So if this is an unpatched version of Apache, if I can find out what version it is, I could then exploit the potential for the ability. This is just a discovery phase. We're not actually doing any actual exploitation here. Let's take it a step further. Um, within nmap, if I want to focus on port 443. So I'm going to do P4 four three. There's some built in scripts. I'm going to run a script that takes a look at the different ciphers that are supported. Not only do this once, this is going to be fairly safe okay. We're going to do k.edu just this one time okay. Don't run SV against them okay. Please don't do that and don't do a dash a. All right. So if I do that. Oh hold on. What did I type in wrong there. Script SSL enum. Oh that's right SSL enum. Oh that should be right. Hold on. Let me take that out. Uh oh. Oh, that's, uh. Suckers. I might have a tight one there. There we go. Okay. Sorry. Uh, introduce a dash there. So take off the dash in front of. In front of SSL. There. So dash dash script, SSL, enum ciphers. Now, just this one time. Okay. Um, this is a fairly benign thing. Anyways, all it's doing is, is emulating a TLS handshake with the server. Remember we talked about when we do a handshake with a web server. The first thing that we do is we say we use a public key to send a secret to it, but we also negotiate the ciphers. So when we take a Take a look at the ciphers again. We're still referencing SSL even though it's TLS. If we scroll down, we could see all the different ciphers they support and what versions of TLS they they support as well. So here we see version 1.2. We see RSA with as 128 two 5620. And then if we scroll down we see TLS 1.3 and the different ciphers there. We'll actually take a look later when we take a look at OS hardening um, different ways that we can how we can verify that those are strong cipher suites as well. All right. So map is a is a tool that's used for discovery. You can see what open ports are on a system. You can also find out what versions of that are on them. I think it's actually a pretty interesting tool to use at home. So you can see if anything might have like a port open on it. Um, but the other thing, um, I just want to talk about one more piece on the, on the network is and we didn't talk about this yet yacht is. And we saw this a little bit with the netstat and command is DNS right. So as humans we remember names a lot easier than numbers. And so if you want to go to google.com right google.com is fairly easy to remember rather than their actual IP address. So think of domain domain network services as a system that allows you to be able to take a name and convert it to an IP address, or vice versa. So this is kind of like when you, you know, text somebody or you call somebody. Um, it's taking that name, converting it to a phone number. Except the difference is that DNS is much more flexible. If I want to allow multiple web servers to be able to handle that response, I can have multiple IPS that map to google.com, and it can be different based on where you are as well. Um, but on your, um, VM, a quick way of just kind of using it and seeing it in action is if you type in host google.com, you will get back an IP address for Google, right? And what you can do is you can also kind of mess around with this a little bit more. You can do a host for gmail.com. And you might notice that you get a very similar IP address. Right. And if you do the same thing for drive google.com again you'll probably get something similar. But what's interesting though is if you take that IP address, even though it's for drive google.com, and you copy that and you put it in a browser, you'll notice it doesn't go to Google Drive. It goes to Google, right. And the reason behind this is that with HTTP, when we type in the address bar, the URL that we want to go to, that host is actually put in HTTP header packet. And on the endpoint. That's what determines are you trying to get to YouTube or are you I'm trying to get to Gmail, you're trying to get to Google Drive and so on. So host is a quick way of looking up what that IP address is. And this is a tool that's used often if you're writing any kind of script to figure out the IP, but a way to kind of get a little bit more information. I think we installed Digg. Let me see if I want to find out where is that request going? Who's answering it? I could do a dig on google.com. And what I'll do is I'll actually get the full DNS record for that. So I'll see that I get an A record back. This is the IP address for Google. How long did that query take and then who answered that query. Okay. So just like how we installed a web server, we installed an OpenSSH server. We could also install a DNS server on this VM and have it serve as a DNS server for our own home network. We'll get into this in privacy, but one of the one of the ways you can protect your privacy is to use an alternative DNS server. By default, when you set up your home router. It uses your your ISPs DNS server and by using your ISP's DNS server. Any website you go to visit, your ISP knows about it because you did a lookup to find out what the IP address is. Okay. Does it matter if you're incognito or whatever? Okay. They're able to determine that. So we'll take a look at when we get to privacy on how to protect that. Um, but this is some of the fundamentals of networks, some of the ways that we can attack it. We're going to continue on with this on Thursday, but I'll post the slides from today. Please practice some of those commands, run through them. Experiment with them except for nmap okay. Only use nmap on your local machine or devices in your network. Okay. All right. And I'll see you all Thursday. Oh my God. Hi. Hi. How are you doing? Good. Good. Yeah. Yeah. So. Um. Yeah. Yeah. I'm. Not sure. Because. That's the one thing. You. Want. To generate. Yeah. Yeah. Yeah. Yeah. So you're talking about using your own. Yeah. So that helps. Yeah. Yeah. So. I think. You have a question? Yeah. You too. Hi. Hi. So, uh.
