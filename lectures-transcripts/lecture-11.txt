UNKNOWN
Mm. All right. Um, so I want to do the exam review, uh, today. But we do need to cover a few things with, um, with OS hardening that we didn't get to, and then, uh, just touch on some things with malware and viruses and whatnot. So, um, so if you, you might want to have your VM, you probably should have your VM up and running for this, uh, because we're going to do a bunch of different things, uh, with your VM. Um, but anyways, um, when we take a look at OS hardening, uh, we took a look at how we can apply different permissions, what kind of effect to have on files and directories and whatnot. Um, one of the first things you could do, though, to harden your system and the industry is getting a little bit better at this and forcing users to change these things, but it's really the change of default account or default configuration. So if you were to buy, you know, router from the store and typically you have like an admin password to be able to configure it. Um, even with the Raspberry Pi, for the longest time the default user account was raspberry and the password was pi. So if you're actually to plug one of those into the internet and allow people to SSH into it, learning, um, they might be able to, uh, they might be able to get into it. So. But anyways, um, we're going to take a look at today is just some ways that we can harden, uh, the system. And one of the easy ways to do that is, uh, really to. Just kind of lock it down a little bit. Um, and so. One of the things I asked you to install, and I'm not sure if I did this in my new VM. Uh, is OpenSSH. I'm going to make sure I got mine installed. You should already o ssh d s d. Oh. Maybe we just have to search. Ah, okay. I actually thought that would require the actual SSH server. There we go. Okay. Um, anyways, you should have done this already. And so the idea behind this then is that I can then ssh into. My server. Right. Remember this fingerprint? We got this before to verify the authenticity and and whatnot. And so, um, one of the things that we can do, uh, with ssh doh is we can lock that down, secure it a little bit more, because by default it allows anybody to be able to SSH into the server. Okay. Um, so the first thing that I'm going to do and uh, you may or may not have this, uh, on your laptop, um, depending on your operating system, is we're going to use a tool called SSH key. Again, if you don't have this available on your laptop, you can run this. Um, you can also run this, uh, within your VM. Okay. So so ssh key again and again. You can run this on either your laptop or on the VM will generate a public private key pair. Okay. So remember how we talked about public private key pair with asymmetric keys. Similar idea here. We're generating a public private key pair. And the idea is we want to be able to log in to our server not using a password because passwords are fairly easy to crack. But using an actual key. Okay, so this is asking me, hey, where do you want to save this key? I'm going to go ahead and hit enter. Oh no I'm not going to overwrite that. I'm going to enter a new file name. So I'm going to do a tilde ssh. And I'll call this temp. And that's gonna ask me for a passphrase. Typically we want to protect this key with the passphrase. I'm going to omit that for now. Oh okay. Let me try this again. I really don't want to overwrite my key. All right. So I'm going to do I'm just going to generate here enter file. And we should save the key. That's why it did though. Hold on. Uh. You know what? I'm just going to overwrite it. All right. I'm just going to do that. I'm going to override it. Hit enter and hit. Hit enter again. Okay. And so this is going to generate a random key, uh, that I can then use to authenticate into the system. Okay. And, um, if you've done anything with git, you've probably worked with keys to be able to log in to like GitHub or whatnot. Um, but now that I have that, what I want to do is I want to copy my public key over to the server. There's a couple of ways to do that. The one way is you can actually cut out that file and actually manually paste it over there. Uh, but a better way of doing that is to use SSH copy ID. And I'm going to say where am I going to copy my ID two. Let me say CommSec local. Oh, I got ssh into it. Um, so here, this is actually pretty good, right? Remember we had that. SSH. Um, signature. Uh. That failed. Um, so this is because it's saying I might be getting man in the middle, and there's that known host there. I'm going to tweak that. I'm going to go to line 121. You probably don't need to do all that, but I'm having to do that because of I had to rebuild the VM. Okay. And then now I should be able to copy the key. There we go. So it says, um, here's a fingerprint of the server. Are you sure you want to continue connecting? I'm going to type in. Yes. And now it's going to ask me for my password. Okay. It's going to try to install my new key, my new SSH key that I've generated. And now it copied that key successfully over. And I can verify that I can actually go on the server. And within SSH directory, if I were to print out my authorized keys, I'm going to see that one that I just copied. And buddy is the name of my machine. Okay. That's my workstation here. So that is the public key that I copied over. Okay. And what's nice about this is when I go to log on to the machine to my VM, I actually don't have to type in a password anymore. And go up there. Come on. There we go. I should not have to enter at that one. And then boom, I'm in right now. I may look at this, say, wait a second, you need to type in a password. How is that more secure? Well, we already know that people use insecure passwords, right? And so if I could figure out the username of somebody, which if you take a look at email addresses, you can typically figure out the email address or the username of somebody. You can start trying some different passwords and whatnot. Um, using SSH key authentication, which I just did. Here is a more secure way of authenticating the user. Okay. Um, the other advantage to it, though, as you can just see, is it provides some level of automation to. So you could actually write a script that would SSH to the server and then actually perform some sort of task for you. Okay. So it's a way of automating that. Now what I want to do is because this is a more secure way of logging in, I want to have this be the only way that you could log in? So I want to force users to have to use SSH key authentication. So what we're going to do is we're going to tweak the SSH configuration just a little bit to kind of lock it down a little bit. And this is something that you will also do uh in part uh for your assignment. So. So whenever we take a look at system configuration files they're typically located in the slash Etsi directory okay. And as you would expect their system configuration files. So we actually need to be system users. Or we have to be the root user to be able to modify those. Um, so if I take a look around you're going to see a bunch of different if I just do an L last, you're going to see a bunch of different directories and whatnot. Uh, things we can configure. Uh, we're going to eventually get to, um, configuring Apache two, I think. Yeah, I did install Apache two there. Uh, but you're going to see in there. Within the SSH directory. Hold on. Yes. Yeah. Yes. If I go into ssh you're going to see ssh config. And then ssh config. SSH config is for me connecting from the server somewhere else I'm ssh to somewhere else. SSH is going to be for the actual um for the actual server. So if you're to open up that. You'll see a bunch of different configuration information in here. So you'll be able to see like the different ports that you can run the server off of. Um, actually in fact this is including the directory. Hold on. Oh wait. Hold on. See Think that D. Yeah. Okay. Yeah. Typically you want to make your changes to a separate file. But we're going to actually do it just right in the file here. Okay. Um so here you'll see that include there. So if you want to include like a different configuration you could do that. But here we're just going to modify it directly. So um we could modify the default default port that SSH runs on which is port 22. Um but we're just going to leave that as be. We can modify the default host keys and whatnot. Uh, but what I'm going to look for is under this authentication section. Um, you see this permit route login by default. You never want to allow somebody to be able to log into your server using the root user account remotely. Never. Okay. Um, so by default we're going to disable that. So I'm going to uncomment this. Actually I'm going to You do a sudo? Okay, I'm gonna search for root, and I'm going to disable this. Okay. So I'm not going to do prohibit password. You just can't do it. You need to have a valid user account to be able to log in as root. Okay. So I'm going to change that. And then I'm going to search for password authentication. And there it says yes. And I want to change that to no. And so what I'm going to do is I'm going to force us to have to use a key. Okay. So you can't use password authentication. You have to use a key. And the other thing I want to make sure is that nobody makes although your password policy should make sure this nobody, um, allows an empty password okay. Like when they create their account. So you have to have a password. So this SSH configuration is not a password policy configuration. But these two things alone can help lock down our server a little bit more. Okay. And we're going to get into how we can even do it a little bit beyond this. So I'm going to write those changes out. And uh right now those changes have not taken uh, they did not take effect yet. We need to restart the service. What's the command I can use to restart the service? You'll see this on Thursday. Systemctl. Yeah. Get familiar with it. Right. Sudo systemctl restart. SSHd. SSH. It should be called ssh. I'm not sure why. All right, but anyway. So now that I have that, what I'm going to try to do is I'm just going to try to log in as Sophy because. Sophie did not copy their key. So I'm going to do Sophie at local. I'm just going to ask for a fingerprint. I'm going to say yes. Uh. Permission denied. Okay, so we can't log into it because we don't have that. I'm logging in as Sophie now. As myself. Right. I can't log in because, um, we don't allow password. Okay. But if I do it as myself. Oh. Well, we did the. We did the copy, right? We did the copy. Mm. Hold on. Let me see. What what happened here? Sudo. I don't think I got rid of that password authentication now. I'm just going to block change that really quick. I should have worked. That's where we copied that key over. Oh, geez. I was still logged on the server, that's why. Okay. That's why. All right, so let me clear that out. Like I can I mixed up where I was at. I'm going to enable those settings. I'm going to restart ssh. That's why because I was actually still on the server. Okay. So now if I do this I should be able to get in. I got in with my key. If I clear that out and now I do. Sophie. It should fail because we don't have a key. Right. And that's what we want. We don't want a lot of them to be able to enter a password, because it would be able to eventually guess it. Now, as you looked in that file, you probably noticed some settings. You can and you will do this as part of the assignment. You can change how many, uh, tries that they have. Um, so that is something that you can do. Okay. All right. Any questions on SSH key or strong or form block root access. Okay. Don't allow, um, uh, password authentication. There is a chicken and egg problem here, though. You do need to make sure that they have the ability to transfer their key. Okay. In order for them to be able to log in. Uh, but you can have a system admin do that. Okay. All right. So let's take a look at how we can further lock this down. So um, so we harden ssh ssh a little bit better now. Uh, what we could do is we can also enable a stronger form of security. So there's something called, uh, Pam, which will give us a little bit more security I'm going to go into. Yeah. Let's see Pam d and then ssh d. Okay. All right. So here. Oh this already. No, it's not there. Okay. So what I want to be able to do is I want to be able to lock down our system even further. And I don't want to allow anybody to be able to ssh into the server, um, whether they have an account or not. So I actually want to lock it down to only where certain accounts can SSH into the server. And so what you could do is within this Pam D configuration is you'll see this um uncommon edit and edit security access. Um I'm going to go ahead and do that. And so what this is going to require is that user to be explicitly defined in access control. So this is like a way of further locking it down. Um, now, if you have if you're an organization that uses something like Ldap or Active Directory, some policies will allow any user with an organization to log into a server because it's using Active Directory or Ldap to be able to authenticate the user. Um, and it might auto provision account. This allows you to restrict it to only be um, a certain number of people. So that's within, uh, Pam. But where you can make that change is and again this has to be a pseudo is within security access and within there. There's a lot of comments on here. But if you just hit capital G to jump to the bottom, pretty much what I want to do is I want to allow the user, Brian Krupp, to be able to log in from any, uh, source, Any source computer. Source IP address. Okay. And we'll actually look at how we can lock that down even further. Okay. But I want to allow Brian to be able to log in from anywhere. And then otherwise what I want to do is I want to deny everybody else from anywhere. Okay. So the way that we configured this is essentially when you do any kind of access control, you want to follow this, this policy of being specific about who you allow instead of trying to list everything that you want to block. Okay. Because otherwise you'll have a really long configuration file. So that will allow me to make sure that only Brian can SSH into the server and nobody else. Okay. So you can explicitly list those accounts from there. And of course, we could, um, test this out um, by using that SoFi account again. But of course, Sophie wouldn't be able to access anyways because Sophie's not listed does not have a public key. Um, but you do want to make sure that that one account can still log in and we're able to verify it. Let me actually go back and I'll make a change to remove Brian from that. And the hashtags a comment in here and I'm going to do a sudo systemctl restart ssh just to be sure. And now I'm going to go back and I'm going to exit. It won't kill an existing session. And you see connection closed right. So now I can even get in because I admitted myself from that entry. Okay. Um. All right. So that's another way that you can lock down the system is by, uh, enabling Pam and, uh, specifying who can log in and access A better way we can even lock this down even further is to specify a specific host that could log in to the server. Okay. Specific source IP addresses. And as you can imagine, like certainly like if you were to allow remote access into a system, you shouldn't allow any IP address anywhere in the world to be able to access it. So that change is in another Etsi file. If you notice a theme here and it's a host dot allow file okay. So host allow you'll see host deny there as well. And within that host dot allow. Um. Oh hello. Where am I at. Lost my cursor. Okay. Uh, within that host I'll allow here uh, here we can specify well which host should we allow. Um, so what I'm going to do is I'm going to check. Actually, let me go back. I'm going back. I'm going to do w. Oh, no, it's not going to. I'm going to do it last. Um, the last command will show who logged in last and from where. I just want to see what the source IP is if it shows it. Okay. So this is the IP address here that I want to include in the file, just to make sure that it's only me that can log in. Okay. Just kind of show this example. So um so I'm going to make sure that only from that IP address can somebody log in. So I'm going to edit that host that allow file. And within that you'll kind of notice some different examples that it provides. So let's say all and uh, you know based off the IP address where they can log in from. And uh, with this all all we're not specifying a user here because we actually did that in access. We're just saying from what IPS can they log in from. So I'm going to do all And then I'm going to specify the IP address. There it is ten 2115522221I think that was that right. Let me see. Yeah 10.211211. Okay. And you can actually leave. So if you want to permit anybody from 10.211 you can do that and just do a star at the end. And that should make sure that anybody can log in to the to the server from that IP address. But this are a long list. And so we will list we can list what IP addresses we allow here. And it's good to add a comment on there when you do add them. But the other one is to deny. And within here it goes. Here's the paranoid right. Um, here. We want to make sure that we deny anybody else. So the way that it works is that, well, first take a look at that allow list and say, does somebody match this? And if they do, it will permit them. Otherwise it defaults to this deny. And again we could test this out. So if I try to log in. Oh it's thinking about it. Oh maybe not okay. 21155I think we might need to restart. SSH. 221. Oh. Good catch. I did that intentionally. Uh. All right. So I did 221. Right. So this is 211 good catch. All right. So I'm going to go back change that to one run okay. Well this proved that it works right I'm going to change it to two. One, one. You shouldn't have to restart. SSH once you do this. And now we're logging into the system. Okay. So we're hardening our system on how people can access it. We can update. SSH. Right. Permit, uh, take off the permit. Route login, make a key off. Only we can go into access. Specify explicitly what users can log into the system. Go into host that allow and host that deny and configure what servers can access. Um or what? What systems can access or what IP address can access the server. All right. Any questions on that piece? Okay. All right. So ssh by default we can uh, is default configuration isn't uh, isn't that great. So we can we can tighten it up a little bit. All right. The other system that we have running on here. Is and I think I should be able to access this from the outside. Is Apache and, um, Apache by default is fairly locked down, but there are some improvements that that we can make to it. Um, so by default, if somebody installs Apache, the downside is, um, you get this default page which will tell you that the server is ubuntu. Um, it will tell you a little bit about the versioning of the software. But if you just try to generate like an error, you'll get a little bit more information where you get the actual specific version of Apache. Now why can this be dangerous? Why would we not want to show that we talked about that. Yeah okay. Yeah, that's exactly right. So if there's an exploit for that particular version of the software, we already know what version is. We can run that exploit. We can maybe take over the server. Okay. Um, so there's a couple of things that we can do. Uh, one is, is that and I'm going to go on to the server and I'm going to make a few things here. Typically the source directory for Apache is var w ww. And if I do an HTML and if I do an LZ there I see I got that index HTML. Um I'm going to make this easy on myself. I'm going to remove that and I'm going to create uh VI passwords or I'll call it db config txt. DB username equals MySQL db password equals secure. All right. So I'm just kind of creating a uh. Sorry. Hold on. Come on. Keep the fat fingering stuff. Uh, because I'm in this directory and I think data has permissions to it. No. It's rude. Okay. I'm going to change this really quick. All right. This way I can just kind of create things freely. All right. So I'm going to make, uh, within here. Actually, I'm going to make a directory called config. I'm going to go into config and I'm going to make a db file. And in there I'm going to do username equals MySQL. Password equals store it. And um I'm going to create a very generic page called index.html and just do an H1. Hello to my app. Okay. All right. So now I got that if I were to go back and go here I'm going to see my that's cached. I'm going to see my web page. Right. Okay. Not Nothing's wrong with this, uh, right here, but, uh, any good pen tester, what they'll do is they'll take a look at, like, some common directories. Um, that might be on the server. That could be potentially dangerous. And where do most people store their configuration files? In a directory called conf, right, conf or cfg. Right. Um, and you could do this right from a browser, you could poke around or whatever. So if I were to just try that conf boom I see hey look, there's an index listing of the files that exist on here. Right. This is provided by Apache by default. So if you go into a directory where there's not an index.html file, it will list out the files for you. And this allows a potential attacker to be able to see those files. And they can click on db and they can see that right. That's publicly available. So um, so one of the ways that we can lock Lockdown Apache is to actually not provide this directory listing. Okay, it doesn't get rid of DB existing there, but at least it doesn't allow an attacker to take a look at that directory and see that something's there. So within Apache. Where do you think the. Actually no. Let me do this on the server. Where do you think the Apache configuration file is? What directory? On the server. Slash. Etsy. Etsy. Right. So all of our system configuration we have as slash Etsy slash host allows slash Etsy slash security slash access. We got the same thing. So if I go into Etsy you'll see Apache two in there. And the way that the configuration for Apache is Patches is broken out. You're going to see this conf available conf enable mods available. Mods enabled. Sites available. Sites enabled. Okay, um, I'm going to go into sites enable and if I take a look there and that 000 default if this is the default configuration, uh for our website and we'll see a server admin, a document route, uh, in there. So for our site specifically and with Apache it supports virtual hosting. We can make changes in here okay. So um, with a patch you can hold, you can host multiple websites, but I actually don't want to make the changes there. I want to make them system wide. So in the base directory I see Apache you'll see Apache 2.com okay. So I'm going to go in there I'm going to make my changes there. And within there you'll see these directory configurations. There's a lot of comments in here. They're really there to help you out. Let me keep going down. There's a time out there I keep alive. Keep going down. I really want to do a search, but there's a pause. There we go. Okay, so here it's saying, look, when somebody accesses the root directory, um, we have an option. False. Uh, symlinks, uh, allow override. None. And if I keep going down notice this here options indexes. That's on that var w WW directory. I want to take that out okay. I don't want anybody to provide an index uh for that directory. And so I'm going to change that. And then what I'm going to do is I'm going to restart Apache. And once I restart a patch, if I go back here and I refresh, I get a forbidden. We're not going to list the directory contents. We don't want to do that by default. Okay, so now I get it forbidden on there. So let's lock down a little bit further. Now there's still an issue though when I take a look at this, I still see that version number here. And I don't want that to show. And so what I can do is I can create a custom error message and you'll see this like on websites you go to, I might go like, uh oh, you know, you hit an error or something like that. So within my var ww directory again. I'll just do var w WW. Yeah I'm going to create um I'll go into HTML. I'm going to create an error dot HTML, and I'm just going to keep it pretty generic. I'm just going to do like an H1. Uh oh. There was an error. So anytime we provide error messages to the user, we want to provide them something that's informative. But we don't want to provide too much to where they can use it to potentially attack the server. And then so once I make that change, I'm going to go back into Apache. And I don't think it has it by default. No it doesn't. Okay. Um, what I want to do is I want to provide an error document that says, look, if we hit a 404, go to error dot HTML, uh, or if I hit a 401, go to error dot HTML or 500. Right. So I'm going to send a user to that specific directory. If they hit an error. Okay. I'm going to restart Apache two. And then now if I go here. Oh no no. What happened. That should have worked. That's not cache. That's a four. Oh, it might be. 403. There we go. Okay, that was a 403 that was coming back. So 403 forbidden. So is there 401 unauthorized. Four. Three forbidden. So now there's some more generic error message. Right. And I could include some more specific information to the user saying, hey, you're not allowed to access this. But what I'm omitting now, though, is I'm omitting that version of the software. So they can't use that as an exploit. They would have to use a map to scan it. Um, in order to get some more information. So again, by default, sshd we can improve, uh, Apache. We can improve. What you want to do is whenever you're installing some software, like on a server, you want to take a look at where the best practices of, of locking it down. And we can go further with Apache. But this is just a kind of a way to see how we can lock it down. All right. Any questions about Apache Sage? No. All right. The other thing that we always kind of want to keep an eye on is we, um, so we took a look at how we can lock down, um, how we could lock down the services and whatnot. The other thing we always have to keep an eye on is logging and auditing a server. Um, so there's a popular tool out there. There's a log aggregator tool out there called Splunk. Okay. Um, and what Splunk does. And we're not going to install we're not going to use it. I'm going to show you how we can take a look at the logs. What Splunk does is it pulls logs from, uh, different services, different servers, brings them together to where you could have a NOC, um, or a security professional, like, keep an eye on, um, what's happening across all the different systems, and they can do queries and whatnot. Okay. Um, so we can do that. Uh, on the server itself, we don't need to install, uh, Splunk or anything like that. Um, but, uh, within system, within system D, uh, there's an actual command that we can that we can use. So if I wanted to see what's going on with a particular service, uh, I can do a journal CTL, uh, dash u and then the name of that service. And so here let me just kind of show that command again. I'm just doing a journal CTL and you for unit and then SSH. And what that's going to do is show all the logs for SSH. And as you imagine there's quite a bit. Right. So if I jump down to the bottom I can see access denied for a particular user. Right. And there it is. There's that crop. And because they're coming from an IP address. So if you want to see if somebody is trying to log into your server, you could do that. There's a tale you can tell the log two or you can follow the log. It's going to sound kind of bad the way the flag works, but um, you just prefix it with an F, um, and that will follow the log. And then so what you could do then is I'm going to jump over to here, and I'm going to log in to the server on my laptop and you'll see that log entry pop up. Right. So Well. See, I popped up there, so it says. Accepted a public key for Brian Krupp. Uh, here's our IP address. The source port. Um, and then it created a session. So. So you want to keep an eye on the logs for failures and things like that? Journal CTL is definitely one that you can use to do that. You can also use that with Apache as well. So if I did you Apache two I can monitor the logs which are CTL. And you can see when the service started stopped and so on. So Journal CTL is a popular tool for that. But all the journal CTL really does, it just brings together all the different logs uh, on the system. Uh, you can also take a look at some of them manually instead of using journal CTL. So if I were to do a tail on var log and that's where you see a lot of these logs in, you even see like the Apache logs in here too. There's an error log. Um, but there's an auth log on here. And if I tell that that's exactly what we saw in journal CTL. And just like how I can follow it with journal CTL, I can follow it here using a tail dash F. And then if I go to my laptop I'm going to exit out of my current session. That should pop up an entry. There it is. And then I can ssh into it and you'll see another entry pop up here. Okay. So if you're troubleshooting the server and seeing if somebody could log in using that tail, F is a common way of, of doing that. Um, but that's just kind of like another way of, of monitoring the logs. The other thing again, is, uh, you can also monitor Apache. Apache. You do need to be. The, um, you do need a sudo, though. And so here I'm doing that tail dash f um, and there we see that log message when we try to list the index. Uh, but if I were to try to access something on the server, like something that will produce a 404 and it should pop up, uh, didn't pop up here, but anyways, uh, you can use that to also monitor the error logs within Apache. So any kind of logging on the server is in a file. Okay. There's different ways you can monitor it. You can use a tail command. You can actually look at it or you can use journal CTL. Both work okay. All right. The other thing uh, outside of the logs and you all know this is, uh, you should periodically scan your server. What can we use a scan or server, see if there's anything running. Come on. Somebody said, you guys use this tool. What's it called to scan for any open ports and map, right. You can use nmap to scan a server. Right. Um, and remember we can use the dash s v to be able to take a look at, um, if there's any ports or anything like that. Um, one of the things that you're going to do in your assignment, though, is you're going to scan something else. Right. We kind of talked about this. Now I'm just going to do the lighter version, uh, here. Uh, but there is uh within nmap they actually have a server you can scan. Like I said I'm going to do the lighter version here. Um, but I'm just going to do an nmap scan me dot map and map.org and that will. Oh. It's because I got the new server. Okay. You guys already have this installed. So I'm going to scan a map and I can see all the different ports that they have open. Right. We should periodically do this to our own server just to make sure that there's nothing new that's up and running. Okay. You're going to do something a little bit different on yours though. Okay. All right. Um, one other thing I want to take a look at with hardening, our server is setting up a local firewall. Uh, and so this you will also do for your homework. So you may want to run this on your, uh, server. You want to install UFW. And as you go ahead and you install that. I'm just going to talk about it a little bit. Um, UFW is short for uncomplicated firewall. Okay. The way to set up a firewall on a Linux server before or a Unix server was using iptables. If you've worked on Linux before you worked with iptables, it could be a little confusing. So uncomplicated. Firewall does exactly what the name implies. It tries to make it uncomplicated. Um. Now, certainly you don't want to rely on this only as your firewall solution. You want to have some other, um, within an organization you actually want to have, like a hardware device. But it's also good to actually have a host based firewall as well. And some of you already have these on your laptops, right. Like Microsoft Defender and things like that. Um, so anyways, if you go ahead and you install UFW, oh, it's already on there. Uh, was it already on yours? Yeah. Okay, good. Can I ask you all installed that I can't remember. No. Okay. Um, so to configure UFW, it's really easy. Um, so what I'm going to do is I'm going to set up some rules. I think by default, UFW is not enabled. Uh, but for our server I want to allow SSH. And so we see a rule that's updated. I want to allow http. We see that URLs updated and I want to allow http s okay. And we see a rules updated. Now you might be wondering why we have to do http and Https separately. Keep in mind those run on two different ports. HP is on port 80. Https is by default on port 443. And then if I want to enable the firewall I just do a pseudo UFW enable. And that will actually enable the firewall. Okay. And if I take a look at the status. I can see the status. And it will show me all the different ports it has enabled. When you see that v6 that's IP version six and where it's coming from. Now just to be clear, this does not take over. Um, the, the changes we have and, uh, access. Okay, so if we only allow specific IP and access that will be enforced. But this is purely going to determine whether or not we even get to that access account. So if somebody is trying to log in via SSH and we actually block that IP address, um, we wouldn't actually get to a point where we need access. So that firewall is going to kind of be like the first step. So we have these different layers. What do we call that term defense. Defense in depth right. We want to have multiple layers of security. So um, so we can uh we can check the status like that if we wanted to delete a role. So let's say I want to maybe get rid of one of these rules. I don't want to allow IP version six for whatever. Um, an easy way of, of tweaking these rules is if you were to do, uh, a UFW number. Oh, yeah. Sudo. Sorry. That will list out the rules and numbers. And you might be wondering why do we want to do that? It just makes it a little bit easier to delete. So let's say I want to get rid of that 443 rule that rule number six. I could do a pseudo UFW delete and then the number six that will get rid of that rule. And now you can't access uh, four for three with uh IP version six. Okay. So by numbering them, it just makes it a little bit easier to, to actually delete them. Now, one thing that will, uh, uh, that will happen on a server is, depending on how you have it locked down, um, you might have some people that are trying to poke at it and see what exists and whatnot. and as an administrator, it can be a little bit hard to kind of keep up with. Oh, I keep seeing these requests come from this specific IP. I want to block them and and so on. Um, you'll also have people that, uh, scan your website. So a popular thing that people will look for is WP login, which is for WordPress. Uh, WordPress is always in the news for having a vulnerability. And so some things you can do, like in Apache, like a fun trick to do is actually like redirect that, um, request like a torrent or like a four gigabyte download or something like that. Um, I know it seems kind of cynical or not, but, um, not not cynical, but, um, kind of nasty to do that, but, um, but in some ways you kind of have to have some countermeasures and that's kind of safe. But, uh, but there's a popular, uh, utility out there, uh, called fail to ban. And, uh, I'll post a link to it if anybody wants to, uh, take a look at it. Um, but what it does is it kind of kind of automates some of that blocking for you. So if you want to connect via SSH and you keep having people that are trying to, you know, poke into the server, what failed to ban will do is it will notice those failures, and then it will actually, um, ban, uh, that you can set up different rules. It will ban that source IP from trying to log in. Okay. So it's just like another way of trying to, um, like secure your system. So I'll post a link to that. I want to ask you about that like on the exam or anything like that. But it is a it is a useful utility. One of the things I noticed, um, I had a server that I had and I think I mentioned this earlier in class, uh, that you could access into remotely. One of the first things I noticed was all these IPS from other countries trying to log in to the server. So, um, so anyway, so, uh, I'll post a link, uh, post a link to that. So this week I take a look at that, but. All right. So, um, some other, uh, OS security areas. Uh, we already took a look at, uh, firewall, but there are some things built into your operating system that kind of helped harden it. Uh, one is called DAP Data Execution Prevention. The idea behind this is that you don't execute code that is in the context segment in memory. So, uh, this used to be a way of attacking a system that an attacker would load something into a buffer and then get the program counter to be able to execute it. Uh, another security, uh, way of securing the system, and this is usually automatically enabled on systems is ashlar address based layout randomization. The idea is that when you load a program into memory, you don't load it in the same spot consistently. So you kind of load it in a different area so that this way somebody can't do like a reflection, uh, attack on it as well. Uh, and then you, uh, the OS file, which we already looked at with UFW, and then there's some automated services like fail to ban. Okay. So those are some different ways of also hardening the system. But again the key thing is lock down the authentication. Take a look at best practices for any of the services you have running on there. Periodically scan to make sure that you have some way of viewing the logs. All right. So like I said we are going to talk a little bit about malware and that. But we're not going to spend too much time on this because I don't want us to download a virus and install it, um, on our machine. So, uh, but malware comes in several different categories. You've probably heard of viruses, but there is something called a Trojan horse. Um, which you kind of mask something as being, you know, something legit to get into a system, uh, worms and things like that and more. Um, with viruses, there was a really popular one called WannaCry. Um, you can read about this. I'm not going to ask you about it on the exam, but it's a ransomware attack. These are the ones you're seeing more common now. So, uh, somebody might lock up your machine or maybe think you make you think your machine's locked up. Then ask you to send some bitcoin or gift cards or something like that to a different, um, some destination transfer it. Um, I did include a link on there if you do want to take a look at it. What's interesting was, um, the person that there was a kill switch, and there's often a kill switch with these. The person that discovered the kill switch for want to Cry, um, was like a hero until they found out that they were actually selling, like, Trojan malware. So this person was actually doing some bad stuff, too. So, uh, so I included a link on there if you want it, if you want to take a look at it. But, um, but you can do this fairly easy if you want to send a virus again, like a USB stick, email, things like that. Um, unfortunately, it happens all the time. You can embed it within software, um, even within dependencies as well. Um, and the idea behind these, whether called viruses, is they self replicate just like a virus would. Right. Trojan horse is another type of malware. The idea behind this is you make it look legitimate. So you might have something like, um, you know, like a Microsoft word download or a movie or something like that. Um, sometimes they'll have like a backdoor that they open, so they might open a port to receive commands from somebody, um, and do something on your computer. So, uh, but the idea again, behind that is just really just to make it look, uh, legitimate. Uh, spyware. I can make an argument that a lot of your mobile apps today are spyware. Um, a lot of your social media applications do, uh, a lot of, um, tracking of you. Um, and so, but there is, uh, actual, like, criminal spyware, uh, that might, like, watch you through a webcam or like, a keylogger. So, uh, detect when you type, uh, you know, capturing all the keys that you type on your keyboard. Uh, there I did see some interesting research, too, that showed, um, it was a sensing, uh, conference where they actually detect the vibrations on the table, and they can figure out what keys are pressing. Which I thought was pretty cool. Scary. But cool. Um, but anyway, so SPI was just a little bit different, so it's like misuse and permissions, things like that. Um, how many people heard of the recall feature on Microsoft? It's got some backlash. Yeah. What was the issue with it? It was strange. Yeah. That's right. It was essentially monitoring your. Your what? Your activity. Right. And it had no protection on it. So, um, so they definitely got some pushback on that. Um, I'm not like, uh, I don't want you to think like I'm an Apple fanboy or something like that. Like, preferably I would actually have, like, a Linux desktop. Um, I use Apple out of convenience, and then I like to develop iOS apps. But I do feel that they're mainstream operating systems like windows and even Apple are Apple is starting to get a little bit into this, I think. Lately they've been talking about serving ads on the maps app. Like, they don't have enough money, but they're starting to kind of get into not being operating systems, but being another way to advertise to you. So, um, even Jeep, I think Jeep just got under fire for this. They were showing ads within their dashboard. Um, yeah. So, uh, but anyway, so, um, so when we think about spyware, it could be used criminally, but it could also be used to track you, like with legitimate apps as well. Okay. All right. Um, who completed the short survey? And by. All right. What was wrong? Oh, I got a thumbs down. What was wrong with that email? Yeah, it's a phishing attack, right? It's a phishing attack. Um, I'm only going to do one more thing to y'all. So if you didn't complete the survey, um. That's okay. There actually wasn't a survey. Um, but quite a few people did complete the survey. Don't worry, I did not log. I don't say the password. In fact, some people, I think last semester they put some nasty lot of people complete the survey. Um, but anyways, uh, let me just kind of point out a couple of things with that. So this gets into the next topic of phishing. Um, and if you complete it, don't worry about like look like it, it looks somewhat legit, right? Um, but if you go to CAS lab, edu 344 I send an email this morning. Um, this is in case of single sign on page. I just stole it, and it's really easy to do that. Um, all it is, is HTML, right? So I just saved the HTML, and I had to make some changes to it, but it looks like cases website, doesn't it? And this is how easy it is, right. You can do the same thing for like Chase Online Banking. Um, I can get that same login form. All it is, is HTML. And so if it shows in a browser I can do something like this. I can even do an advertisement on there. Right? And all I got to do is get a domain that looks like Chase, right? And so people are getting really clever with this or using some characters that aren't Ascii characters. So you could do that too. But but anyways, um, this looks like, you know, a legit, I guess you could say legit, um, website. Right? And go ahead and go log in with test and type in some password, hit log in and then oh no, you've been fixed. Now what I could really do is I could log that username. Password. Right. Redirect you to canvas to make you think you log in. You then have to log in again. Think something at work. And I can use those credentials to do something nasty. Right. I did not save your credentials unless you decide to type in your password. Your username field. Okay, I will clear it out. But anyways, um, what did you notice in the email though? That kind of kind of set it off to that. This might be a phishing attack. Yeah. You said urgent. Like several times urgent. Gotta do this now, right? Gotta do this now. Anything else? Yeah. Professor gray. Yeah. You know, that's kind of like a little bit of a joke, though. I get a lot of people that will, like, write me an email saying, Brian, I don't know if I should take it as a compliment or whatnot, but yeah, I never saw my emails like that either. Right. So, uh, but anytime you see urgente, anytime you see something like brain, I was actually going to use like a different email address to send it to you all, but you want to check the domain two. But anytime you kind of say you got to do this now hurry up. Um, they actually kind of set off an alarm with you as well. Now that was just more like for fun. But phishing can be used as a way to deliver. Malware can be used as a way of stealing credentials. And spear phishing is just a variant of it where you target a particular individual in an organization. So maybe like a CIO or the head of it. Uh, and we took a look at this using like the who is, uh, service, uh, to kind of see, um, you know, who might be that particular person or LinkedIn you can use as well. Um, and my own institution, our network was down for about two weeks because somebody fished. Somebody else within it. Like a legit somebody from the outside. Uh, and a virus spread throughout the network. So, um, but anyways, uh, when it comes to that, things you can do, obviously, as you can imagine, installing antivirus software. Do not open attachments from people you don't know. I would even be careful about any. If somebody sends you a program, an email, do not open it. Um, only install software from trusted sources, so make sure you verify it. Uh, any link that says, hey, this is this game for free, you got to be careful about, uh, and then check the domains of any kind of sensors and things like that. And I included some tips on here from CrowdStrike that talks about how you can protect, um, from phishing. Okay. I'm going to do one more thing to you this semester. That's, uh, um, it's different from phishing, but it is safe. Okay. Just for fun. All right. All right. So I will post, this up on canvas. The rest of the time is for any questions you have about the exam on Thursday. Yeah, there is a response, to be sure. Yeah, there's going to be several short answer questions. Um, the questions are really objective. So like it's not going to be like what's your opinion on spearfishing or something like that. Uh, it might be like list out two things that relate to this or three things. When you answer those short answer questions. Be succinct. Don't blabber on about your answers, because what tends to happen is, um, people want to fill the void, and what they'll do is they'll start jotting things down that are incorrect. So you might get the answer right in the first part, and then you might contradict yourself later. So, um, be careful about those questions too. There are no intentional trick questions on the exam. But if I say I'm asking for this and this. Make sure you do both. Okay. I don't want you to lose credit on it. You should be knowledgeable of the basic commands that we covered in class. You should be able to navigate yourself around the Linux system. How to create files, how to create directories, rename files, remove files, all those things. Um, change permissions. Uh, and you should know basically how to, uh, what command you would use for restart services. Maybe you logs or systemctl journal ctl. Um. Say something cool. Um, I'm not going to ask what like give me the OpenSSL command to generate, uh, 2048 asymmetric key. I'm not going to do that. But you should know that we can use OpenSSL to generate, uh, keys to do encryption. Right. You should know that we could use that. So if I do ask like what's what's the program that we use in class to do encryption and whatnot. You should be able to say open SSL. Yeah. We did that. Yeah. So you should know generally like what you can do in Java. But I'm not going to have Java coding questions on there. Good question. You should be comfortable with what you did for the assignment and how you approached it. Okay. So it'll be more like a higher level question, right? So like for example, what is the algorithm that we use to generate a key. You should know. PB m2. I want to ask you to include like the method called to be able to generate that key. Good question. Other question. Yeah I've heard that in the past. You need to like, draw something on the chart. Is that going to happen? Who's telling you? Yes. Who's telling us? Um, that was a disaster. To ask people to draw in the exam. We are not going to do that. Yeah, and look, my drawing is terrible. Okay. I'll be the first one to make. The one thing I drew really good in my life was a bird. But I followed a tutorial through the New York Times, and it's like an oval. Another oval, and then a circle. And you got a bird. But, yeah, there won't be any drawing on it. There might be looking at a drawing, but other questions. Yeah. Okay. Oh, yes. Yeah. Other than the review that's already on canvas. Is there any other review recommended? Uh, definitely review. Uh, the slides I'll post these up there. Um, you I would encourage you. Uh, so the question about OS hardening on the exam, I would encourage you to do that assignment and treat it as like getting the assignment done, but also as a way of studying. Okay. Doing that assignment will help you out. Okay. The OS hardening assignment. Um, the other thing is to do the exam review before. Okay. Remember, you got two shots at that exam review. You can work in groups on it, but everybody has to submit it, but I would do that for it as well. You can review the commands that we did in class. Everything is recorded for echo 360. So some of those things went by a little bit fast. If you go back and review that as well. Other questions. Yeah. Um, is everything up through today's class? Yes. Yep. Everything up until today. You'll have the full time to take the exam. I don't think you'll need it. There'll be two Tas here to help pass out the exams. Because by the time I pass out 150 exams, um, somebody is going to be maybe 20 minutes behind. So other questions. Are you only have questions. I'll stick around and these questions pop up because we've got a little bit of time left, but, uh, otherwise I'll see you on Thursday. Please bring a pencil. Maybe two. Okay, because I won't have any on me. Um, so I have a backup, and, um. That's it. We'll see you on Thursday. I got off stage two. If you want to stop by asking questions. Yeah. Oh, yeah. It has, like, partial traffic. Oh, yeah. No, there is. So, like, if there's, like, um, if I were to say, like, list three things and you only get two out of three, right? Yeah. You get partial profit. Absolutely. Yeah. And all the Tas will follow the same rubric. It's pretty clear cut. Yeah. There won't be Java coding questions like? Like what type of. I mean, it's not like, did you give me the exact line? No, no, it won't be that. It'll be more like about like how you approach the assignment. So, um, why do we have to base? Why do we base64 encode a password before storing in a file forever? Is it okay? Okay. Yeah. Hi. No it's not. It's easier. So that's hard. That's hard for me to say. Um, generally speaking, like I don't make exams especially difficult. I want to make sure you guys know the stuff that we went over in class. Um, I would say the average last semester was probably mid 80s. I never heard of an exam because I don't make them that you need to do that. So as long as you study and you're like in class, many times you will do good. Yeah. I mean, how are you doing? No question. Or just walking out. You want to ask a question? I didn't see the question. I see it. Sorry. Um, okay. One question. Do you have one? Okay. So I. With what? What are you trying to solve? Y x y? Oh, okay. On what? Of your host machine. Oh, boy. What happened? You know what? Yeah. Did you mess up the bootloader? Oh, no. No, no. Oh. Yeah. Yeah, yeah. Yeah. So. I was pretty covered by it. But not everything. Okay. What is that? Some of that is already down. Okay. Um, so I just wanted to ask. Yes. Okay. Yeah. So, um. Oh, for, um, for the VM. Yeah, I really like open stage Apache. 2 or 2 big ones. Net tools is on there. Um, you'll see in the slide though, there's a list on the slide. Yeah, yeah. And if we don't if we use it, it's not uh, just a solid way. So yeah, it was nothing too complex. Yeah. Sorry about that. You ran into that. Yeah. Now I have to say, I don't know, because I had nothing to do with that. Yeah. That's right. Yeah, yeah, yeah. All right. Cool. All right. I'll see you. Hi. Um, how many questions are there? Yeah, there's usually about. This is a rough, rough estimate. About anywhere between 5 to 8. True or false? Maybe about 5 to 8. Multiple choice. Um, several fill in the blank. Maybe like 4 or 5, roughly. Um, a couple of multiple answer questions and maybe about for short answering. It doesn't take you too long to do the exam. Yeah, you won't need the whole time. I just want to make it on paper. Yep. It's on paper. Yep. That's why. Why don't you bring your pencil? Yeah. You can. You can use a pen, but make a mistake. Yeah. Yeah. Hi. It's true. That you have to wait for. What's that? What? Yeah yeah yeah yeah yeah yeah yeah. So you have two tribes? Yes. So if the first one, you get, like, nine out of time. Then you can try it again and then go for ten on that. But it will be and you know it'll be the same one. Yeah. No, the idea behind it help you get ready for it. It's just worth two points. But yeah, it's it's it's a way of helping you review for your exam. Yep. Question. All right. So I had my parents been wanting to do like at the top, okay. Most of us because they know something about it and we know a little bit of freak out. Okay. So initially when react, did you react? Yeah. Yeah. A mobile app. Yes. Okay. Um. That's a good thing. Okay. It's basically a timeline. Okay. But, uh, it's very important to keep in mind that, uh, friends and friends will set up for you to use to challenge each other. Yes. Okay. Yeah. Uh. Stuff like that. Okay. so I don't have. A cup of tea. Okay. Um, so you're trying to tell me. I've been trying to do that. Thank you. Okay. Um, I don't know if that's the. I don't know how you approach that. Which was different, because I don't have much of that. Thank you. Yeah. Yeah. I'm more comfortable with, um, doing native app development. So, like, I like with iOS, I would use with SwiftUI. Um, and if it were Android and maybe Jetpack Compose or just like you. Know, what have you have you learned jetpack? I've been talking about it just more than I did. Um, no. So it's just it's more of a declarative way of building your view As opposed to an imperative approach. So, um, so basically. So like in like an analogy would be in building iOS apps. UIKit was what you used before SwiftUI. And so with UIKit, like you had to say like, all right, what happens is when this user taps on this button, right? You had a manual describe like stuff where SwiftUI is becoming more declarative, saying this is essentially what I want to happen. You figure out how to do that. Not exactly like that. You still have to describe some of the steps. Um, but you just kind of like that. Right. So you don't have to, like, get it to the render show. And so once you do that, do you put means one by one to another? You can. Yeah. Um, well, you're, you're gonna be writing two separate apps, so it's not going to be writing like, for like one and then, you know, um, something right there. Yeah. Yeah. That's right. Yeah. It's not like a friendly bakery, you know. That way. Yeah, yeah, yeah. So pretty much what I've done is native development because, um, my experience with doing tools that will do cross-platform is that, um, when it comes time to debug them, you're going through, like, another layer of abstraction. It's a lot harder. Um, but the other thing is you kind of get away sometimes you can get away from that native look and feel. And so like when we think about the feasibility, I want to take advantage of, like the platform to the fullest. And some of those tools are like, yeah. Right. Um, so like what I'll typically do is follow the actual style guidelines. So like both Apple and both Google have their own design guidelines for Android and iOS apps. Um, and just follow those guidelines to build something that is similar to the other application, but has essentially the same kind of controls and looks and feel that these are for Android devices, as expected. Thank you. Yeah, I'm not sure if that helps, but. It's been a lot of questions, but yeah, sure. Okay. Again, nothing on the test or. Yeah. Yeah. I would just, you know, go over the topics, do the homework, do both homework before the exam. Um, and you should do, uh, some of those things. Thank you. Yeah.
