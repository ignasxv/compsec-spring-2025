UNKNOWN
I like to travel like ten years, 11 new teams or just fun. So cool. It's my way to stay connected to it. Yeah, I coached my kids teams for a while and I did my time and then said, yeah, your parents are, you know, your parents are very vocal. No, I'm the youngest, actually. So my parents, like, are used to me and my sister and having my brother having whatever he had. So like they, they'd come to my coaching games just for something to do. Yeah. You know, or whatever. So. Oh, it's not my parents, it's the other kids. Parents. Oh, yeah. That's right. I get you, some of them are too much for sure, but yeah, coach soccer for a long time. And then he had, like, his kids travel. He had to break up a fight and said the parents, like I said, I had to be a little too involved in some parenting politics where, like, some parents don't want this kid on the team to play for their own kids, and it's horrible stuff. But like, yeah, yeah, there's some of that. Unfortunately, it's the downside of it. I'm sure the kids appreciate that. Oh, yeah. It's fine. It's good. It's all right. So whenever you guys ready? You guys want to do your pitch? Sounds good. All right. Hi, everyone. Just really quickly, if you can mind giving us a second of your time. I'm Adam, I'm an outreach lead for a collaborative coding club here at case. I'm Jeremy, I'm the vice president of the collaborative coding club. Um, there's Shayla walking in. She can introduce herself in a second, but, um. Oh, good. So, yeah. So basically, um, we have our info session tomorrow, 4 to 5 p.m. at, uh, North. 356. Basically, the premise of the club is that if you show up and you have a project idea that you want to work with other people on throughout the semester, come and pitch it. We also have other project proposals that we've already been working on, and we already have thought of that. We will be pitching to you guys. So if anything interests you, if you want to build your resume, gain more experience, connect yourself within the computer science field. Here at Case, feel free to show up. We have export credit. If anyone's a freshman here and we'll be catering chick fil A, we have like 800 chicken nuggets or something like that, so take advantage. It should be a great opportunity to stop by. Learn about the club. And yeah, if you have any questions. Like I said, I'm Adam. Meet me after class. Yeah. I'm Jeremy, and yeah, you can come see me as well. I'm Kayla, I'm the treasurer for the club. Cool. Thank you guys so much. I got a question. Do you guys do something with your projects at the end of the semester? Great question. So yes. So we work on it throughout the semester. And then the very last day of the semester will be our project presentation day. And basically the idea of that is that every team will go up and make a presentation and present to literally every single member in the club, as well as anybody who else wants to attend. So Professor Krupp was there last time just witnessing for a little bit of it. So we've had professors there to be able to network with and see our projects, and that's just a great way for everyone to celebrate the work we've put in throughout the semester. You'll be able the goals that you've hit, the goals that you want to accomplish in the future. Um, we'll have catered food there as well. Um, and it's really just a great way to meet people in computer science. your case and work hard, put it on your resume and all that stuff. So yeah, that sounds wonderful, but would you consider not catering to chick fil A? Sure. I mean, yeah, it wasn't my call, but sorry about that. Yeah. Yeah. We've, uh yeah, we've had, uh, Chipotle in the past. Yeah. So it'll be cool. Great. Any other questions? All right. Thank you all. Thank you guys. Thank you guys. Thank you. You got an applause. I don't even get that. Wow. I wish I'd get an applause. Thank you. All right. Thank you. Thank you. Make me feel good. Good. Way to start the weekend with some applause. Right. All right. So. Oh, I forget we got that, professor. I think you did that. I can't, but it's 360 recording, so. Yeah. So it's used for that. Appreciate the tip though. All right, all right. So, um, today what we're going to do is we're going to dive, uh, we're going to continue our discussion into cryptography. Uh, we're going to actually apply it to. So if you have, um, IntelliJ installed, you'll probably want to make sure that you have that up and running, uh, because we'll be using that as well. Um, but let me get into that. And then we also got an assignment, uh, to talk about as well. So. All right. So, um, first thing, first of all, I just want to do a quick review. Uh, before we dive into it. Uh, it is Quiz Thursday, so. But let's do a review first. Good thing to review before the quiz, right? Uh, all right, so, uh, you guys can just kind of shout this out. What type of encryption uses two keys instead of one? A symmetric. Yeah. Just kind of shout out asymmetric uses two keys. What do we call that key? One is called a and the other is a private good. Which one do we share? Yeah. As the name implies. Right. And when we have that private, we want to make sure that we protect it. Right. Because if that private gets out into the wild, that's not a good thing. Right. Then that means that anybody that sends us a message with a public key, if they find that private key, they could decrypt that message, right. All right. Which one is faster symmetric or asymmetric? Oh, I heard a couple different answers. Symmetric. Symmetric I heard asymmetric out there. Um, you might be asked this if you were to work, uh, or if you were to apply to any kind of security engineering role. All right. You might be asked this question. So you definitely want to remember it. Um, remember the answer to it. But but it's not just good to remember the answers more to understand why. So one easy way of kind of thinking about this is, uh, your symmetric key size is typically a lot smaller, right? We can have a symmetric key at 128 bits. Our asymmetric key, the smallest we could really have it is 1024. But we shouldn't even have it that small. The minimum should really be 2048. Okay. So the key size will affect how quickly or the efficiency of that encryption. When our key size grows though, what 210 two things tend to happen. As our key size gets larger, the process of our speed of encrypting something tends to go up or down? Down, right. It's going to take longer, right? So why would we do that? I heard it somewhere. Somebody said more secure. Why is it more secure, though? Because you have two keys and you're talking about three seconds. It's also because a lot of Much. This is just intuition. Like, if I'm looking at a bigger key, that's going to be harder for me to, like secret or just like smaller keys. Yeah. Versus small. So. So let's just focus on the symmetric piece. If I had a one bit key I know you're probably like this is crazy. A one bit key. But let's think about it. If I had one big key, how many different combinations of keys I'd need to try? Just two. Right. If I have a two bit key, we go to four. Right. And as we kind of go on and on, right, it gets larger and larger. Right. So, um, so kind of think of it in that sense. Right. Is that somebody were to try to decrypt the message. The different combinations they would have to try and how expensive that is to actually do that decryption. So. Okay. Encoding is the same as an encryption. No. What's a telltale sign that something might be base64 encoded. Equal signs at the end. Right. So for some padding good, good. Why don't you take a look at, um. Well, no, we already took a look at encoding, But but we'll take a look at how we can also apply it to. All right. Diving into the weeds a little bit. Should we use ECB or GCM. Just shout out GCM. Good ECB if you use that you saw a vulnerability of an image we encrypted using ECB. What was the image. The penguin. Right. Yeah. Tux. So all right des or as a yes. Yeah. Good good good. Uh we don't want to use DDS anymore. It's insecure. Uh, what's more important to protect the private or public? We talked about this. Right? The private right. Can we share the public key? Yes we can. All right. Go ahead and get in to canvas. The quiz today will still be open because people can join the class technically by midnight. I think by midnight tomorrow. Right. Let me make it available 7 a.m., 7 a.m. tomorrow. Okay. Come on. Canvas. Canvas is like. It's Quiz Thursday. We're not doing a quiz today. Come on. All right. Actually, let me do it like this. I need to make it available. I that come up like that. Oh. So I did a Y at the end. Okay. All right, so the quiz. Same format as before. It's just going to be four quick questions on canvas. So just like the same thing that you did with the syllabus. Next week though they will be constrained to a certain window and they will be password protected. And you do need to be here to take it. Okay. Um you guys can read the policy on that. All right. So if you go to modules you go to the bottom. There's a quiz called cryptography. I'll give you all maybe about seven minutes to complete it. It's a five minute auto time. So go ahead and take it. And then I'll wait here. If you have a question, get in. Let me know if you're available. What's that? Available. Literally. Submission details. There's a box. There's an exit. Oh, see? I lied to you all. Hold on. Let me get rid of that. Oh. Sorry. There shouldn't have been an access code on there, but let me remove it. Oh, somebody must have guessed the access code because they're already in. It's pretty good. I don't even remember what it was. All right. You should be open now. Computer security. Someone practice security. Big surprise. Yeah. So we can take advantage of that. Which? One can do it all. Not yet. It's just easier for you to do this on your phone. You're welcome to do that. Yeah. That's the idea. All right. Goodbye. Another minute to complete the quiz, and we're gonna go on to the next topic. Oh. All right, so, um, a couple of quick things. Uh, just to note, I did post that cheat sheet intro to VI up there. So it's a handout. So if you were to take a look at that it'll give you some tips on how to use VI, um, different commands and things like that. Um, I also posted uh, some of the commands that we use for OpenSSL. So how do you do some encoding. How do you do symmetric encryption. Asymmetric. Uh, so this way you can have a reference to always go back to. So sometimes if you go back and watch your echo 360 it might be kind of hard to see the command. Um, you have something that you can work off of there. Uh, the other thing I posted to was, uh, wired just did an article that talks about. That's kind of weird how it shows in the embedded browser. Um. Oh, you can open it. Okay. Um, they, uh, recently did an article about public key cryptography. I think it's worth reading through. It's not a long read, but just gets into the basics about, you know, how it works and whatnot. So, um, so you might want to check that out. Uh, this is another resource. So. All right, so, uh, the next thing, though, is you have a new assignment. It's a small assignment you can work on in groups. Uh, but it is to get some quick practice with VI and the command line interface. Um, it's due next Thursday. By midnight. You can work on it, uh, in pairs. So I think I said two, maybe I said, oh, you can work on it in threes if you like. Um, so you get the first assignment with the VM. I really need you to be able to build out on your own, but if you want to team up together, you can do that, okay. But the idea behind this is that I just want you to demonstrate some practice, uh, or practice some of the skills that we learned on the command line interface and VI. This is a little bit tricky, though. Um, so you'll actually be submitting a screenshot of your, of of you having VI open with some options on. But some of the stuff is you might it might seem pretty basic, but I need you to get familiar with the command line interface. Like creating directories, changing permissions, um, showing, uh, proof of that. You change those permissions, creating a file, adding some things to it, submitting a screenshot of you being in VI, uh, copying some files, renaming them, and then doing some piping. Okay. Because we're going to use that throughout. Okay. So again do next Thursday. Um, when you submit this. When you submit this, make sure that you, uh, include if you do work with a partner or or two, make sure you include their names in the comments within canvas and also at the header of the document. This way is clear who you work with. Yes. You have to, you know. No, you don't have to use if you have for that. Yeah. No, um, any kind of. As long as you have a Linux machine that you can demonstrate this proof of work. I don't care if it comes from a Google Cloud machine. Yeah, it doesn't matter. Um, it's that you're submitting proof of that work. Now, you will be doing some things to your VM though, or to your machine. Right? Um, so, you know, if you want to isolate that. I'll leave that up to you. Um, the other thing is when you submit it to just clearly number the task. So this way it's easy for them to grade. If the Tas can't figure out what task you're completing, they're not going to grade it. Okay. So any questions about the assignment? Fairly easy. Okay. All right. So now that we got that, let's continue on with our discussion on cryptography. Um, but actually let's start with the exercise first. So uh, so now you know where those open SSL commands are. Let's do a quick exercise. Uh, this is going to take a little bit of work. What I want you to do is generate a new private public key pair, but get into groups of 2 to 3 people. You need to at least be paired up with somebody else. This is what we're going to going to practice. I want you to send your public key to whatever group member you have. Or if you're in a group of three, send it to both of them to do this. There's a couple ways you could do it. One is you could log into Gmail or any kind of email client, get their email account and then send it to them. Okay. The other is that within your virtual machine you can enable copy and paste outside the virtual machine, but you'll find it as a setting. So based off of if you used fusion, if you use VirtualBox, do a quick search on how to copy and paste it, and you might need to enable that setting. Once you send a member your public key, have them use that public key to send you a message. So they're going to encrypt a message, keep it clean to send to you, and then test to see if you could decrypt that using the private key. If you forgot the commands to do this, where would you look? Where? Where is it? That's right. I posted docker PS okay so you can look at that. This is part of you getting some practice with this. So let's give it about ten minutes. We'll see if you can get it done. Pair up. You talk to people to pair up right. And if you have a question let me know. Invite me to invoke whatever you. Did you ask? Did you tell us? That. You're. Not sure about what to talk about with your partner. So I can't help. But. I think. It's important for all. Yeah. On. One side. And. Somebody shout out what's the first step before you do anything that you need to do. Copy and paste. Yeah. And then read a biography. Yeah. Generate key. Yeah. Create the private key. And then from there, you create the public key. Right. And then you have to create a message. That's right. Uh. Just do that. So. Yeah. I think we should have this. Uh, Like I. Always say. Once you have it, once you can verify it. Give me a thumbs up. So you know. You've been able to see it. That's something. Oh. I think it's good that you can focus on one. Yeah. Really quick. Would you email the public key if you include that in public key and then public. Those two like header and footer do include those lines. And this seems odd but it's pretty good. Did you do it like. That. I don't know. Yeah. Oh. Yeah. Oh. Thank. You. Thank you everyone. Well, that's that's the general description. Thank you. Thank you. Everybody. Yeah. That's good. I've said this before. So thank you all. For. Oh. Yeah. Oh, yeah. Sorry. Oh, yeah. You shouldn't have. Done. This. No. Shooting on. The. Ground. They said. It's kind of hard to. Talk about what's going on. Yeah. Let's do that. Sometimes. When you get scared working. Yeah, really really quick. So if you're trying to copy and paste from, um, from the piano, depending on the, uh, virtual machine software that you're using, diffusion or parallel or virtual lines, you may want to do it like 70 8 p.m. and then that might work. I do know that some people want to play with that though. So this is this way you might need to actually log in through a Gmail within the beyond to copy and paste while you're still in the US. Right. The other way that you could do it, though. I know this may seem kind of quirky, but let me just kind of show if you're on a mac and you could probably do this in windows two, but that's just my frame of reference. Okay. And once you're done with this exercise, you will want to keep your VM up and running. But let's say I wanted to copy this command. Um, if I do a command shift four and take a screenshot of that, I know this is like a hack. Okay. But sometimes if you don't have, like, the virtualization software working with you, you could do it this way. Um, and that will take a screenshot. So, like, you know, like using your screenshot software, which you should know because that's how you submit the assignment. And then I'm going to. Come on. Just a little disorienting. All right. Oh, it's over here. Okay. And then once you have that screenshot. On your desktop, you can actually select it. You can select the text in there. Right. I know this. I know that's like a hack. Right. But if you feel like you're fighting the software, that's just a quick way of doing it. Okay. So that's kind of like a newer feature you guys probably noticed. Like if you take like a photo or something like that, you can actually select the text. Now this is unrelated to the VM stuff. Now for this thing we can we just in general. Exercise. As well. Yeah, I see what you're saying. Does it? Yeah, yeah. Yeah yeah. Yeah yeah yeah yeah yeah. Do you see it now? Yeah. Good catch. Yeah. What's that? Yeah. So that's the trick. Uh, if you just copy that, you might not be able to send it. Did anybody get working? On this? What's that? You could do that. You could do that. But there's another way that you could do it. Where you could just keep it in the body of the email. Let's give it a little more time and see if anybody can get it work in. I'm going to fix an error though. People are having a ball over there. Who? I heard some. Attachments to the character, all that stuff. Oh, man. Look at me. All right. Anybody get work in? This isn't like a trick. It does work. It takes some time, though. Almost, almost. How do you need some stuff when you have a work in. Progress. Oh. So that's the. Power of. The. Are you sure? You understand that? Well, you know, I was just talking about this. Yeah. So, um. Do you have any questions? We just. Want to give you. The. Answer. Yeah. But also. So we try again. Now. We have, you know. A few more minutes that we can do ideas to as an individual. Oh okay. So you send me a thank you. You should be here. Or you might be the first one I. Hope we get the stuff later. So you have to do. It. Yeah, I got it. Yeah, that's how it goes. Okay. So. I. Did that. Yeah. That's what I saw. High five. Yeah. Yeah. No no no. Yeah. That's what we did. Yeah. Oh, Yeah. I guess. So. Yeah. Yeah, yeah. So you. Yeah, just. Like that. So now. We. Can do that? I think. So. Yeah. Okay. Oh. I'm sorry. Did you guys get. Know. You told me that I can do. That. Yeah. You're. Right about that. All right, so, um, let's just pause here. If you didn't get it working completely, that's okay. This is probably a maybe a taller task in a short amount of time, but, uh, let's just walk through what the steps are, and then you can always do this on your own. I think it's a good exercise. So, um, first thing we need to do, we need to generate a public private key pair. Right. Okay. Who do we give our public key to? Everyone. Everyone. Right. So you give your public key to a partner, uh, to your partner. So that public key, when you generate the key in public key and public key to send that email, or you can, you know, copy and paste or sending the files and every time you want to do it. Now that they have that public key, they need to generate a message. Right. So you can open up VI and create a message, say hello or whatever it might be. Right. Once you generate that message, what's the next step? This can be a secret even if you go to encrypted. Encrypted using a public key. Right. Now, once we encrypted using a public key, if you cut out that secret that came out, we can see. We've done this. I just posted a message. Just not yet. Not. Oh, yeah. It's a bunch of garbage, though, right? A bunch of garbage in it. So what do we need to do if we want to send that in an email, we want to convert it to some readable text 6464 encoded. And this is where base64 encoded comes in. We need to send that as text in this vector representation. We basically Base64 encoded. Once we have that, now we got a string and we can work with that. You can copy that string, put it in email, send it to the person that generated that public key pair. Then what do they do? What's the first step? Once they've copied that string and saved the product then you do that. Is it decrypted? And decoded. Decoded first. Right. Because it was basically base64 decoded. Save it to a file and then make the secret that message. And then they should be able to see it. Okay. So think of it almost as like as a kind of works its way up. Right. You got it first. Uh, encrypt that message with basic support. Code it. It goes over the wire, comes down with the base64, decode it, then we decrypt it. When we're sending messages like this, we're essentially using something called end to end encryption. How many people have heard of this? An end to end encryption? Yeah. Um, what's a popular messaging app that uses end to end encryption? What is it? What's that? I think what that does. WhatsApp is owned by Facebook, by meta. You have Facebook. Right. What's an alternative? And signal. Signal is. Yeah. So you're kind of doing something like what you would do in signal. Okay. You may think, oh, if I want to send something, a message, it's a lot of work to do that. We can obviously automated. Right. We don't need to do all these steps on the command line. But what I want you to see is first hand how you can do that. Okay. There was an error in the open SSL, uh, cheat sheet, though, that posted, uh, somebody caught it in class. It was cutting out a secret msg. You seeing a lot of garbled text? I fixed that so it has ink on there. Okay. All right, so let's let's dive in. So if you did finish it, that's okay. Um, but, um, it is something that you do want to practice on your own, to make sure that you help solidify your understanding of asymmetric encryption. All right. But let's keep going, though. Um, what I want to talk about next is hashing. Hashing is different from encryption, uh, in that we can't decrypt that. The only way that we could figure out what the message is, is by, uh, generating a same message with a similar hash. So, uh, so hashing is really a one way encryption. Um, again, the way you attack is by generating the same hash with plaintext, uh, to see if it matches. So, um, we do use it for storing, uh, any kind of password within a database. You never, ever want to store a password in the clear in a database or anywhere else for that matter, unless you're using it as input. And there's, uh, secure ways of doing that. But if you're developing an application and, um, and you store passwords in the clear, uh, I don't know, You can take this class. If you use a website and you use their forgotten password and they email you your password and stop doing service with them. That means they're storing the password. You should never be able to figure out what a person's password is. And you might be wondering, well, how do we authenticate them? When you authenticate that use, they give you that clear text password. You send it through one of the hash algorithms that I'm going to recommend using. And you use a salt with that. And you compare the hash damage from the password they supplied with the one that you have stored. If they match that, you know that the password is correct. Okay. But any website never store counters and clear any website that emails you a password that you forgot. Stop using them. Seriously? Okay. It's just a matter of time, and we'll actually get into some websites where you can actually see if somebody's found your password, if their database was hacked or exposed, or you know, whatever it may be. All right, so just like with, uh, encryption, uh, there's a bunch of different algorithms that you can use and should not use. We're going to start from the bottom. So MD5 is you probably see a lot of code examples out there using MD5. Don't use MD5. Uh you might see MD5, don't use MD5. You'll see Sha zero one uh as well. Don't use those Sha two you can use. But if you want something a little bit stronger you should use Sha 256. All right. So you're probably like there's a lot of, you know don't you. Don't do this. Don't do that. Don't do this. But you can do this. Um, but that's unfortunately the reality because people found vulnerabilities in these different algorithms. All right. So go ahead and open up your VM. And I'm going to go to the VM as well. It's kind of hard because I've got notes here. And to hash something is really easy. Uh this is not encoding. Uh it's just a one way hash. But if I had on here, if I want to do like a hello, you could do it through an echo command. You could do it through a file, but you can pipe that right to sha256 sum. And that will generate a hash for you. Okay. It's a fixed string. If I run that over and over again without a salt, I will get the same value. That's the idea, right? Uh, without, uh, without adding any randomness. But this is also a way that tables, uh, database tables can be attacked. Okay. Uh, it's because if we don't add some randomness to it, uh, there are some common use passwords, right? People actually use, you know, what's probably. What do you think is the most common use password. Password. Right. And people just think they're not. Yeah, right. So if I find this, Um, text within a database and it's. And it's not salted. There's no randomness to it. I can generate that same hash, uh, using that algorithm and then feeding password to it. And if I see this in a database, well, I know that user's password is password, right? And sometimes people get clever, right. You put a zero there. Nobody would guess that. You'd be surprised. A lot of people know that, right? Or test one, 234. Right. Um, so anyway, so, um, you know, uh, hashing is, uh, you might think, well, if we can attack it, why would we use it? We never again want to store. We never want to store passwords in the clear. We need to hash them before we store them. Okay, so Sha 256 is a way of doing that. And we'll actually take a look at how we could do that, uh, programmatically as well. Okay. All right. So, uh, when you, uh, well, what happened to it? Okay. So when you want to store something, you use a hash, but it also can be used for integrity, uh, as well. So, uh, from a file, you could generate a hash. And you've seen this. If you ever downloaded software on the internet, you will see a hash, uh, like a signature on there. And what that's meant to do is to say, hey, when you download this software, you should compute the hash from it to verify that it hasn't been modified. Right. Um, so there's a popular, uh, terminal emulator called, um, putty. Is anybody ever heard of putty? Putty? Yeah. Uh, in fact, when you download putty, it seems like it's coming from, like, a sketchy site. Uh, because it's this weird, you know, domain here. Who's this person? I don't trust them. Yeah. Uh, but when you go to download it, you're going to see something called a signature. And if you click on that signature, it's actually going to download it. But, um, but sometimes you'll also see on a website and they're not going to have it here. Sometimes you'll see like an MD5 or like a Sha is at the bottom. Oh, okay. So there's a 512. All right. So we're getting a little bit larger there. But there's our Sha 256. All these different pages and all the different executables so that when you download it you can verify that this hasn't been tampered with. Now, um, if I'm thinking like an attacker and I want to get a virus on somebody's computer. One thing I could do is I could try to break into this site, insert some malware into putty, knowing that it's a popular program. People can download it. Another way that you can also attack, um, people with without their knowledge is if you use like, uh, node. Right. So like node package manager, use Gradle or Maven and you're using a common dependency. In fact, this is an attack not too long ago, uh, with Java for their log forge library, you insert a Insert a vulnerability into there, and then everybody's pulling it down. So, um, so anyway, so the hash is kind of a way to verify that it hasn't been, uh, modified with or digital signature. When we think about digital signature, it uses both asymmetric and, uh, hash hash together. Uh, to be able to verify that this message was not modified. It's also used for non-repudiation. So the idea behind this is let's say that I send somebody a message and I want to verify that, uh, that, that or they want to verify that it is indeed from me. What I can do is I could generate a hash of that message and then sign it with my private key, or, I'm sorry, encrypt it with my private key. When I do that, I'm generating a signature. I said this is the state of the message, and I signed it with my private key. That person can verify that that message is indeed from me by using the public key to decrypt That hash and then running that same hash algorithm against the message. If they come up with the same hash value that I signed off on, then they indeed know that it was from me. So this is also used for non-repudiation, meaning that I can prove that somebody did sign off on this or that they did send it, because as long as they kept their private key private, we know that they generated that hash and they signed it with their key. Okay. So it's also used for that as well. But it's a way, again, of being able to be able to digitally, digitally sign a message. And we see this in certificates. Okay. All right. So I kind of hammered this at home already to never store passwords in the clear that you should use some sort of hash. But when we use a hash we want to use it with the salt. We also want to use it with some iteration. So it's a little bit more secure. Again if a website sends you what your password is, if you forgot it. Don't use them. You don't want to continue using that service. There are some popular algorithms that you can use for this. We'll actually get some hands on experience with Abcdef two, but you can also use B script and you can also use argon to ID. All right. So that's the more popular one. Do a quick search though in your browser. And can somebody tell me what PHP uses. So PHP has a password hash function. Can anybody tell me what algorithm they use. Do you know for certain. Do a quick look. Do a quick look up for it. All right. So go to php. Net. You can find out what their password hash function is. It will tell you what their algorithm is that they use. Did you use any of the recommended ones that we have? Anybody find it yet? To be kept. That's exactly right. So B script it uses. Does it support some other algorithms though. Can you override it. You can. Right. So you can change that algorithm. So um you may be wondering which one should I use if it's suggesting B script. That's probably for a good reason. You don't want to drop it down to, uh, MD5. All right. Um, another way of kind of hiding stuff. This really isn't encryption, but I do want to bring it up as steganography. Um, so this can be used if you want to hide data, like in an image or in a video, you're trying to transmit some information from one end to another. Um, there's a fascinating episode. I think it might have been the Ted Radio Hour podcast. They talked about this person from the CIA, uh, where they would hide, uh, data within. They called it, um, a pixel or was it a dot? Maybe there's a there's a name for it, but essentially, like a spy would get like a life magazine, you know, because that was the thing back then and they would know, like at a certain page at a certain period, there would be a message in there and they would shine a light through it and they would see whatever that secret message is. Right. But there are modern tools. We could do this today, um, as you probably are aware, like if you zoom in on an image, like a JPEG, it starts to get a little bit blurry. You can change enough pixels within a JPEG to hide an image. That's what we call steganography. You can also do it in a video as well. Okay, so that's not necessarily encryption, but it is a way of hiding messages. All right. So again just some important takeaways I want you to have with this. Never write your own encryption. Never hand roll your own. Don't think that because if you write your own encryption that um, that people won't be able to figure out figure it out, use this been proven and what's been tested out there. And we'll take a look at resources later to find where you can where you where you can see that, um, also stay up to date with that. So some cyphers become out of date. They find a new vulnerability with that. Um, you want to stay up to date with the latest and greatest. All right, so quick recap. Um, what's faster is asymmetric or symmetric? I know we already talked about this. Which one is faster? Yell it out. Symmetric. Good, good. Which one has a larger key size? Good. Given the choice between the two. ECB or CBC? CBC. Yeah CBC. Good good good. What's the encoding and encryption? Coding does not change in encryption like secure. So it cannot be encrypted without the key. Yeah. So one is actually doing the encryption right. And using a key. The other one is just converting it to a different format that we can convert it back. Right. So it does change the message. But it's doing it where we can easily convert it back. All right. Um, do we still use encoding then? Yeah. You did in that exercise. right? If you need to transmit something over that's not in the text representation. Use encoding to convert it to text. What's hash? What is a hash? One way. Right. We cannot decrypt it. Can we attack it then? Yes, we can compare. Uh, common phrase that we use within a hash to be able to see if that's what's stored. Um, what's a hash algorithm that we should use or that we can use Sha256? What's one that we should not use? Sha what, 0 or 1 or MD5. Good good good. Um, how do we use hashing and encryption together for digital signatures? So use asymmetric. We generate a hash of the message. And then what do we do with that. With asymmetric encryption sign in with the private key. And then how can somebody verify it Decrypted with the public key, and they compute the same hash on the message. If it matches, then they know we signed off on it. Okay. All right. So go ahead and open up IntelliJ and you can start a brand new project. I already created one called crypto. As long as you're using Java 17 or above. Um, really Java I think Java 11 and above would work, but I wanted you to have something that's fairly new and the slides from today I will post at the end at the end of class. Okay. So if you're wondering if those will be posted, I always post them at the end of class. I wait until then because, um, because we might have something that we, um, that we change in there and, uh, start posting it twice or just post it once. All right. So, um, what we're going to do is we're going to build a simple tool that asks the user for a private key. We would actually never do this, okay. But we're just going to get some practice with that. And then a message to encrypt or decrypt, right? At the end I will post this example. So. But I think it's good for you to follow along. Get some practice with that. Um, and ideally we would also use the console object on here. But when we're using it with um within the IDE it doesn't work the same. So um, so we're just going to use like our standard system dot out and then, um, a scanner object to read some text. Okay. All right. So let's go ahead and let's create a scanner so we can get some information. And I'm going to create a scanner on system N. So just from our input and then I'm going to ask the user for a key. So I'm going to do the S shortcut. I'm going to take off the line. And I'm going to do enter key. And then we're going to read that key in. As a string. And how do we read some text in from the user in Java? Scanner. That next line. Yeah. Um, one quick pitfall I see sometimes people do this. If you're reading an integer don't do next int okay. You still do next line because you're waiting for them to hit enter and then use integer parts around that. Okay. All right. So let's ask the user. And we're not focused so much on um error checking so much right now. But let's ask them do you want to encrypt or decrypt. I'm going to give them a prompt. Give me an E or a D. All right. I'm just going to read in that option. Okay. So I'm going to just read that option from that very basic stuff. This is stuff you probably did on 132. Should be familiar with. All right. So uh, if they are going to encrypt or decrypt. So if that option equals D. We're just going to do an S out. Enter a message to decrypt. Message E to decrypt. Otherwise if they're doing the encrypt it's going to do the same thing elseif. Enter message to encrypt right. So if they give us a D or in decrypt it gets to E. We're going to encrypt. Otherwise. Let's just throw an error. I'm not going to throw it. And the system out. Or system error. Print ln invalid option. And we'll just do a system exit one. Okay. When you're working on a Linux system, any any return code from a process that's not zero typically means that it wasn't successful or there were some other option or some other state that was returned. So anytime we return zero, that usually means success. Otherwise it's some sort of code that needs to be interpreted. All right. So if you want to go ahead and test it out to make sure it works, you can um, just that your option works, your menu works. But I'm going to move on to, uh, actually generating the key. So before we do, before we get into to encrypt or decrypt. I don't need to write this code inside there, because, uh, the algorithm that we use is going to be the same, right? If you use an AWS algorithm to encrypt, you don't want to switch to DS to decrypt, right? You need to use the same algorithm. Right. So we can specify the algorithm, uh, at the beginning. So uh, so I'm going to go ahead and specify that I'm going to use this cipher. So you see a Java X crypto there. So I'm going to create a cipher. And uh in order to get that I'm going to do cipher dot get instance. And I'm going to specify a yes. Okay. Now um, when we do this you'll notice that get instance is has that red squiggly under underneath it. Why is that. Well, if you if you put your mouse over it, what does it say? Has an exception. Right. Has an exception. So, um. Now what should we do with the exceptions? We should catch them, right? We should catch them. We should tell the user that's not available. But we're going to do things a little loosey goosey today. I'm just going to throw it to the method signature okay. So I'm just going to add that exception to the method signature. Um, so you'll see that in no such padding. Uh, no such, uh, cipher, uh, exists or no such algorithm exists. Right. Um, so I'm just going to throw that right from main and just crash the program. Okay. So all I did there is if you missed that step, I'm going to undo it. Undo it. I'm just going to highlight over that in IntelliJ. And it will say what do you want to do. You can add the exception to the method signature Or I can do more actions. I can do my try catch. I could certainly do that, but I'm just going to throw the exception on the method signature and just be done with it. Crash the program. Okay. In the real world, you do a try. Catch. Okay, we're just keeping the code simple today. All right, so we got our algorithm. The next thing I want to do is I want to generate a key. And so they gave us a key here. And so I'm going to create that key. So I'm going to do secret key spec key equals new secret key secret key spec I if I take a look at the arguments it expects a couple of things. One is the algorithm, one is the key. And that key is an array of bytes. So from our key string we can just call get bytes. That will feed that. And again it will ask us for the algorithm. Right. So I'm going to feed as. Now ideally what we would actually do is have this stored as a string constant up top here and then feed it. We don't want to type that in twice because then we can make a mistake. But we'll just kind of leave it like that for now. Uh, if you're curious, um, what are the different names that we can use? There is a Java doc, and I can post a link to it that will tell you what the different names are. Um, so that this way, you know, um, which one you can use. But so you're wondering, like, well, why don't we specify 256, what would we use for Blowfish and so on. I'll post a link to this. Just so you know what those names are. Um, but but anyways, uh, there is a doc for that. Okay. All right, so now that we got, uh, we get we asked them if they want to encrypt, decrypt. We got a cipher. Uh, we have a key, uh, that we're generating from that key string. Now what we're going to do is we're going to do either decrypt or encrypt. So let's do an encrypt first because we don't have anything to decrypt. So here we get the message to encrypt. I'm going to grab that message by using scanner next line. And now what we need to do is we need to initialize our cipher that's going to do the encryption. Okay. So I'm going to call that cipher that we created up here. And I'm going to initialize it. And it's asking what mode are we using. Right. So are we going to encrypt or decrypt. So if I do cipher you're going to see all the different options here. Encrypt mode. Decrypt mode. We're going to use what you would think encrypt mode because we're encrypting. But the other argument is going to ask for is hey, I need a key. So we're going to use that key that we created up here. Okay. Because remember anytime we do encryption decryption we need a key. We need an algorithm. We need a key in order to do that. And then the last step here is we're going to get that encrypted data which is going to come back in a byte array. Not going to be in a string right. But we'll come back in a byte array. So we're going to get the bytes from that message. And we're going to encrypt that. All right. Why do we got the red squiggly again. Work session. Yeah. So all these all these um this init, if we highlight over it, it says, oh, you got an exception. What if it's an invalid key? What should we do? Throw it. Right. Throw it. Not our problem. So if I go over that, um. I shouldn't be so enthusiastic about it. We should do a try. Catch. Okay. But we're just trying to build a working example, so I'm just going to throw that to the method and do final. If I take a look at that. It's another exception. What if there's an illegal block size. Throw it. Right. Again. Uh, you would never do this in the real world if you did that, and you submit it for a code review, you might not work out well for you. Okay? So make sure that you do do a try and catch on those. All right. But we're just trying to build a working example here. All right. So what I want you to do is now that we have that, we ask a user for a key. We ask them if they want to encrypt or decrypt. We ask them for a message and then we encrypt that message. Try it out. See if it works. If you run it, give it a message. Give it a key. See if it works. Does it work? Oh, unrelated. Let's hold on that. It's a code thing. Let's hold on. That we don't have to print out the na. Let's let's hope. Let's see if you get that far. All right. So if I run, I'm going to try running it here. I'm going to enter a key. Uh, my key of course, is going to be a secret. Nobody would be able to figure that one out. Right. Uh, I'm going to encrypt. Say hello, world. Ah. What's this? Who didn't try? Catch their the code. Invalid as key length six bytes. What's it talking about? What's that? So? We have that. So as we're developed lines 28 128 256. One more. I was going to say that we could do the padding right. We could pad those amount of characters. So we need to generate this. 128 192 or uh 256 six is invalid, right? So now we could actually wait until we have an exception, right? Or we could actually tell the user, hey, you need to have something a little bit longer or shorter, or we could do some padding. Uh, I'm going to tell you, though, all three of those options aren't good. We're going to take a look at a better way of doing it. In our next class. We're not done yet, so don't don't run out of here. Um, but let's try to do something that is, um, uh, that actually fits that. So keep in mind it's 128 bit, 192 bit or 256 bit. So if you take 128 divided by eight, what do you get? Too early for that. If we take 128 divided by eight we get 16, right? So that just means we need 16 characters. 16 characters. All right. So if I were to now look like I know you guys take some, uh, some pretty advanced math stuff, you know what I mean? So, like, we could do some division this early in the morning, right? All right, so if I entered a key, uh, I need to come up with 128 divided by eight, 16 characters, right? 16 characters. So I'm just going to count it out. I know this is going to feel kind of generic, but if I do case that's for Western. 1234567. So we got 11 and then just five more characters. Oh we can't do the whole V. So I got 16 characters now right. So that should be a valid key size. I'm going to encrypt I'm going to enter the message to decrypt blah. And it runs. It runs. It finishes without an exception or any kind of error. So uh, so we're actually able to get it to actually run, but I want to be able to see what that encrypted message is. So what I need to do is I need to convert it to a string. Can I take a byte array and convert it to a string? Sure. Right. I could of course I could do that. So, uh, I'm going to get my, uh, I got my encrypted. Why do you call that encrypted state encrypted data. And if I create a message from that string, I could do a new string. And I could pass in a byte array. Right. And I could just do an S out. Right. So I can I can do my encryption. I could then take that or make a string from it and then print it out. Right. So I'm going to run through this again. Enter key case Western Reserve. No V or E I'm going to encrypt I'm going to say hello. Look at that. Isn't that beautiful. You know some people say the most beautiful thing they see is when their kids are born. No, no, this this this beats it, right? Look at that. Now that there is different, don't tell my kids, okay? Um, look at that, though, right? All right, so what's the problem here? We got a bunch of junk. What do we need to do with this? If we want to send it, encode it. Right, we need to encode it. All right, so what are we going to use? Base 64. Right. Base 64. So we got our message string here um, instead of. Now here's the thing. Um, when we have this data, do we create do we base64 it first or do we create a string. We should base64 encode it first. So right within that constructor I'm just going to do base 64. It's a Java util. It's built in. We're going to get encoder. And then we're just going to code. Close those parentheses I think that's good. That looks good to me. And then you know the drill. Well, we'll run it again. Right. So I just added base64 encoder there. New case Western reserve. Without the V I'm going to encrypt a message. Say hello and I see oh yeah there we go. We are good to go. How do we know space 64 encoded. What's the telltale sign. Equal. Equal right. We won't always see that. But sometimes we'll see that. All right let's stop here. I'll post the example from today. And then when we get back together next time we'll do decryption. But I do want to give you just a quick warning though. This is not how you should get a key. We're going to take a look at a better way of getting a key or generating a key when we get back together Tuesday. But what I hope that you can see though, is how you can automate some of that encryption decryption that you were doing manually at the beginning of class. All right. Stay warm and I'll see you all next week. Yeah. I was wondering how I should do this. Oh, okay. I love you. Oh, be careful here. Yeah yeah yeah yeah. Yeah. No. Java. No. Okay. All right. Well, you're going to get. Us. What? What language did you. Yeah. What was. That. You know, f l stuff like that. Yeah. Okay. Some of this stuff, like. Okay. It's like. It's like a straight message, straight from Matlab. No I'm not. No, it's just like message string equals. It's like you just need. Gotcha. Okay. That's strange. Is that saying that this is. Yeah, yeah. So it's a strongly typed system. It's a statically typed system too. So we know the type that compiles. So when you declare this a string, you're saying that this is a string because I can't store the number eight there. I can store eight as a string in there, but I can't store that. So yeah. So you declare the type of fraud? Yeah. I'll just. I'll figure something out. Yeah. Well, here's, um, what might be beneficial, um, is I think I might have mentioned this last time W3 schools, did I or now. Uh, so if you just do a search W3 schools like Intro to Java like it will give you like a quick intro like the syntax and that that might be helpful. Yeah. And really like, um, we'll have two assignments with it, but that will be it. This isn't a programing class, but I do want you all to be familiar with, like, how we can apply programing to your security. There will be a session or there will be a point there where we take a look at vulnerabilities. We'll use PHP as a language to study for that, but I'll do an overview of PHP and you'll probably find it more familiar with Matt, like as compared to Matlab, because you don't declare the types high. And say in the world, when you're working on the software, would you still be doing all this stuff? Are you all right? Oh yeah. So there's there's libraries out there that you can use like Bouncy castle and that, that can do that encryption for you. But you can use that. Yeah. You wouldn't have to code it. Yes. In there you would definitely be ready because it's a really great time. Yeah. You read from a file you would never have any time you start.
